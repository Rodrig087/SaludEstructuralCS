;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 5/7/2020 22:57:40
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040CFA  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000DE4  	3556
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x00112A  	4394
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000BCE  	3022
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0CFA	0x2126EF  	MOV	#4718, W15
0x0CFC	0x27FFF0  	MOV	#32767, W0
0x0CFE	0xB7A020  	MOV	WREG, SPLIM
0x0D00	0x202010  	MOV	#513, W0
0x0D02	0xB7A032  	MOV	WREG, DSRPAG
0x0D04	0x200040  	MOV	#4, W0
0x0D06	0xB72044  	IOR	CORCON
;Master.c,104 :: 		void main() {
;Master.c,106 :: 		ConfiguracionPrincipal();
0x0D08	0x07FD98  	RCALL	_ConfiguracionPrincipal
;Master.c,107 :: 		DS3234_init();
0x0D0A	0x07FF05  	RCALL	_DS3234_init
;Master.c,113 :: 		i = 0;
0x0D0C	0xEF2000  	CLR	W0
0x0D0E	0x8892E0  	MOV	W0, _i
;Master.c,114 :: 		j = 0;
0x0D10	0xEF2000  	CLR	W0
0x0D12	0x8892B0  	MOV	W0, _j
;Master.c,115 :: 		x = 0;
0x0D14	0xEF2000  	CLR	W0
0x0D16	0x8892C0  	MOV	W0, _x
;Master.c,116 :: 		y = 0;
0x0D18	0xEF2000  	CLR	W0
0x0D1A	0x8892D0  	MOV	W0, _y
;Master.c,119 :: 		banSPI0 = 0;
0x0D1C	0x2125E1  	MOV	#lo_addr(_banSPI0), W1
0x0D1E	0xEF2000  	CLR	W0
0x0D20	0x784880  	MOV.B	W0, [W1]
;Master.c,120 :: 		banSPI1 = 0;
0x0D22	0x212631  	MOV	#lo_addr(_banSPI1), W1
0x0D24	0xEF2000  	CLR	W0
0x0D26	0x784880  	MOV.B	W0, [W1]
;Master.c,121 :: 		banSPI2 = 0;
0x0D28	0x212641  	MOV	#lo_addr(_banSPI2), W1
0x0D2A	0xEF2000  	CLR	W0
0x0D2C	0x784880  	MOV.B	W0, [W1]
;Master.c,122 :: 		banSPI3 = 0;
0x0D2E	0x212651  	MOV	#lo_addr(_banSPI3), W1
0x0D30	0xEF2000  	CLR	W0
0x0D32	0x784880  	MOV.B	W0, [W1]
;Master.c,123 :: 		banSPI4 = 0;
0x0D34	0x212621  	MOV	#lo_addr(_banSPI4), W1
0x0D36	0xEF2000  	CLR	W0
0x0D38	0x784880  	MOV.B	W0, [W1]
;Master.c,124 :: 		banSPI5 = 0;
0x0D3A	0x2125F1  	MOV	#lo_addr(_banSPI5), W1
0x0D3C	0xEF2000  	CLR	W0
0x0D3E	0x784880  	MOV.B	W0, [W1]
;Master.c,125 :: 		banSPI6 = 0;
0x0D40	0x212601  	MOV	#lo_addr(_banSPI6), W1
0x0D42	0xEF2000  	CLR	W0
0x0D44	0x784880  	MOV.B	W0, [W1]
;Master.c,126 :: 		banSPI7 = 0;
0x0D46	0x212611  	MOV	#lo_addr(_banSPI7), W1
0x0D48	0xEF2000  	CLR	W0
0x0D4A	0x784880  	MOV.B	W0, [W1]
;Master.c,127 :: 		banSPI8 = 0;
0x0D4C	0x2124D1  	MOV	#lo_addr(_banSPI8), W1
0x0D4E	0xEF2000  	CLR	W0
0x0D50	0x784880  	MOV.B	W0, [W1]
;Master.c,128 :: 		banSPI9 = 0;
0x0D52	0x212431  	MOV	#lo_addr(_banSPI9), W1
0x0D54	0xEF2000  	CLR	W0
0x0D56	0x784880  	MOV.B	W0, [W1]
;Master.c,129 :: 		banSPIA = 0;
0x0D58	0x212441  	MOV	#lo_addr(_banSPIA), W1
0x0D5A	0xEF2000  	CLR	W0
0x0D5C	0x784880  	MOV.B	W0, [W1]
;Master.c,132 :: 		i_gps = 0;
0x0D5E	0xEF2000  	CLR	W0
0x0D60	0x889230  	MOV	W0, _i_gps
;Master.c,133 :: 		byteGPS = 0;
0x0D62	0x212421  	MOV	#lo_addr(_byteGPS), W1
0x0D64	0xEF2000  	CLR	W0
0x0D66	0x784880  	MOV.B	W0, [W1]
;Master.c,134 :: 		banTIGPS = 0;
0x0D68	0x212331  	MOV	#lo_addr(_banTIGPS), W1
0x0D6A	0xEF2000  	CLR	W0
0x0D6C	0x784880  	MOV.B	W0, [W1]
;Master.c,135 :: 		banTFGPS = 0;
0x0D6E	0x212401  	MOV	#lo_addr(_banTFGPS), W1
0x0D70	0xEF2000  	CLR	W0
0x0D72	0x784880  	MOV.B	W0, [W1]
;Master.c,136 :: 		banTCGPS = 0;
0x0D74	0x212411  	MOV	#lo_addr(_banTCGPS), W1
0x0D76	0xEF2000  	CLR	W0
0x0D78	0x784880  	MOV.B	W0, [W1]
;Master.c,137 :: 		banSetGPS = 0;
0x0D7A	0x212451  	MOV	#lo_addr(_banSetGPS), W1
0x0D7C	0xEF2000  	CLR	W0
0x0D7E	0x784880  	MOV.B	W0, [W1]
;Master.c,140 :: 		banSetReloj = 0;
0x0D80	0x2124C1  	MOV	#lo_addr(_banSetReloj), W1
0x0D82	0xEF2000  	CLR	W0
0x0D84	0x784880  	MOV.B	W0, [W1]
;Master.c,141 :: 		horaSistema = 0;
0x0D86	0xEF2000  	CLR	W0
0x0D88	0xEF2002  	CLR	W1
0x0D8A	0x889270  	MOV	W0, _horaSistema
0x0D8C	0x889281  	MOV	W1, _horaSistema+2
;Master.c,142 :: 		fechaSistema = 0;
0x0D8E	0xEF2000  	CLR	W0
0x0D90	0xEF2002  	CLR	W1
0x0D92	0x889290  	MOV	W0, _fechaSistema
0x0D94	0x8892A1  	MOV	W1, _fechaSistema+2
;Master.c,143 :: 		fuenteReloj = 0;
0x0D96	0x2124B1  	MOV	#lo_addr(_fuenteReloj), W1
0x0D98	0xEF2000  	CLR	W0
0x0D9A	0x784880  	MOV.B	W0, [W1]
;Master.c,144 :: 		referenciaTiempo = 0;
0x0D9C	0x212481  	MOV	#lo_addr(_referenciaTiempo), W1
0x0D9E	0xEF2000  	CLR	W0
0x0DA0	0x784880  	MOV.B	W0, [W1]
;Master.c,147 :: 		banRSI = 0;
0x0DA2	0x212491  	MOV	#lo_addr(_banRSI), W1
0x0DA4	0xEF2000  	CLR	W0
0x0DA6	0x784880  	MOV.B	W0, [W1]
;Master.c,148 :: 		banRSC = 0;
0x0DA8	0x2124A1  	MOV	#lo_addr(_banRSC), W1
0x0DAA	0xEF2000  	CLR	W0
0x0DAC	0x784880  	MOV.B	W0, [W1]
;Master.c,149 :: 		byteRS485 = 0;
0x0DAE	0x212691  	MOV	#lo_addr(_byteRS485), W1
0x0DB0	0xEF2000  	CLR	W0
0x0DB2	0x784880  	MOV.B	W0, [W1]
;Master.c,150 :: 		i_rs485 = 0;
0x0DB4	0xEF2000  	CLR	W0
0x0DB6	0x889350  	MOV	W0, _i_rs485
;Master.c,151 :: 		numDatosRS485 = 0;
0x0DB8	0x2126C1  	MOV	#lo_addr(_numDatosRS485), W1
0x0DBA	0xEF2000  	CLR	W0
0x0DBC	0x784880  	MOV.B	W0, [W1]
;Master.c,152 :: 		funcionRS485 = 0;
0x0DBE	0x212681  	MOV	#lo_addr(_funcionRS485), W1
0x0DC0	0xEF2000  	CLR	W0
0x0DC2	0x784880  	MOV.B	W0, [W1]
;Master.c,153 :: 		subFuncionRS485 = 0;
0x0DC4	0x212661  	MOV	#lo_addr(_subFuncionRS485), W1
0x0DC6	0xEF2000  	CLR	W0
0x0DC8	0x784880  	MOV.B	W0, [W1]
;Master.c,156 :: 		banInicioMuestreo = 0;
0x0DCA	0x212671  	MOV	#lo_addr(_banInicioMuestreo), W1
0x0DCC	0xEF2000  	CLR	W0
0x0DCE	0x784880  	MOV.B	W0, [W1]
;Master.c,159 :: 		RP1 = 0;
0x0DD0	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,160 :: 		INT_SINC = 1;                                                              //Enciende el pin TEST
0x0DD2	0xA82E04  	BSET	LATA1_bit, BitPos(LATA1_bit+0)
;Master.c,161 :: 		INT_SINC1 = 0;                                                             //Inicializa los pines de sincronizacion en 0
0x0DD4	0xA90E04  	BCLR	LATA0_bit, BitPos(LATA0_bit+0)
;Master.c,162 :: 		INT_SINC2 = 0;
0x0DD6	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;Master.c,163 :: 		INT_SINC3 = 0;
0x0DD8	0xA94E15  	BCLR	LATB10_bit, BitPos(LATB10_bit+0)
;Master.c,164 :: 		INT_SINC4 = 0;
0x0DDA	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Master.c,166 :: 		MSRS485 = 0;                                                               //Establece el Max485 en modo de lectura;
0x0DDC	0xA96E15  	BCLR	LATB11_bit, BitPos(LATB11_bit+0)
;Master.c,168 :: 		SPI1BUF = 0x00;
0x0DDE	0xEF2248  	CLR	SPI1BUF
;Master.c,170 :: 		while(1){
L_main43:
;Master.c,173 :: 		}
0x0DE0	0x37FFFF  	BRA	L_main43
;Master.c,175 :: 		}
L_end_main:
L__main_end_loop:
0x0DE2	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Master.c,184 :: 		void ConfiguracionPrincipal(){
;Master.c,187 :: 		CLKDIVbits.FRCDIV = 0;                                                     //FIN=FRC/1
0x083A	0x781F8A  	PUSH	W10
0x083C	0x781F8B  	PUSH	W11
0x083E	0x781F8C  	PUSH	W12
0x0840	0x781F8D  	PUSH	W13
0x0842	0x803A21  	MOV	CLKDIVbits, W1
0x0844	0x2F8FF0  	MOV	#63743, W0
0x0846	0x608000  	AND	W1, W0, W0
0x0848	0xB7A744  	MOV	WREG, CLKDIVbits
;Master.c,188 :: 		CLKDIVbits.PLLPOST = 0;                                                    //N2=2
0x084A	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x084C	0x784090  	MOV.B	[W0], W1
0x084E	0xB3C3F0  	MOV.B	#63, W0
0x0850	0x60C080  	AND.B	W1, W0, W1
0x0852	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0854	0x784801  	MOV.B	W1, [W0]
;Master.c,189 :: 		CLKDIVbits.PLLPRE = 5;                                                     //N1=7
0x0856	0xB3C050  	MOV.B	#5, W0
0x0858	0x784080  	MOV.B	W0, W1
0x085A	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x085C	0x68C090  	XOR.B	W1, [W0], W1
0x085E	0x60C0FF  	AND.B	W1, #31, W1
0x0860	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0862	0x68C090  	XOR.B	W1, [W0], W1
0x0864	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0866	0x784801  	MOV.B	W1, [W0]
;Master.c,190 :: 		PLLFBDbits.PLLDIV = 150;                                                   //M=152
0x0868	0x200960  	MOV	#150, W0
0x086A	0x780080  	MOV	W0, W1
0x086C	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x086E	0x688090  	XOR	W1, [W0], W1
0x0870	0x201FF0  	MOV	#511, W0
0x0872	0x608080  	AND	W1, W0, W1
0x0874	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0876	0x688090  	XOR	W1, [W0], W1
0x0878	0x883A31  	MOV	W1, PLLFBDbits
;Master.c,193 :: 		ANSELA = 0;                                                                //Configura PORTA como digital     *
0x087A	0xEF2E0E  	CLR	ANSELA
;Master.c,194 :: 		ANSELB = 0;                                                                //Configura PORTB como digital     *
0x087C	0xEF2E1E  	CLR	ANSELB
;Master.c,196 :: 		TRISA2_bit = 0;                                                            //RTC_CS
0x087E	0xA94E00  	BCLR	TRISA2_bit, BitPos(TRISA2_bit+0)
;Master.c,197 :: 		INT_SINC_Direction = 0;                                                    //INT_SINC
0x0880	0xA92E00  	BCLR	TRISA1_bit, BitPos(TRISA1_bit+0)
;Master.c,198 :: 		INT_SINC1_Direction = 0;                                                   //INT_SINC1
0x0882	0xA90E00  	BCLR	TRISA0_bit, BitPos(TRISA0_bit+0)
;Master.c,199 :: 		INT_SINC2_Direction = 0;                                                   //INT_SINC2
0x0884	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Master.c,200 :: 		INT_SINC3_Direction = 0;                                                   //INT_SINC3
0x0886	0xA94E11  	BCLR	TRISB10_bit, BitPos(TRISB10_bit+0)
;Master.c,201 :: 		INT_SINC4_Direction = 0;                                                   //INT_SINC4
0x0888	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
;Master.c,202 :: 		RP1_Direction = 0;                                                         //RP1
0x088A	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Master.c,203 :: 		MSRS485_Direction = 0;                                                     //MSRS485
0x088C	0xA96E11  	BCLR	TRISB11_bit, BitPos(TRISB11_bit+0)
;Master.c,205 :: 		TRISB13_bit = 1;                                                           //SQW
0x088E	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Master.c,206 :: 		TRISB14_bit = 1;                                                           //PPS
0x0890	0xA8CE11  	BSET	TRISB14_bit, BitPos(TRISB14_bit+0)
;Master.c,208 :: 		INTCON2.GIE = 1;                                                           //Habilita las interrupciones globales *
0x0892	0xA8E8C3  	BSET	INTCON2, #15
;Master.c,211 :: 		RPINR18bits.U1RXR = 0x22;                                                  //Configura el pin RB2/RPI34 como Rx1
0x0894	0xB3C220  	MOV.B	#34, W0
0x0896	0x784080  	MOV.B	W0, W1
0x0898	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x089A	0x68C090  	XOR.B	W1, [W0], W1
0x089C	0xB3C7F0  	MOV.B	#127, W0
0x089E	0x60C080  	AND.B	W1, W0, W1
0x08A0	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x08A2	0x68C090  	XOR.B	W1, [W0], W1
0x08A4	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x08A6	0x784801  	MOV.B	W1, [W0]
;Master.c,212 :: 		RPOR0bits.RP35R = 0x01;                                                    //Configura el Tx1 en el pin RB3/RP35
0x08A8	0x201000  	MOV	#256, W0
0x08AA	0x780080  	MOV	W0, W1
0x08AC	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x08AE	0x688090  	XOR	W1, [W0], W1
0x08B0	0x23F000  	MOV	#16128, W0
0x08B2	0x608080  	AND	W1, W0, W1
0x08B4	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x08B6	0x688090  	XOR	W1, [W0], W1
0x08B8	0x883401  	MOV	W1, RPOR0bits
;Master.c,213 :: 		U1RXIE_bit = 0;                                                            //Habilita la interrupcion UART1 RX
0x08BA	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Master.c,214 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART1 RX
0x08BC	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Master.c,215 :: 		IPC2bits.U1RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x08BE	0x240000  	MOV	#16384, W0
0x08C0	0x780080  	MOV	W0, W1
0x08C2	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x08C4	0x688090  	XOR	W1, [W0], W1
0x08C6	0x270000  	MOV	#28672, W0
0x08C8	0x608080  	AND	W1, W0, W1
0x08CA	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x08CC	0x688090  	XOR	W1, [W0], W1
0x08CE	0x884221  	MOV	W1, IPC2bits
;Master.c,216 :: 		U1STAbits.URXISEL = 0x00;                                                  //Interrupt is set when any character is received and transferred from the UxRSR to the receive buffer; receive buffer has one or more characters
0x08D0	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x08D2	0x784090  	MOV.B	[W0], W1
0x08D4	0xB3C3F0  	MOV.B	#63, W0
0x08D6	0x60C080  	AND.B	W1, W0, W1
0x08D8	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x08DA	0x784801  	MOV.B	W1, [W0]
;Master.c,217 :: 		UART1_Init(9600);                                                          //Inicializa el UART1 con una velocidad de 9600 baudios
0x08DC	0x22580A  	MOV	#9600, W10
0x08DE	0x20000B  	MOV	#0, W11
0x08E0	0x07FD4F  	RCALL	_UART1_Init
;Master.c,220 :: 		RPINR19bits.U2RXR = 0x2F;                                                  //Configura el pin RB15/RPI47 como Rx2
0x08E2	0xB3C2F0  	MOV.B	#47, W0
0x08E4	0x784080  	MOV.B	W0, W1
0x08E6	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x08E8	0x68C090  	XOR.B	W1, [W0], W1
0x08EA	0xB3C7F0  	MOV.B	#127, W0
0x08EC	0x60C080  	AND.B	W1, W0, W1
0x08EE	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x08F0	0x68C090  	XOR.B	W1, [W0], W1
0x08F2	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x08F4	0x784801  	MOV.B	W1, [W0]
;Master.c,221 :: 		RPOR1bits.RP36R = 0x03;                                                    //Configura el Tx2 en el pin RB4/RP36
0x08F6	0xB3C030  	MOV.B	#3, W0
0x08F8	0x784080  	MOV.B	W0, W1
0x08FA	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x08FC	0x68C090  	XOR.B	W1, [W0], W1
0x08FE	0xB3C3F0  	MOV.B	#63, W0
0x0900	0x60C080  	AND.B	W1, W0, W1
0x0902	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0904	0x68C090  	XOR.B	W1, [W0], W1
0x0906	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0908	0x784801  	MOV.B	W1, [W0]
;Master.c,222 :: 		U2RXIE_bit = 1;                                                            //Habilita la interrupcion UART2 RX
0x090A	0xA8C823  	BSET	U2RXIE_bit, BitPos(U2RXIE_bit+0)
;Master.c,223 :: 		U2STAbits.URXISEL = 0x00;
0x090C	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x090E	0x784090  	MOV.B	[W0], W1
0x0910	0xB3C3F0  	MOV.B	#63, W0
0x0912	0x60C080  	AND.B	W1, W0, W1
0x0914	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x0916	0x784801  	MOV.B	W1, [W0]
;Master.c,224 :: 		IPC7bits.U2RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x0918	0x204000  	MOV	#1024, W0
0x091A	0x780080  	MOV	W0, W1
0x091C	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x091E	0x688090  	XOR	W1, [W0], W1
0x0920	0x207000  	MOV	#1792, W0
0x0922	0x608080  	AND	W1, W0, W1
0x0924	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x0926	0x688090  	XOR	W1, [W0], W1
0x0928	0x884271  	MOV	W1, IPC7bits
;Master.c,225 :: 		U2STAbits.URXISEL = 0x00;
0x092A	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x092C	0x784090  	MOV.B	[W0], W1
0x092E	0xB3C3F0  	MOV.B	#63, W0
0x0930	0x60C080  	AND.B	W1, W0, W1
0x0932	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x0934	0x784801  	MOV.B	W1, [W0]
;Master.c,226 :: 		UART2_Init_Advanced(2000000, _UART_8BIT_NOPARITY, _UART_ONE_STOPBIT, _UART_HI_SPEED);
0x0936	0xEF201A  	CLR	W13
0x0938	0xEF2018  	CLR	W12
0x093A	0x28480A  	MOV	#33920, W10
0x093C	0x2001EB  	MOV	#30, W11
0x093E	0x200010  	MOV	#1, W0
0x0940	0x781F80  	PUSH	W0
0x0942	0x07FDA8  	RCALL	_UART2_Init_Advanced
0x0944	0xB1002F  	SUB	#2, W15
;Master.c,229 :: 		SPI1STAT.SPIEN = 1;                                                        //Habilita el SPI1 *
0x0946	0xA8E241  	BSET	SPI1STAT, #15
;Master.c,230 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);
0x0948	0x20003D  	MOV	#3, W13
0x094A	0x2001CC  	MOV	#28, W12
0x094C	0xEF2016  	CLR	W11
0x094E	0xEF2014  	CLR	W10
0x0950	0xEF2000  	CLR	W0
0x0952	0x781F80  	PUSH	W0
0x0954	0x200400  	MOV	#64, W0
0x0956	0x781F80  	PUSH	W0
0x0958	0x202000  	MOV	#512, W0
0x095A	0x781F80  	PUSH	W0
0x095C	0x200800  	MOV	#128, W0
0x095E	0x781F80  	PUSH	W0
0x0960	0x07FE7D  	RCALL	_SPI1_Init_Advanced
0x0962	0xB1008F  	SUB	#8, W15
;Master.c,231 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x0964	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Master.c,232 :: 		IPC2bits.SPI1IP = 0x03;                                                    //Prioridad de la interrupcion SPI1
0x0966	0x203000  	MOV	#768, W0
0x0968	0x780080  	MOV	W0, W1
0x096A	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x096C	0x688090  	XOR	W1, [W0], W1
0x096E	0x207000  	MOV	#1792, W0
0x0970	0x608080  	AND	W1, W0, W1
0x0972	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0974	0x688090  	XOR	W1, [W0], W1
0x0976	0x884221  	MOV	W1, IPC2bits
;Master.c,235 :: 		RPINR22bits.SDI2R = 0x21;                                                  //Configura el pin RB1/RPI33 como SDI2 *
0x0978	0xB3C210  	MOV.B	#33, W0
0x097A	0x784080  	MOV.B	W0, W1
0x097C	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x097E	0x68C090  	XOR.B	W1, [W0], W1
0x0980	0xB3C7F0  	MOV.B	#127, W0
0x0982	0x60C080  	AND.B	W1, W0, W1
0x0984	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0986	0x68C090  	XOR.B	W1, [W0], W1
0x0988	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x098A	0x784801  	MOV.B	W1, [W0]
;Master.c,236 :: 		RPOR2bits.RP38R = 0x08;                                                    //Configura el SDO2 en el pin RB6/RP38 *
0x098C	0xB3C080  	MOV.B	#8, W0
0x098E	0x784080  	MOV.B	W0, W1
0x0990	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0992	0x68C090  	XOR.B	W1, [W0], W1
0x0994	0xB3C3F0  	MOV.B	#63, W0
0x0996	0x60C080  	AND.B	W1, W0, W1
0x0998	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x099A	0x68C090  	XOR.B	W1, [W0], W1
0x099C	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x099E	0x784801  	MOV.B	W1, [W0]
;Master.c,237 :: 		RPOR1bits.RP37R = 0x09;                                                    //Configura el SCK2 en el pin RB5/RP37 *
0x09A0	0x209000  	MOV	#2304, W0
0x09A2	0x780080  	MOV	W0, W1
0x09A4	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x09A6	0x688090  	XOR	W1, [W0], W1
0x09A8	0x23F000  	MOV	#16128, W0
0x09AA	0x608080  	AND	W1, W0, W1
0x09AC	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x09AE	0x688090  	XOR	W1, [W0], W1
0x09B0	0x883411  	MOV	W1, RPOR1bits
;Master.c,238 :: 		SPI2STAT.SPIEN = 1;                                                        //Habilita el SPI2 *
0x09B2	0xA8E261  	BSET	SPI2STAT, #15
;Master.c,239 :: 		SPI2_Init();                                                               //Inicializa el modulo SPI2
0x09B4	0x07FE6A  	RCALL	_SPI2_Init
;Master.c,240 :: 		CS_DS3234 = 1;                                                             //Pone en alto el CS del RTC
0x09B6	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;Master.c,243 :: 		RPINR0 = 0x2D00;                                                           //Asigna INT1 al RB13/RPI45 (SQW)
0x09B8	0x22D000  	MOV	#11520, W0
0x09BA	0xB7A6A0  	MOV	WREG, RPINR0
;Master.c,245 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x09BC	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Master.c,246 :: 		IPC5bits.INT1IP = 0x01;                                                    //Prioridad en la interrupocion externa 1
0x09BE	0xB3C010  	MOV.B	#1, W0
0x09C0	0x784080  	MOV.B	W0, W1
0x09C2	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x09C4	0x68C090  	XOR.B	W1, [W0], W1
0x09C6	0x60C0E7  	AND.B	W1, #7, W1
0x09C8	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x09CA	0x68C090  	XOR.B	W1, [W0], W1
0x09CC	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x09CE	0x784801  	MOV.B	W1, [W0]
;Master.c,249 :: 		SPI1IE_bit = 1;                                                            //SPI1
0x09D0	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Master.c,250 :: 		INT1IE_bit = 0;                                                            //INT1
0x09D2	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Master.c,252 :: 		Delay_ms(200);                                                             //Espera hasta que se estabilicen los cambios
0x09D4	0x200198  	MOV	#25, W8
0x09D6	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal45:
0x09D8	0xED200E  	DEC	W7
0x09DA	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal45
0x09DC	0xED2010  	DEC	W8
0x09DE	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal45
0x09E0	0x000000  	NOP
;Master.c,254 :: 		}
L_end_ConfiguracionPrincipal:
0x09E2	0x7806CF  	POP	W13
0x09E4	0x78064F  	POP	W12
0x09E6	0x7805CF  	POP	W11
0x09E8	0x78054F  	POP	W10
0x09EA	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x0380	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x0382	0x202900  	MOV	#lo_addr(_UART1_Write), W0
0x0384	0x8891A0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x0386	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0388	0x8891D0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x038A	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x038C	0x8891E0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x038E	0x202BC0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0390	0x8891F0  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x0392	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x0394	0x280000  	MOV	#32768, W0
0x0396	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x0398	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x039A	0x07FF4B  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x039C	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x039E	0x203E80  	MOV	#1000, W0
0x03A0	0x200001  	MOV	#0, W1
0x03A2	0x07006F  	RCALL	__Multiply_32x32
0x03A4	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x03A6	0x07FF38  	RCALL	_Get_Fosc_Per_Cyc
0x03A8	0xDE0041  	LSR	W0, #1, W0
0x03AA	0x400064  	ADD	W0, #4, W0
0x03AC	0x780080  	MOV	W0, W1
0x03AE	0x470060  	ADD	W14, #0, W0
0x03B0	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x03B2	0xE90081  	DEC	W1, W1
0x03B4	0x350003  	BRA LT	L__UART1_Init84
0x03B6	0xD01810  	SL	[W0], [W0++]
0x03B8	0xD29010  	RLC	[W0], [W0--]
0x03BA	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x03BC	0xBE9F82  	PUSH.D	W2
0x03BE	0xBE9F8A  	PUSH.D	W10
0x03C0	0xBE0002  	MOV.D	W2, W0
0x03C2	0x90010E  	MOV	[W14+0], W2
0x03C4	0x90019E  	MOV	[W14+2], W3
0x03C6	0xEB0200  	CLR	W4
0x03C8	0x07FF86  	RCALL	__Modulus_32x32
0x03CA	0xBE054F  	POP.D	W10
0x03CC	0xBE014F  	POP.D	W2
0x03CE	0x980720  	MOV	W0, [W14+4]
0x03D0	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x03D2	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x03D4	0xBE0002  	MOV.D	W2, W0
0x03D6	0x90010E  	MOV	[W14+0], W2
0x03D8	0x90019E  	MOV	[W14+2], W3
0x03DA	0xEB0200  	CLR	W4
0x03DC	0x07FFA8  	RCALL	__Divide_32x32
0x03DE	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x03E0	0x780180  	MOV	W0, W3
0x03E2	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x03E4	0x470060  	ADD	W14, #0, W0
0x03E6	0xD10150  	LSR	[++W0], W2
0x03E8	0xD380C0  	RRC	[--W0], W1
0x03EA	0x470064  	ADD	W14, #4, W0
0x03EC	0xE10830  	CP	W1, [W0++]
0x03EE	0xE19020  	CPB	W2, [W0--]
0x03F0	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x03F2	0x418061  	ADD	W3, #1, W0
0x03F4	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x03F6	0x780280  	MOV	W0, W5
0x03F8	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x03FA	0x780105  	MOV	W5, W2
0x03FC	0x780186  	MOV	W6, W3
0x03FE	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x0400	0x780103  	MOV	W3, W2
0x0402	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x0404	0x718002  	IOR	W3, W2, W0
0x0406	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x0408	0x07FF14  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x040A	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x040C	0x203E80  	MOV	#1000, W0
0x040E	0x200001  	MOV	#0, W1
0x0410	0x070038  	RCALL	__Multiply_32x32
0x0412	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x0414	0x07FF01  	RCALL	_Get_Fosc_Per_Cyc
0x0416	0xDE0041  	LSR	W0, #1, W0
0x0418	0xECA000  	INC2	W0
0x041A	0x780080  	MOV	W0, W1
0x041C	0x470060  	ADD	W14, #0, W0
0x041E	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x0420	0xE90081  	DEC	W1, W1
0x0422	0x350003  	BRA LT	L__UART1_Init88
0x0424	0xD01810  	SL	[W0], [W0++]
0x0426	0xD29010  	RLC	[W0], [W0--]
0x0428	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x042A	0xBE9F82  	PUSH.D	W2
0x042C	0xBE0002  	MOV.D	W2, W0
0x042E	0x90010E  	MOV	[W14+0], W2
0x0430	0x90019E  	MOV	[W14+2], W3
0x0432	0xEB0200  	CLR	W4
0x0434	0x07FF50  	RCALL	__Modulus_32x32
0x0436	0xBE014F  	POP.D	W2
0x0438	0x980720  	MOV	W0, [W14+4]
0x043A	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x043C	0xBE0002  	MOV.D	W2, W0
0x043E	0x90010E  	MOV	[W14+0], W2
0x0440	0x90019E  	MOV	[W14+2], W3
0x0442	0xEB0200  	CLR	W4
0x0444	0x07FF74  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0446	0x780180  	MOV	W0, W3
0x0448	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x044A	0x470060  	ADD	W14, #0, W0
0x044C	0xD10150  	LSR	[++W0], W2
0x044E	0xD380C0  	RRC	[--W0], W1
0x0450	0x470064  	ADD	W14, #4, W0
0x0452	0xE10830  	CP	W1, [W0++]
0x0454	0xE19020  	CPB	W2, [W0--]
0x0456	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x0458	0x418061  	ADD	W3, #1, W0
0x045A	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x045C	0x780280  	MOV	W0, W5
0x045E	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0460	0x780105  	MOV	W5, W2
0x0462	0x780186  	MOV	W6, W3
0x0464	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0466	0x780103  	MOV	W3, W2
0x0468	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x046A	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x046C	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x046E	0x510061  	SUB	W2, #1, W0
0x0470	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0472	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x0474	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x0476	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x0478	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x047A	0x07FED0  	RCALL	_Delay_100ms
0x047C	0x07FECF  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x047E	0xFA8000  	ULNK
0x0480	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0232	0x238800  	MOV	#14464, W0
0x0234	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0236	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x0218	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x021A	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x021C	0x2000D8  	MOV	#13, W8
0x021E	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x0220	0xED200E  	DEC	W7
0x0222	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0224	0xED2010  	DEC	W8
0x0226	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0228	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x0482	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0484	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0486	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0488	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x048A	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x048C	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x048E	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x0490	0xFA8000  	ULNK
0x0492	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x02D6	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x02D8	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x02DA	0x00000004032A  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x02DE	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x02E0	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x02E2	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x02E4	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x02E6	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x02E8	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x02EA	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x02EC	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x02EE	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x02F0	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x02F2	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x02F4	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x02F6	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x02F8	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x02FA	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x02FC	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x02FE	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x0300	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0302	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x0304	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0306	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x0308	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x030A	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x030C	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x030E	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0310	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0312	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x0314	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x0316	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x0318	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x031A	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x031C	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x031E	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0320	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0322	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x0324	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x0326	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0328	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x032A	0xFA8000  	ULNK
0x032C	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x032E	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0330	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0332	0x00000004037C  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x0336	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x0338	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x033A	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x033C	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x033E	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0340	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0342	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x0344	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x0346	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x0348	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x034A	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x034C	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x034E	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0350	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0352	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x0354	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x0356	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x0358	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x035A	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x035C	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x035E	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0360	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0362	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x0364	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x0366	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x0368	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x036A	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x036C	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x036E	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0370	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0372	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x0374	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x0376	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x0378	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x037A	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x037C	0xFA8000  	ULNK
0x037E	0x060000  	RETURN
; end of __Divide_32x32
_UART2_Init_Advanced:
0x0494	0xFA000C  	LNK	#12
;__Lib_UART_12_p24_p33.c,439 :: 		
; high_low_speed start address is: 2 (W1)
0x0496	0x97B8CE  	MOV	[W14-8], W1
;__Lib_UART_12_p24_p33.c,442 :: 		
0x0498	0x202C80  	MOV	#lo_addr(_UART2_Write), W0
0x049A	0x8891A0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,443 :: 		
0x049C	0x2FFFF0  	MOV	#lo_addr(_UART2_Read), W0
0x049E	0x8891D0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,444 :: 		
0x04A0	0x2FFFF0  	MOV	#lo_addr(_UART2_Data_Ready), W0
0x04A2	0x8891E0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,445 :: 		
0x04A4	0x2029E0  	MOV	#lo_addr(_UART2_Tx_Idle), W0
0x04A6	0x8891F0  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,447 :: 		
0x04A8	0xEF2230  	CLR	U2MODE
;__Lib_UART_12_p24_p33.c,448 :: 		
0x04AA	0x280000  	MOV	#32768, W0
0x04AC	0xB7A232  	MOV	WREG, U2STA
;__Lib_UART_12_p24_p33.c,450 :: 		
0x04AE	0xE10860  	CP	W1, #0
0x04B0	0x3A0030  	BRA NZ	L_UART2_Init_Advanced41
L__UART2_Init_Advanced128:
; high_low_speed end address is: 2 (W1)
;__Lib_UART_12_p24_p33.c,451 :: 		
0x04B2	0xA96230  	BCLR	U2MODE, #3
;__Lib_UART_12_p24_p33.c,452 :: 		
0x04B4	0x07FEBE  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,454 :: 		
0x04B6	0x203E82  	MOV	#1000, W2
0x04B8	0x200003  	MOV	#0, W3
0x04BA	0x07FFE3  	RCALL	__Multiply_32x32
0x04BC	0x980700  	MOV	W0, [W14+0]
0x04BE	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,458 :: 		
0x04C0	0x07FEAB  	RCALL	_Get_Fosc_Per_Cyc
0x04C2	0xDE0041  	LSR	W0, #1, W0
0x04C4	0x400064  	ADD	W0, #4, W0
0x04C6	0x780080  	MOV	W0, W1
0x04C8	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced129:
0x04CA	0xE90081  	DEC	W1, W1
0x04CC	0x350003  	BRA LT	L__UART2_Init_Advanced130
0x04CE	0xD00102  	SL	W2, W2
0x04D0	0xD28183  	RLC	W3, W3
0x04D2	0x37FFFB  	BRA	L__UART2_Init_Advanced129
L__UART2_Init_Advanced130:
0x04D4	0x980722  	MOV	W2, [W14+4]
0x04D6	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,460 :: 		
0x04D8	0xBE9F8C  	PUSH.D	W12
0x04DA	0x90000E  	MOV	[W14+0], W0
0x04DC	0x90009E  	MOV	[W14+2], W1
0x04DE	0xEB0200  	CLR	W4
0x04E0	0x07FEFA  	RCALL	__Modulus_32x32
0x04E2	0x980740  	MOV	W0, [W14+8]
0x04E4	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,461 :: 		
0x04E6	0x90012E  	MOV	[W14+4], W2
0x04E8	0x9001BE  	MOV	[W14+6], W3
0x04EA	0x90000E  	MOV	[W14+0], W0
0x04EC	0x90009E  	MOV	[W14+2], W1
0x04EE	0xEB0200  	CLR	W4
0x04F0	0x07FF1E  	RCALL	__Divide_32x32
0x04F2	0xBE064F  	POP.D	W12
0x04F4	0x980700  	MOV	W0, [W14+0]
0x04F6	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,463 :: 		
0x04F8	0x470064  	ADD	W14, #4, W0
0x04FA	0xD10150  	LSR	[++W0], W2
0x04FC	0xD380C0  	RRC	[--W0], W1
0x04FE	0x470068  	ADD	W14, #8, W0
0x0500	0xE10830  	CP	W1, [W0++]
0x0502	0xE19020  	CPB	W2, [W0--]
0x0504	0x310005  	BRA GEU	L_UART2_Init_Advanced42
L__UART2_Init_Advanced131:
;__Lib_UART_12_p24_p33.c,464 :: 		
0x0506	0x90008E  	MOV	[W14+0], W1
0x0508	0x90011E  	MOV	[W14+2], W2
0x050A	0x470060  	ADD	W14, #0, W0
0x050C	0x409861  	ADD	W1, #1, [W0++]
0x050E	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced42:
;__Lib_UART_12_p24_p33.c,466 :: 		
0x0510	0x370096  	BRA	L_UART2_Init_Advanced43
L_UART2_Init_Advanced41:
;__Lib_UART_12_p24_p33.c,468 :: 		
; high_low_speed start address is: 2 (W1)
0x0512	0xE10861  	CP	W1, #1
0x0514	0x3A0030  	BRA NZ	L_UART2_Init_Advanced44
L__UART2_Init_Advanced132:
; high_low_speed end address is: 2 (W1)
;__Lib_UART_12_p24_p33.c,469 :: 		
0x0516	0x07FE8D  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,471 :: 		
0x0518	0x203E82  	MOV	#1000, W2
0x051A	0x200003  	MOV	#0, W3
0x051C	0x07FFB2  	RCALL	__Multiply_32x32
0x051E	0x980700  	MOV	W0, [W14+0]
0x0520	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,475 :: 		
0x0522	0x07FE7A  	RCALL	_Get_Fosc_Per_Cyc
0x0524	0xDE0041  	LSR	W0, #1, W0
0x0526	0xECA000  	INC2	W0
0x0528	0x780080  	MOV	W0, W1
0x052A	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced133:
0x052C	0xE90081  	DEC	W1, W1
0x052E	0x350003  	BRA LT	L__UART2_Init_Advanced134
0x0530	0xD00102  	SL	W2, W2
0x0532	0xD28183  	RLC	W3, W3
0x0534	0x37FFFB  	BRA	L__UART2_Init_Advanced133
L__UART2_Init_Advanced134:
0x0536	0x980722  	MOV	W2, [W14+4]
0x0538	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,477 :: 		
0x053A	0xBE9F8C  	PUSH.D	W12
0x053C	0x90000E  	MOV	[W14+0], W0
0x053E	0x90009E  	MOV	[W14+2], W1
0x0540	0xEB0200  	CLR	W4
0x0542	0x07FEC9  	RCALL	__Modulus_32x32
0x0544	0x980740  	MOV	W0, [W14+8]
0x0546	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,478 :: 		
0x0548	0x90012E  	MOV	[W14+4], W2
0x054A	0x9001BE  	MOV	[W14+6], W3
0x054C	0x90000E  	MOV	[W14+0], W0
0x054E	0x90009E  	MOV	[W14+2], W1
0x0550	0xEB0200  	CLR	W4
0x0552	0x07FEED  	RCALL	__Divide_32x32
0x0554	0xBE064F  	POP.D	W12
0x0556	0x980700  	MOV	W0, [W14+0]
0x0558	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,480 :: 		
0x055A	0x470064  	ADD	W14, #4, W0
0x055C	0xD10150  	LSR	[++W0], W2
0x055E	0xD380C0  	RRC	[--W0], W1
0x0560	0x470068  	ADD	W14, #8, W0
0x0562	0xE10830  	CP	W1, [W0++]
0x0564	0xE19020  	CPB	W2, [W0--]
0x0566	0x310005  	BRA GEU	L_UART2_Init_Advanced45
L__UART2_Init_Advanced135:
;__Lib_UART_12_p24_p33.c,481 :: 		
0x0568	0x90008E  	MOV	[W14+0], W1
0x056A	0x90011E  	MOV	[W14+2], W2
0x056C	0x470060  	ADD	W14, #0, W0
0x056E	0x409861  	ADD	W1, #1, [W0++]
0x0570	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced45:
;__Lib_UART_12_p24_p33.c,483 :: 		
0x0572	0xA86230  	BSET	U2MODE, #3
;__Lib_UART_12_p24_p33.c,484 :: 		
0x0574	0x370064  	BRA	L_UART2_Init_Advanced46
L_UART2_Init_Advanced44:
;__Lib_UART_12_p24_p33.c,487 :: 		
0x0576	0xA96230  	BCLR	U2MODE, #3
;__Lib_UART_12_p24_p33.c,488 :: 		
0x0578	0x07FE5C  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,490 :: 		
0x057A	0x203E82  	MOV	#1000, W2
0x057C	0x200003  	MOV	#0, W3
0x057E	0x07FF81  	RCALL	__Multiply_32x32
0x0580	0x980700  	MOV	W0, [W14+0]
0x0582	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,494 :: 		
0x0584	0x07FE49  	RCALL	_Get_Fosc_Per_Cyc
0x0586	0xDE0041  	LSR	W0, #1, W0
0x0588	0x400064  	ADD	W0, #4, W0
0x058A	0x780080  	MOV	W0, W1
0x058C	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced136:
0x058E	0xE90081  	DEC	W1, W1
0x0590	0x350003  	BRA LT	L__UART2_Init_Advanced137
0x0592	0xD00102  	SL	W2, W2
0x0594	0xD28183  	RLC	W3, W3
0x0596	0x37FFFB  	BRA	L__UART2_Init_Advanced136
L__UART2_Init_Advanced137:
0x0598	0x980722  	MOV	W2, [W14+4]
0x059A	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,496 :: 		
0x059C	0xBE9F8C  	PUSH.D	W12
0x059E	0xBE9F8A  	PUSH.D	W10
0x05A0	0x90000E  	MOV	[W14+0], W0
0x05A2	0x90009E  	MOV	[W14+2], W1
0x05A4	0xEB0200  	CLR	W4
0x05A6	0x07FE97  	RCALL	__Modulus_32x32
0x05A8	0x980740  	MOV	W0, [W14+8]
0x05AA	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,497 :: 		
0x05AC	0x90012E  	MOV	[W14+4], W2
0x05AE	0x9001BE  	MOV	[W14+6], W3
0x05B0	0x90000E  	MOV	[W14+0], W0
0x05B2	0x90009E  	MOV	[W14+2], W1
0x05B4	0xEB0200  	CLR	W4
0x05B6	0x07FEBB  	RCALL	__Divide_32x32
0x05B8	0xBE054F  	POP.D	W10
0x05BA	0xBE064F  	POP.D	W12
0x05BC	0x980700  	MOV	W0, [W14+0]
0x05BE	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,499 :: 		
0x05C0	0x470064  	ADD	W14, #4, W0
0x05C2	0xD10150  	LSR	[++W0], W2
0x05C4	0xD380C0  	RRC	[--W0], W1
0x05C6	0x470068  	ADD	W14, #8, W0
0x05C8	0xE10830  	CP	W1, [W0++]
0x05CA	0xE19020  	CPB	W2, [W0--]
0x05CC	0x310005  	BRA GEU	L_UART2_Init_Advanced47
L__UART2_Init_Advanced138:
;__Lib_UART_12_p24_p33.c,500 :: 		
0x05CE	0x90008E  	MOV	[W14+0], W1
0x05D0	0x90011E  	MOV	[W14+2], W2
0x05D2	0x470060  	ADD	W14, #0, W0
0x05D4	0x409861  	ADD	W1, #1, [W0++]
0x05D6	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced47:
;__Lib_UART_12_p24_p33.c,503 :: 		
0x05D8	0x4700E0  	ADD	W14, #0, W1
0x05DA	0x780031  	MOV	[W1++], W0
0x05DC	0x700021  	IOR	W0, [W1--], W0
0x05DE	0x3A002F  	BRA NZ	L_UART2_Init_Advanced48
L__UART2_Init_Advanced139:
;__Lib_UART_12_p24_p33.c,505 :: 		
0x05E0	0x07FE28  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,507 :: 		
0x05E2	0x203E82  	MOV	#1000, W2
0x05E4	0x200003  	MOV	#0, W3
0x05E6	0x07FF4D  	RCALL	__Multiply_32x32
0x05E8	0x980700  	MOV	W0, [W14+0]
0x05EA	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,509 :: 		
0x05EC	0x07FE15  	RCALL	_Get_Fosc_Per_Cyc
0x05EE	0xDE0041  	LSR	W0, #1, W0
0x05F0	0xECA000  	INC2	W0
0x05F2	0x780080  	MOV	W0, W1
0x05F4	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced140:
0x05F6	0xE90081  	DEC	W1, W1
0x05F8	0x350003  	BRA LT	L__UART2_Init_Advanced141
0x05FA	0xD00102  	SL	W2, W2
0x05FC	0xD28183  	RLC	W3, W3
0x05FE	0x37FFFB  	BRA	L__UART2_Init_Advanced140
L__UART2_Init_Advanced141:
0x0600	0x980722  	MOV	W2, [W14+4]
0x0602	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,511 :: 		
0x0604	0xBE9F8C  	PUSH.D	W12
0x0606	0x90000E  	MOV	[W14+0], W0
0x0608	0x90009E  	MOV	[W14+2], W1
0x060A	0xEB0200  	CLR	W4
0x060C	0x07FE64  	RCALL	__Modulus_32x32
0x060E	0x980740  	MOV	W0, [W14+8]
0x0610	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,512 :: 		
0x0612	0x90012E  	MOV	[W14+4], W2
0x0614	0x9001BE  	MOV	[W14+6], W3
0x0616	0x90000E  	MOV	[W14+0], W0
0x0618	0x90009E  	MOV	[W14+2], W1
0x061A	0xEB0200  	CLR	W4
0x061C	0x07FE88  	RCALL	__Divide_32x32
0x061E	0xBE064F  	POP.D	W12
0x0620	0x980700  	MOV	W0, [W14+0]
0x0622	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,514 :: 		
0x0624	0x470064  	ADD	W14, #4, W0
0x0626	0xD10150  	LSR	[++W0], W2
0x0628	0xD380C0  	RRC	[--W0], W1
0x062A	0x470068  	ADD	W14, #8, W0
0x062C	0xE10830  	CP	W1, [W0++]
0x062E	0xE19020  	CPB	W2, [W0--]
0x0630	0x310005  	BRA GEU	L_UART2_Init_Advanced49
L__UART2_Init_Advanced142:
;__Lib_UART_12_p24_p33.c,515 :: 		
0x0632	0x90008E  	MOV	[W14+0], W1
0x0634	0x90011E  	MOV	[W14+2], W2
0x0636	0x470060  	ADD	W14, #0, W0
0x0638	0x409861  	ADD	W1, #1, [W0++]
0x063A	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced49:
;__Lib_UART_12_p24_p33.c,517 :: 		
0x063C	0xA86230  	BSET	U2MODE, #3
;__Lib_UART_12_p24_p33.c,518 :: 		
L_UART2_Init_Advanced48:
;__Lib_UART_12_p24_p33.c,519 :: 		
L_UART2_Init_Advanced46:
L_UART2_Init_Advanced43:
;__Lib_UART_12_p24_p33.c,522 :: 		
0x063E	0x90000E  	MOV	[W14+0], W0
0x0640	0x90009E  	MOV	[W14+2], W1
0x0642	0x500061  	SUB	W0, #1, W0
0x0644	0x5880E0  	SUBB	W1, #0, W1
0x0646	0x8811C0  	MOV	W0, U2BRG
;__Lib_UART_12_p24_p33.c,524 :: 		
0x0648	0xA92232  	BCLR	U2STA, #1
;__Lib_UART_12_p24_p33.c,526 :: 		
0x064A	0x76008D  	IOR	W12, W13, W1
0x064C	0x202300  	MOV	#lo_addr(U2MODE), W0
0x064E	0x708810  	IOR	W1, [W0], [W0]
;__Lib_UART_12_p24_p33.c,529 :: 		
0x0650	0xA8E231  	BSET	U2MODE, #15
;__Lib_UART_12_p24_p33.c,530 :: 		
0x0652	0xA84233  	BSET	U2STA, #10
;__Lib_UART_12_p24_p33.c,532 :: 		
0x0654	0x07FDE3  	RCALL	_Delay_100ms
0x0656	0x07FDE2  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,535 :: 		
L_end_UART2_Init_Advanced:
0x0658	0xFA8000  	ULNK
0x065A	0x060000  	RETURN
; end of _UART2_Init_Advanced
_SPI1_Init_Advanced:
0x065C	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x065E	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x0660	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0662	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0664	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x0666	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x0668	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x066A	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x066C	0x8891C0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x066E	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x0670	0x8891B0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0672	0x75000B  	IOR	W10, W11, W0
0x0674	0x70000C  	IOR	W0, W12, W0
0x0676	0x70000D  	IOR	W0, W13, W0
0x0678	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x067A	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x067C	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x067E	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0680	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x0682	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x0684	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x0686	0xFA8000  	ULNK
0x0688	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x068A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x068C	0x202000  	MOV	#lo_addr(_SPI2_Read), W0
0x068E	0x8891C0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x0690	0x2022A0  	MOV	#lo_addr(_SPI2_Write), W0
0x0692	0x8891B0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x0694	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x0696	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x0698	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x069A	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x069C	0x2001C1  	MOV	#28, W1
0x069E	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x06A0	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x06A2	0x2FFFC1  	MOV	#65532, W1
0x06A4	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x06A6	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x06A8	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x06AA	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x06AC	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x06AE	0xFA8000  	ULNK
0x06B0	0x060000  	RETURN
; end of _SPI2_Init
_DS3234_init:
;tiempo_rtc.c,55 :: 		void DS3234_init(){
;tiempo_rtc.c,57 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0B16	0x781F8A  	PUSH	W10
0x0B18	0x781F8B  	PUSH	W11
0x0B1A	0x781F8C  	PUSH	W12
0x0B1C	0x781F8D  	PUSH	W13
0x0B1E	0xEF201A  	CLR	W13
0x0B20	0x2001CC  	MOV	#28, W12
0x0B22	0xEF2016  	CLR	W11
0x0B24	0x20020A  	MOV	#32, W10
0x0B26	0xEF2000  	CLR	W0
0x0B28	0x781F80  	PUSH	W0
0x0B2A	0xEF2000  	CLR	W0
0x0B2C	0x781F80  	PUSH	W0
0x0B2E	0xEF2000  	CLR	W0
0x0B30	0x781F80  	PUSH	W0
0x0B32	0xEF2000  	CLR	W0
0x0B34	0x781F80  	PUSH	W0
0x0B36	0x07FB8C  	RCALL	_SPI2_Init_Advanced
0x0B38	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,58 :: 		DS3234_write_byte(Control,0x20);
0x0B3A	0xB3C20B  	MOV.B	#32, W11
0x0B3C	0xB3C8EA  	MOV.B	#142, W10
0x0B3E	0x07FB9F  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,59 :: 		DS3234_write_byte(ControlStatus,0x08);
0x0B40	0xB3C08B  	MOV.B	#8, W11
0x0B42	0xB3C8FA  	MOV.B	#143, W10
0x0B44	0x07FB9C  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,60 :: 		SPI2_Init();
0x0B46	0x07FDA1  	RCALL	_SPI2_Init
;tiempo_rtc.c,62 :: 		}
L_end_DS3234_init:
0x0B48	0x7806CF  	POP	W13
0x0B4A	0x78064F  	POP	W12
0x0B4C	0x7805CF  	POP	W11
0x0B4E	0x78054F  	POP	W10
0x0B50	0x060000  	RETURN
; end of _DS3234_init
_SPI2_Init_Advanced:
0x0250	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,187 :: 		
; slave_select start address is: 2 (W1)
0x0252	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x0254	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0256	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0258	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,190 :: 		
0x025A	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,191 :: 		
0x025C	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,193 :: 		
0x025E	0x202000  	MOV	#lo_addr(_SPI2_Read), W0
0x0260	0x8891C0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,194 :: 		
0x0262	0x2022A0  	MOV	#lo_addr(_SPI2_Write), W0
0x0264	0x8891B0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,196 :: 		
0x0266	0x75000B  	IOR	W10, W11, W0
0x0268	0x70000C  	IOR	W0, W12, W0
0x026A	0x70000D  	IOR	W0, W13, W0
0x026C	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x026E	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,197 :: 		
0x0270	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x0272	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0274	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,199 :: 		
0x0276	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,200 :: 		
0x0278	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,202 :: 		
L_end_SPI2_Init_Advanced:
0x027A	0xFA8000  	ULNK
0x027C	0x060000  	RETURN
; end of _SPI2_Init_Advanced
_DS3234_write_byte:
;tiempo_rtc.c,65 :: 		void DS3234_write_byte(unsigned char address, unsigned char value){
;tiempo_rtc.c,67 :: 		CS_DS3234 = 0;
0x027E	0x781F8A  	PUSH	W10
0x0280	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,68 :: 		SPI2_Write(address);
0x0282	0xFB850A  	ZE	W10, W10
0x0284	0x07FFD2  	RCALL	_SPI2_Write
;tiempo_rtc.c,69 :: 		SPI2_Write(value);
0x0286	0xFB850B  	ZE	W11, W10
0x0288	0x07FFD0  	RCALL	_SPI2_Write
;tiempo_rtc.c,70 :: 		CS_DS3234 = 1;
0x028A	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,72 :: 		}
L_end_DS3234_write_byte:
0x028C	0x78054F  	POP	W10
0x028E	0x060000  	RETURN
; end of _DS3234_write_byte
_SPI2_Write:
0x022A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x022C	0x07FFE9  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x022E	0xFA8000  	ULNK
0x0230	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x0200	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x0202	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x0204	0xAE2260  	BTSS	SPI2STAT, #1
0x0206	0x370001  	BRA	L_SPI2_Read5
0x0208	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x020A	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x020C	0xAF0260  	BTSC	SPI2STAT, #0
0x020E	0x370001  	BRA	L_SPI2_Read7
0x0210	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x0212	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x0214	0xFA8000  	ULNK
0x0216	0x060000  	RETURN
; end of _SPI2_Read
_urx_2:
0x0BCE	0xF80034  	PUSH	DSWPAG
0x0BD0	0xF80032  	PUSH	DSRPAG
0x0BD2	0xF80036  	PUSH	RCOUNT
0x0BD4	0x781F80  	PUSH	W0
0x0BD6	0x200020  	MOV	#2, W0
0x0BD8	0x09000C  	REPEAT	#12
0x0BDA	0x781FB0  	PUSH	[W0++]
;Master.c,563 :: 		void urx_2() org  IVT_ADDR_U2RXINTERRUPT {
;Master.c,566 :: 		U2RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART2
0x0BDC	0x781F8A  	PUSH	W10
0x0BDE	0x781F8B  	PUSH	W11
0x0BE0	0x781F8C  	PUSH	W12
0x0BE2	0xA9C803  	BCLR	U2RXIF_bit, BitPos(U2RXIF_bit+0)
;Master.c,567 :: 		byteRS485 = U2RXREG;                                                       //Lee el byte de la trama enviada por el nodo
0x0BE4	0x212691  	MOV	#lo_addr(_byteRS485), W1
0x0BE6	0xBFC236  	MOV.B	U2RXREG, WREG
0x0BE8	0x784880  	MOV.B	W0, [W1]
;Master.c,568 :: 		U2STA.OERR = 0;                                                            //Limpia este bit para limpiar el FIFO UART2
0x0BEA	0xA92232  	BCLR	U2STA, #1
;Master.c,571 :: 		if (banRSI==2){
0x0BEC	0x212490  	MOV	#lo_addr(_banRSI), W0
0x0BEE	0x784010  	MOV.B	[W0], W0
0x0BF0	0xE10462  	CP.B	W0, #2
0x0BF2	0x3A0014  	BRA NZ	L_urx_2118
L__urx_2329:
;Master.c,572 :: 		if (i_rs485<numDatosRS485){
0x0BF4	0x2126C0  	MOV	#lo_addr(_numDatosRS485), W0
0x0BF6	0xFB8090  	ZE	[W0], W1
0x0BF8	0x2126A0  	MOV	#lo_addr(_i_rs485), W0
0x0BFA	0xE10810  	CP	W1, [W0]
0x0BFC	0x360009  	BRA LEU	L_urx_2119
L__urx_2330:
;Master.c,573 :: 		inputPyloadRS485[i_rs485] = byteRS485;
0x0BFE	0x210001  	MOV	#lo_addr(_inputPyloadRS485), W1
0x0C00	0x2126A0  	MOV	#lo_addr(_i_rs485), W0
0x0C02	0x408090  	ADD	W1, [W0], W1
0x0C04	0x212690  	MOV	#lo_addr(_byteRS485), W0
0x0C06	0x784890  	MOV.B	[W0], [W1]
;Master.c,574 :: 		i_rs485++;
0x0C08	0x200011  	MOV	#1, W1
0x0C0A	0x2126A0  	MOV	#lo_addr(_i_rs485), W0
0x0C0C	0x408810  	ADD	W1, [W0], [W0]
;Master.c,575 :: 		} else {
0x0C0E	0x370006  	BRA	L_urx_2120
L_urx_2119:
;Master.c,576 :: 		banRSI = 0;                                                          //Limpia la bandera de inicio de trama
0x0C10	0x212491  	MOV	#lo_addr(_banRSI), W1
0x0C12	0xEF2000  	CLR	W0
0x0C14	0x784880  	MOV.B	W0, [W1]
;Master.c,577 :: 		banRSC = 1;                                                          //Activa la bandera de trama completa
0x0C16	0x2124A1  	MOV	#lo_addr(_banRSC), W1
0x0C18	0xB3C010  	MOV.B	#1, W0
0x0C1A	0x784880  	MOV.B	W0, [W1]
;Master.c,578 :: 		}
L_urx_2120:
;Master.c,579 :: 		}
L_urx_2118:
;Master.c,582 :: 		if ((banRSI==0)&&(banRSC==0)){
0x0C1C	0x212490  	MOV	#lo_addr(_banRSI), W0
0x0C1E	0x784010  	MOV.B	[W0], W0
0x0C20	0xE10460  	CP.B	W0, #0
0x0C22	0x3A000E  	BRA NZ	L__urx_2227
L__urx_2331:
0x0C24	0x2124A0  	MOV	#lo_addr(_banRSC), W0
0x0C26	0x784010  	MOV.B	[W0], W0
0x0C28	0xE10460  	CP.B	W0, #0
0x0C2A	0x3A000A  	BRA NZ	L__urx_2226
L__urx_2332:
L__urx_2225:
;Master.c,583 :: 		if (byteRS485==0x3A){                                                   //Verifica si el primer byte recibido sea la cabecera de trama
0x0C2C	0x212690  	MOV	#lo_addr(_byteRS485), W0
0x0C2E	0x784090  	MOV.B	[W0], W1
0x0C30	0xB3C3A0  	MOV.B	#58, W0
0x0C32	0xE10C00  	CP.B	W1, W0
0x0C34	0x3A0005  	BRA NZ	L_urx_2124
L__urx_2333:
;Master.c,584 :: 		banRSI = 1;
0x0C36	0x212491  	MOV	#lo_addr(_banRSI), W1
0x0C38	0xB3C010  	MOV.B	#1, W0
0x0C3A	0x784880  	MOV.B	W0, [W1]
;Master.c,585 :: 		i_rs485 = 0;
0x0C3C	0xEF2000  	CLR	W0
0x0C3E	0x889350  	MOV	W0, _i_rs485
;Master.c,586 :: 		}
L_urx_2124:
;Master.c,582 :: 		if ((banRSI==0)&&(banRSC==0)){
L__urx_2227:
L__urx_2226:
;Master.c,588 :: 		if ((banRSI==1)&&(i_rs485<5)){
0x0C40	0x212490  	MOV	#lo_addr(_banRSI), W0
0x0C42	0x784010  	MOV.B	[W0], W0
0x0C44	0xE10461  	CP.B	W0, #1
0x0C46	0x3A000B  	BRA NZ	L__urx_2229
L__urx_2334:
0x0C48	0x809350  	MOV	_i_rs485, W0
0x0C4A	0xE10065  	CP	W0, #5
0x0C4C	0x310008  	BRA GEU	L__urx_2228
L__urx_2335:
L__urx_2224:
;Master.c,589 :: 		tramaCabeceraRS485[i_rs485] = byteRS485;                                 //Recupera los datos de cabecera de la trama UART: [0x3A, Direccion, Funcion, NumeroDatos]
0x0C4E	0x2121C1  	MOV	#lo_addr(_tramaCabeceraRS485), W1
0x0C50	0x2126A0  	MOV	#lo_addr(_i_rs485), W0
0x0C52	0x408090  	ADD	W1, [W0], W1
0x0C54	0x212690  	MOV	#lo_addr(_byteRS485), W0
0x0C56	0x784890  	MOV.B	[W0], [W1]
;Master.c,590 :: 		i_rs485++;
0x0C58	0x200011  	MOV	#1, W1
0x0C5A	0x2126A0  	MOV	#lo_addr(_i_rs485), W0
0x0C5C	0x408810  	ADD	W1, [W0], [W0]
;Master.c,588 :: 		if ((banRSI==1)&&(i_rs485<5)){
L__urx_2229:
L__urx_2228:
;Master.c,592 :: 		if ((banRSI==1)&&(i_rs485==5)){
0x0C5E	0x212490  	MOV	#lo_addr(_banRSI), W0
0x0C60	0x784010  	MOV.B	[W0], W0
0x0C62	0xE10461  	CP.B	W0, #1
0x0C64	0x3A001F  	BRA NZ	L__urx_2231
L__urx_2336:
0x0C66	0x809350  	MOV	_i_rs485, W0
0x0C68	0xE10065  	CP	W0, #5
0x0C6A	0x3A001C  	BRA NZ	L__urx_2230
L__urx_2337:
L__urx_2223:
;Master.c,594 :: 		if (tramaCabeceraRS485[1]==direccionRS485){
0x0C6C	0x2121D0  	MOV	#lo_addr(_tramaCabeceraRS485+1), W0
0x0C6E	0x784090  	MOV.B	[W0], W1
0x0C70	0x212320  	MOV	#lo_addr(_direccionRS485), W0
0x0C72	0xE10C10  	CP.B	W1, [W0]
0x0C74	0x3A000F  	BRA NZ	L_urx_2131
L__urx_2338:
;Master.c,595 :: 		funcionRS485 = tramaCabeceraRS485[2];
0x0C76	0x212681  	MOV	#lo_addr(_funcionRS485), W1
0x0C78	0x2121E0  	MOV	#lo_addr(_tramaCabeceraRS485+2), W0
0x0C7A	0x784890  	MOV.B	[W0], [W1]
;Master.c,596 :: 		subFuncionRS485 = tramaCabeceraRS485[3];
0x0C7C	0x212661  	MOV	#lo_addr(_subFuncionRS485), W1
0x0C7E	0x2121F0  	MOV	#lo_addr(_tramaCabeceraRS485+3), W0
0x0C80	0x784890  	MOV.B	[W0], [W1]
;Master.c,597 :: 		numDatosRS485 = tramaCabeceraRS485[4];
0x0C82	0x2126C1  	MOV	#lo_addr(_numDatosRS485), W1
0x0C84	0x212200  	MOV	#lo_addr(_tramaCabeceraRS485+4), W0
0x0C86	0x784890  	MOV.B	[W0], [W1]
;Master.c,598 :: 		banRSI = 2;
0x0C88	0x212491  	MOV	#lo_addr(_banRSI), W1
0x0C8A	0xB3C020  	MOV.B	#2, W0
0x0C8C	0x784880  	MOV.B	W0, [W1]
;Master.c,599 :: 		i_rs485 = 0;
0x0C8E	0xEF2000  	CLR	W0
0x0C90	0x889350  	MOV	W0, _i_rs485
;Master.c,600 :: 		} else {
0x0C92	0x370008  	BRA	L_urx_2132
L_urx_2131:
;Master.c,601 :: 		banRSI = 0;
0x0C94	0x212491  	MOV	#lo_addr(_banRSI), W1
0x0C96	0xEF2000  	CLR	W0
0x0C98	0x784880  	MOV.B	W0, [W1]
;Master.c,602 :: 		banRSC = 0;
0x0C9A	0x2124A1  	MOV	#lo_addr(_banRSC), W1
0x0C9C	0xEF2000  	CLR	W0
0x0C9E	0x784880  	MOV.B	W0, [W1]
;Master.c,603 :: 		i_rs485 = 0;
0x0CA0	0xEF2000  	CLR	W0
0x0CA2	0x889350  	MOV	W0, _i_rs485
;Master.c,604 :: 		}
L_urx_2132:
;Master.c,592 :: 		if ((banRSI==1)&&(i_rs485==5)){
L__urx_2231:
L__urx_2230:
;Master.c,608 :: 		if (banRSC==1){
0x0CA4	0x2124A0  	MOV	#lo_addr(_banRSC), W0
0x0CA6	0x784010  	MOV.B	[W0], W0
0x0CA8	0xE10461  	CP.B	W0, #1
0x0CAA	0x3A001C  	BRA NZ	L_urx_2133
L__urx_2339:
;Master.c,609 :: 		switch (funcionRS485){
0x0CAC	0x370009  	BRA	L_urx_2134
;Master.c,610 :: 		case 0xF1:
L_urx_2136:
;Master.c,620 :: 		InterrupcionP1(0xB1,subFuncionRS485,numDatosRS485);
0x0CAE	0x2126C1  	MOV	#lo_addr(_numDatosRS485), W1
0x0CB0	0x212660  	MOV	#lo_addr(_subFuncionRS485), W0
0x0CB2	0xFB8611  	ZE	[W1], W12
0x0CB4	0x784590  	MOV.B	[W0], W11
0x0CB6	0xB3CB1A  	MOV.B	#177, W10
0x0CB8	0x07FEEC  	RCALL	_InterrupcionP1
;Master.c,621 :: 		break;
0x0CBA	0x370011  	BRA	L_urx_2135
;Master.c,622 :: 		case 0xF2:
L_urx_2137:
;Master.c,625 :: 		break;
0x0CBC	0x370010  	BRA	L_urx_2135
;Master.c,626 :: 		case 0xF3:
L_urx_2138:
;Master.c,629 :: 		break;
0x0CBE	0x37000F  	BRA	L_urx_2135
;Master.c,630 :: 		}
L_urx_2134:
0x0CC0	0x212680  	MOV	#lo_addr(_funcionRS485), W0
0x0CC2	0x784090  	MOV.B	[W0], W1
0x0CC4	0xB3CF10  	MOV.B	#241, W0
0x0CC6	0xE10C00  	CP.B	W1, W0
0x0CC8	0x32FFF2  	BRA Z	L_urx_2136
L__urx_2340:
0x0CCA	0x212680  	MOV	#lo_addr(_funcionRS485), W0
0x0CCC	0x784090  	MOV.B	[W0], W1
0x0CCE	0xB3CF20  	MOV.B	#242, W0
0x0CD0	0xE10C00  	CP.B	W1, W0
0x0CD2	0x32FFF4  	BRA Z	L_urx_2137
L__urx_2341:
0x0CD4	0x212680  	MOV	#lo_addr(_funcionRS485), W0
0x0CD6	0x784090  	MOV.B	[W0], W1
0x0CD8	0xB3CF30  	MOV.B	#243, W0
0x0CDA	0xE10C00  	CP.B	W1, W0
0x0CDC	0x32FFF0  	BRA Z	L_urx_2138
L__urx_2342:
L_urx_2135:
;Master.c,632 :: 		banRSC = 0;
0x0CDE	0x2124A1  	MOV	#lo_addr(_banRSC), W1
0x0CE0	0xEF2000  	CLR	W0
0x0CE2	0x784880  	MOV.B	W0, [W1]
;Master.c,634 :: 		}
L_urx_2133:
;Master.c,635 :: 		}
L_end_urx_2:
0x0CE4	0x78064F  	POP	W12
0x0CE6	0x7805CF  	POP	W11
0x0CE8	0x78054F  	POP	W10
0x0CEA	0x2001A0  	MOV	#26, W0
0x0CEC	0x09000C  	REPEAT	#12
0x0CEE	0x78104F  	POP	[W0--]
0x0CF0	0x78004F  	POP	W0
0x0CF2	0xF90036  	POP	RCOUNT
0x0CF4	0xF90032  	POP	DSRPAG
0x0CF6	0xF90034  	POP	DSWPAG
0x0CF8	0x064000  	RETFIE
; end of _urx_2
_InterrupcionP1:
;Master.c,259 :: 		void InterrupcionP1(unsigned short funcionSPI, unsigned short subFuncionSPI, unsigned int numBytesSPI){
;Master.c,262 :: 		if ((funcionSPI==0xB1)&&(subFuncionSPI==0xD1)){
0x0A92	0x781F8D  	PUSH	W13
0x0A94	0xB3CB10  	MOV.B	#177, W0
0x0A96	0xE15400  	CP.B	W10, W0
0x0A98	0x3A0028  	BRA NZ	L__InterrupcionP1162
L__InterrupcionP1277:
0x0A9A	0xB3CD10  	MOV.B	#209, W0
0x0A9C	0xE15C00  	CP.B	W11, W0
0x0A9E	0x3A0025  	BRA NZ	L__InterrupcionP1161
L__InterrupcionP1278:
L__InterrupcionP1160:
;Master.c,263 :: 		if (INT1IE_bit==0){
0x0AA0	0xAF8822  	BTSC	INT1IE_bit, BitPos(INT1IE_bit+0)
0x0AA2	0x370001  	BRA	L_InterrupcionP150
;Master.c,264 :: 		INT1IE_bit = 1;
0x0AA4	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Master.c,265 :: 		}
L_InterrupcionP150:
;Master.c,267 :: 		outputPyloadRS485[0] = 0xD1;
0x0AA6	0x2120A1  	MOV	#lo_addr(_outputPyloadRS485), W1
0x0AA8	0xB3CD10  	MOV.B	#209, W0
0x0AAA	0x784880  	MOV.B	W0, [W1]
;Master.c,268 :: 		for (x=1;x<7;x++){
0x0AAC	0x200010  	MOV	#1, W0
0x0AAE	0x8892C0  	MOV	W0, _x
L_InterrupcionP151:
0x0AB0	0x8092C0  	MOV	_x, W0
0x0AB2	0xE10067  	CP	W0, #7
0x0AB4	0x31000C  	BRA GEU	L_InterrupcionP152
L__InterrupcionP1279:
;Master.c,269 :: 		outputPyloadRS485[x] = tiempo[x-1];
0x0AB6	0x2120A1  	MOV	#lo_addr(_outputPyloadRS485), W1
0x0AB8	0x212580  	MOV	#lo_addr(_x), W0
0x0ABA	0x408110  	ADD	W1, [W0], W2
0x0ABC	0x8092C0  	MOV	_x, W0
0x0ABE	0x5000E1  	SUB	W0, #1, W1
0x0AC0	0x212140  	MOV	#lo_addr(_tiempo), W0
0x0AC2	0x400001  	ADD	W0, W1, W0
0x0AC4	0x784910  	MOV.B	[W0], [W2]
;Master.c,268 :: 		for (x=1;x<7;x++){
0x0AC6	0x200011  	MOV	#1, W1
0x0AC8	0x212580  	MOV	#lo_addr(_x), W0
0x0ACA	0x408810  	ADD	W1, [W0], [W0]
;Master.c,270 :: 		}
0x0ACC	0x37FFF1  	BRA	L_InterrupcionP151
L_InterrupcionP152:
;Master.c,271 :: 		EnviarTramaRS485(2, 255, 0xF1, 0xD1, 6, outputPyloadRS485);             //Envia la hora local a todos los nodos
0x0ACE	0x781F8C  	PUSH	W12
0x0AD0	0xBE9F8A  	PUSH.D	W10
0x0AD2	0xB3CD1D  	MOV.B	#209, W13
0x0AD4	0xB3CF1C  	MOV.B	#241, W12
0x0AD6	0xB3CFFB  	MOV.B	#255, W11
0x0AD8	0xB3C02A  	MOV.B	#2, W10
0x0ADA	0x2120A0  	MOV	#lo_addr(_outputPyloadRS485), W0
0x0ADC	0x781F80  	PUSH	W0
0x0ADE	0x200060  	MOV	#6, W0
0x0AE0	0x781F80  	PUSH	W0
0x0AE2	0x07FF84  	RCALL	_EnviarTramaRS485
0x0AE4	0xB1004F  	SUB	#4, W15
0x0AE6	0xBE054F  	POP.D	W10
0x0AE8	0x78064F  	POP	W12
;Master.c,262 :: 		if ((funcionSPI==0xB1)&&(subFuncionSPI==0xD1)){
L__InterrupcionP1162:
L__InterrupcionP1161:
;Master.c,275 :: 		ptrnumBytesSPI = (unsigned char *) & numBytesSPI;
0x0AEA	0x200182  	MOV	#lo_addr(W12), W2
0x0AEC	0x8890D2  	MOV	W2, _ptrnumBytesSPI
;Master.c,278 :: 		tramaSolicitudSPI[0] = funcionSPI;                                         //Operacion solicitada
0x0AEE	0x212000  	MOV	#lo_addr(_tramaSolicitudSPI), W0
0x0AF0	0x78480A  	MOV.B	W10, [W0]
;Master.c,279 :: 		tramaSolicitudSPI[1] = subFuncionSPI;                                      //Subfuncion solicitada
0x0AF2	0x212010  	MOV	#lo_addr(_tramaSolicitudSPI+1), W0
0x0AF4	0x78480B  	MOV.B	W11, [W0]
;Master.c,280 :: 		tramaSolicitudSPI[2] = *(ptrnumBytesSPI);                                  //LSB numBytesSPI
0x0AF6	0x784092  	MOV.B	[W2], W1
0x0AF8	0x212020  	MOV	#lo_addr(_tramaSolicitudSPI+2), W0
0x0AFA	0x784801  	MOV.B	W1, [W0]
;Master.c,281 :: 		tramaSolicitudSPI[3] = *(ptrnumBytesSPI+1);                                //MSB numBytesSPI
0x0AFC	0x410061  	ADD	W2, #1, W0
0x0AFE	0x784090  	MOV.B	[W0], W1
0x0B00	0x212030  	MOV	#lo_addr(_tramaSolicitudSPI+3), W0
0x0B02	0x784801  	MOV.B	W1, [W0]
;Master.c,284 :: 		RP1 = 1;
0x0B04	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,285 :: 		Delay_us(20);
0x0B06	0x200A07  	MOV	#160, W7
L_InterrupcionP154:
0x0B08	0xED200E  	DEC	W7
0x0B0A	0x3AFFFE  	BRA NZ	L_InterrupcionP154
0x0B0C	0x000000  	NOP
0x0B0E	0x000000  	NOP
;Master.c,286 :: 		RP1 = 0;
0x0B10	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,288 :: 		}
L_end_InterrupcionP1:
0x0B12	0x7806CF  	POP	W13
0x0B14	0x060000  	RETURN
; end of _InterrupcionP1
_EnviarTramaRS485:
0x09EC	0xFA0000  	LNK	#0
;rs485.c,17 :: 		void EnviarTramaRS485(unsigned short puertoUART, unsigned short direccion, unsigned short funcion, unsigned short subfuncion, unsigned short numDatos, unsigned char *payload){
; numDatos start address is: 0 (W0)
0x09EE	0x97F80E  	MOV.B	[W14-8], W0
; payload start address is: 4 (W2)
0x09F0	0x97B93E  	MOV	[W14-10], W2
;rs485.c,21 :: 		if (puertoUART == 1){
0x09F2	0xE15461  	CP.B	W10, #1
0x09F4	0x3A0026  	BRA NZ	L__EnviarTramaRS485159
L__EnviarTramaRS485267:
;rs485.c,22 :: 		MSRS485 = 1;                                                            //Establece el Max485 en modo escritura
0x09F6	0xA86E15  	BSET	MSRS485, BitPos(MSRS485+0)
;rs485.c,23 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x09F8	0x781F8A  	PUSH	W10
0x09FA	0x2003AA  	MOV	#58, W10
0x09FC	0x07FC49  	RCALL	_UART1_Write
;rs485.c,24 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x09FE	0xFB850B  	ZE	W11, W10
0x0A00	0x07FC47  	RCALL	_UART1_Write
;rs485.c,25 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x0A02	0xFB850C  	ZE	W12, W10
0x0A04	0x07FC45  	RCALL	_UART1_Write
;rs485.c,26 :: 		UART1_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0A06	0xFB850D  	ZE	W13, W10
0x0A08	0x07FC43  	RCALL	_UART1_Write
;rs485.c,27 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x0A0A	0xFB8500  	ZE	W0, W10
0x0A0C	0x07FC41  	RCALL	_UART1_Write
0x0A0E	0x78054F  	POP	W10
;rs485.c,28 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 2 (W1)
0x0A10	0xEF2002  	CLR	W1
; numDatos end address is: 0 (W0)
; iDatos end address is: 2 (W1)
; payload end address is: 4 (W2)
0x0A12	0x784180  	MOV.B	W0, W3
L_EnviarTramaRS48532:
; iDatos start address is: 2 (W1)
; payload start address is: 4 (W2)
; numDatos start address is: 6 (W3)
0x0A14	0xFB8003  	ZE	W3, W0
0x0A16	0xE10800  	CP	W1, W0
0x0A18	0x310007  	BRA GEU	L_EnviarTramaRS48533
L__EnviarTramaRS485268:
;rs485.c,29 :: 		UART1_Write(payload[iDatos]);
0x0A1A	0x410001  	ADD	W2, W1, W0
0x0A1C	0x781F8A  	PUSH	W10
0x0A1E	0xFB8510  	ZE	[W0], W10
0x0A20	0x07FC37  	RCALL	_UART1_Write
0x0A22	0x78054F  	POP	W10
;rs485.c,28 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0A24	0xEC2002  	INC	W1
;rs485.c,30 :: 		}
; iDatos end address is: 2 (W1)
0x0A26	0x37FFF6  	BRA	L_EnviarTramaRS48532
L_EnviarTramaRS48533:
;rs485.c,31 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0A28	0x781F8A  	PUSH	W10
0x0A2A	0x2000DA  	MOV	#13, W10
0x0A2C	0x07FC31  	RCALL	_UART1_Write
;rs485.c,32 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x0A2E	0x2000AA  	MOV	#10, W10
0x0A30	0x07FC2F  	RCALL	_UART1_Write
; numDatos end address is: 6 (W3)
; payload end address is: 4 (W2)
0x0A32	0x78054F  	POP	W10
0x0A34	0x784083  	MOV.B	W3, W1
;rs485.c,33 :: 		while(UART1_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48535:
; numDatos start address is: 2 (W1)
; payload start address is: 4 (W2)
0x0A36	0x07FC42  	RCALL	_UART1_Tx_Idle
0x0A38	0xE10060  	CP	W0, #0
0x0A3A	0x3A0001  	BRA NZ	L_EnviarTramaRS48536
L__EnviarTramaRS485269:
0x0A3C	0x37FFFC  	BRA	L_EnviarTramaRS48535
L_EnviarTramaRS48536:
;rs485.c,34 :: 		MSRS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0A3E	0xA96E15  	BCLR	MSRS485, BitPos(MSRS485+0)
; numDatos end address is: 2 (W1)
; payload end address is: 4 (W2)
;rs485.c,35 :: 		}
0x0A40	0x370001  	BRA	L_EnviarTramaRS48531
L__EnviarTramaRS485159:
;rs485.c,21 :: 		if (puertoUART == 1){
0x0A42	0x784080  	MOV.B	W0, W1
;rs485.c,35 :: 		}
L_EnviarTramaRS48531:
;rs485.c,37 :: 		if (puertoUART == 2){
; payload start address is: 4 (W2)
; numDatos start address is: 2 (W1)
0x0A44	0xE15462  	CP.B	W10, #2
0x0A46	0x3A0023  	BRA NZ	L_EnviarTramaRS48537
L__EnviarTramaRS485270:
;rs485.c,38 :: 		MSRS485 = 1;                                                            //Establece el Max485 en modo escritura
0x0A48	0xA86E15  	BSET	MSRS485, BitPos(MSRS485+0)
;rs485.c,39 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x0A4A	0x781F8A  	PUSH	W10
0x0A4C	0x2003AA  	MOV	#58, W10
0x0A4E	0x07FC3C  	RCALL	_UART2_Write
;rs485.c,40 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x0A50	0xFB850B  	ZE	W11, W10
0x0A52	0x07FC3A  	RCALL	_UART2_Write
;rs485.c,41 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x0A54	0xFB850C  	ZE	W12, W10
0x0A56	0x07FC38  	RCALL	_UART2_Write
;rs485.c,42 :: 		UART2_Write(subfuncion);                                                //Envia el codigo de la subfuncion
0x0A58	0xFB850D  	ZE	W13, W10
0x0A5A	0x07FC36  	RCALL	_UART2_Write
;rs485.c,43 :: 		UART2_Write(numDatos);                                                  //Envia el numero de datos
0x0A5C	0xFB8501  	ZE	W1, W10
0x0A5E	0x07FC34  	RCALL	_UART2_Write
0x0A60	0x78054F  	POP	W10
;rs485.c,44 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 6 (W3)
0x0A62	0xEF2006  	CLR	W3
; numDatos end address is: 2 (W1)
; iDatos end address is: 6 (W3)
L_EnviarTramaRS48538:
; iDatos start address is: 6 (W3)
; numDatos start address is: 2 (W1)
; payload start address is: 4 (W2)
; payload end address is: 4 (W2)
0x0A64	0xFB8001  	ZE	W1, W0
0x0A66	0xE11800  	CP	W3, W0
0x0A68	0x310007  	BRA GEU	L_EnviarTramaRS48539
L__EnviarTramaRS485271:
; payload end address is: 4 (W2)
;rs485.c,45 :: 		UART2_Write(payload[iDatos]);
; payload start address is: 4 (W2)
0x0A6A	0x410003  	ADD	W2, W3, W0
0x0A6C	0x781F8A  	PUSH	W10
0x0A6E	0xFB8510  	ZE	[W0], W10
0x0A70	0x07FC2B  	RCALL	_UART2_Write
0x0A72	0x78054F  	POP	W10
;rs485.c,44 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0A74	0xEC2006  	INC	W3
;rs485.c,46 :: 		}
; numDatos end address is: 2 (W1)
; payload end address is: 4 (W2)
; iDatos end address is: 6 (W3)
0x0A76	0x37FFF6  	BRA	L_EnviarTramaRS48538
L_EnviarTramaRS48539:
;rs485.c,47 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0A78	0x781F8A  	PUSH	W10
0x0A7A	0x2000DA  	MOV	#13, W10
0x0A7C	0x07FC25  	RCALL	_UART2_Write
;rs485.c,48 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x0A7E	0x2000AA  	MOV	#10, W10
0x0A80	0x07FC23  	RCALL	_UART2_Write
0x0A82	0x78054F  	POP	W10
;rs485.c,49 :: 		while(UART2_Tx_Idle()==0);                                              //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarTramaRS48541:
0x0A84	0x07FC0C  	RCALL	_UART2_Tx_Idle
0x0A86	0xE10060  	CP	W0, #0
0x0A88	0x3A0001  	BRA NZ	L_EnviarTramaRS48542
L__EnviarTramaRS485272:
0x0A8A	0x37FFFC  	BRA	L_EnviarTramaRS48541
L_EnviarTramaRS48542:
;rs485.c,50 :: 		MSRS485 = 0;                                                            //Establece el Max485 en modo lectura
0x0A8C	0xA96E15  	BCLR	MSRS485, BitPos(MSRS485+0)
;rs485.c,51 :: 		}
L_EnviarTramaRS48537:
;rs485.c,53 :: 		}
L_end_EnviarTramaRS485:
0x0A8E	0xFA8000  	ULNK
0x0A90	0x060000  	RETURN
; end of _EnviarTramaRS485
_UART1_Write:
0x0290	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x0292	0xAF0223  	BTSC	U1STA, #8
0x0294	0x370001  	BRA	L_UART1_Write1
0x0296	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x0298	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x029A	0xFA8000  	ULNK
0x029C	0x060000  	RETURN
; end of _UART1_Write
_UART1_Tx_Idle:
0x02BC	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,139 :: 		
;__Lib_UART_12_p24_p33.c,140 :: 		
0x02BE	0xEF2000  	CLR	W0
0x02C0	0xAF0223  	BTSC	U1STA, #8
0x02C2	0xEC2000  	INC	W0
;__Lib_UART_12_p24_p33.c,141 :: 		
L_end_UART1_Tx_Idle:
0x02C4	0xFA8000  	ULNK
0x02C6	0x060000  	RETURN
; end of _UART1_Tx_Idle
_UART2_Write:
0x02C8	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,305 :: 		
;__Lib_UART_12_p24_p33.c,306 :: 		
L_UART2_Write25:
0x02CA	0xAF0233  	BTSC	U2STA, #8
0x02CC	0x370001  	BRA	L_UART2_Write26
0x02CE	0x37FFFD  	BRA	L_UART2_Write25
L_UART2_Write26:
;__Lib_UART_12_p24_p33.c,307 :: 		
0x02D0	0x8811AA  	MOV	W10, U2TXREG
;__Lib_UART_12_p24_p33.c,308 :: 		
L_end_UART2_Write:
0x02D2	0xFA8000  	ULNK
0x02D4	0x060000  	RETURN
; end of _UART2_Write
_UART2_Tx_Idle:
0x029E	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,374 :: 		
;__Lib_UART_12_p24_p33.c,375 :: 		
0x02A0	0xEF2000  	CLR	W0
0x02A2	0xAF0233  	BTSC	U2STA, #8
0x02A4	0xEC2000  	INC	W0
;__Lib_UART_12_p24_p33.c,376 :: 		
L_end_UART2_Tx_Idle:
0x02A6	0xFA8000  	ULNK
0x02A8	0x060000  	RETURN
; end of _UART2_Tx_Idle
_int_1:
0x112A	0xF80034  	PUSH	DSWPAG
0x112C	0xF80032  	PUSH	DSRPAG
0x112E	0xF80036  	PUSH	RCOUNT
0x1130	0x781F80  	PUSH	W0
0x1132	0x200020  	MOV	#2, W0
0x1134	0x09000C  	REPEAT	#12
0x1136	0x781FB0  	PUSH	[W0++]
;Master.c,448 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT {
;Master.c,450 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x1138	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Master.c,452 :: 		horaSistema++;                                                             //Incrementa el reloj del sistema
0x113A	0x200011  	MOV	#1, W1
0x113C	0x200002  	MOV	#0, W2
0x113E	0x2124E0  	MOV	#lo_addr(_horaSistema), W0
0x1140	0x409810  	ADD	W1, [W0], [W0++]
0x1142	0x491010  	ADDC	W2, [W0], [W0--]
;Master.c,453 :: 		INT_SINC = ~INT_SINC;                                                      //TEST
0x1144	0xAA2E04  	BTG	LATA1_bit, BitPos(LATA1_bit+0)
;Master.c,457 :: 		INT_SINC1 = 1;
0x1146	0xA80E04  	BSET	LATA0_bit, BitPos(LATA0_bit+0)
;Master.c,458 :: 		INT_SINC2 = 1;
0x1148	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;Master.c,459 :: 		INT_SINC3 = 1;
0x114A	0xA84E15  	BSET	LATB10_bit, BitPos(LATB10_bit+0)
;Master.c,460 :: 		INT_SINC4 = 1;
0x114C	0xA88E15  	BSET	LATB12_bit, BitPos(LATB12_bit+0)
;Master.c,461 :: 		Delay_us(20);
0x114E	0x200A07  	MOV	#160, W7
L_int_1114:
0x1150	0xED200E  	DEC	W7
0x1152	0x3AFFFE  	BRA NZ	L_int_1114
0x1154	0x000000  	NOP
0x1156	0x000000  	NOP
;Master.c,463 :: 		INT_SINC1 = 0;
0x1158	0xA90E04  	BCLR	LATA0_bit, BitPos(LATA0_bit+0)
;Master.c,464 :: 		INT_SINC2 = 0;
0x115A	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;Master.c,465 :: 		INT_SINC3 = 0;
0x115C	0xA94E15  	BCLR	LATB10_bit, BitPos(LATB10_bit+0)
;Master.c,466 :: 		INT_SINC4 = 0;
0x115E	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Master.c,468 :: 		if (horaSistema==86400){                                                   //(24*3600)+(0*60)+(0) = 86400
0x1160	0x809272  	MOV	_horaSistema, W2
0x1162	0x809283  	MOV	_horaSistema+2, W3
0x1164	0x251800  	MOV	#20864, W0
0x1166	0x200011  	MOV	#1, W1
0x1168	0xE11000  	CP	W2, W0
0x116A	0xE19801  	CPB	W3, W1
0x116C	0x3A0004  	BRA NZ	L_int_1116
L__int_1326:
;Master.c,469 :: 		horaSistema = 0;                                                        //Reinicia el reloj al llegar a las 24:00:00 horas
0x116E	0xEF2000  	CLR	W0
0x1170	0xEF2002  	CLR	W1
0x1172	0x889270  	MOV	W0, _horaSistema
0x1174	0x889281  	MOV	W1, _horaSistema+2
;Master.c,470 :: 		}
L_int_1116:
;Master.c,471 :: 		if (banInicio==1){
0x1176	0x212310  	MOV	#lo_addr(_banInicio), W0
0x1178	0x784010  	MOV.B	[W0], W0
0x117A	0xE10461  	CP.B	W0, #1
0x117C	0x3A0000  	BRA NZ	L_int_1117
L__int_1327:
;Master.c,474 :: 		}
L_int_1117:
;Master.c,476 :: 		}
L_end_int_1:
0x117E	0x2001A0  	MOV	#26, W0
0x1180	0x09000C  	REPEAT	#12
0x1182	0x78104F  	POP	[W0--]
0x1184	0x78004F  	POP	W0
0x1186	0xF90036  	POP	RCOUNT
0x1188	0xF90032  	POP	DSRPAG
0x118A	0xF90034  	POP	DSWPAG
0x118C	0x064000  	RETFIE
; end of _int_1
_spi_1:
0x0DE4	0xF80034  	PUSH	DSWPAG
0x0DE6	0xF80032  	PUSH	DSRPAG
0x0DE8	0xF80036  	PUSH	RCOUNT
0x0DEA	0x781F80  	PUSH	W0
0x0DEC	0x200020  	MOV	#2, W0
0x0DEE	0x09000C  	REPEAT	#12
0x0DF0	0x781FB0  	PUSH	[W0++]
;Master.c,298 :: 		void spi_1() org  IVT_ADDR_SPI1INTERRUPT {
;Master.c,300 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI
0x0DF2	0x781F8A  	PUSH	W10
0x0DF4	0x781F8B  	PUSH	W11
0x0DF6	0x781F8C  	PUSH	W12
0x0DF8	0x781F8D  	PUSH	W13
0x0DFA	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Master.c,301 :: 		bufferSPI = SPI1BUF;                                                       //Guarda el contenido del bufeer (lectura)
0x0DFC	0x212201  	MOV	#lo_addr(_bufferSPI), W1
0x0DFE	0xBFC248  	MOV.B	SPI1BUF, WREG
0x0E00	0x784880  	MOV.B	W0, [W1]
;Master.c,305 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)) {
0x0E02	0x2125E0  	MOV	#lo_addr(_banSPI0), W0
0x0E04	0x784010  	MOV.B	[W0], W0
0x0E06	0xE10460  	CP.B	W0, #0
0x0E08	0x3A000D  	BRA NZ	L__spi_1182
L__spi_1281:
0x0E0A	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E0C	0x784090  	MOV.B	[W0], W1
0x0E0E	0xB3CA00  	MOV.B	#160, W0
0x0E10	0xE10C00  	CP.B	W1, W0
0x0E12	0x3A0008  	BRA NZ	L__spi_1181
L__spi_1282:
L__spi_1180:
;Master.c,306 :: 		banSPI0 = 1;                                                            //Activa la bandera para enviar el tipo de operacion requerido a la RPi
0x0E14	0x2125E1  	MOV	#lo_addr(_banSPI0), W1
0x0E16	0xB3C010  	MOV.B	#1, W0
0x0E18	0x784880  	MOV.B	W0, [W1]
;Master.c,307 :: 		i = 1;
0x0E1A	0x200010  	MOV	#1, W0
0x0E1C	0x8892E0  	MOV	W0, _i
;Master.c,308 :: 		SPI1BUF = tramaSolicitudSPI[0];                                         //Carga en el buffer la funcion requerida
0x0E1E	0x212000  	MOV	#lo_addr(_tramaSolicitudSPI), W0
0x0E20	0xFB8010  	ZE	[W0], W0
0x0E22	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,305 :: 		if ((banSPI0==0)&&(bufferSPI==0xA0)) {
L__spi_1182:
L__spi_1181:
;Master.c,310 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
0x0E24	0x2125E0  	MOV	#lo_addr(_banSPI0), W0
0x0E26	0x784010  	MOV.B	[W0], W0
0x0E28	0xE10461  	CP.B	W0, #1
0x0E2A	0x3A0013  	BRA NZ	L__spi_1185
L__spi_1283:
0x0E2C	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E2E	0x784090  	MOV.B	[W0], W1
0x0E30	0xB3CA00  	MOV.B	#160, W0
0x0E32	0xE10C00  	CP.B	W1, W0
0x0E34	0x32000E  	BRA Z	L__spi_1184
L__spi_1284:
0x0E36	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E38	0x784090  	MOV.B	[W0], W1
0x0E3A	0xB3CF00  	MOV.B	#240, W0
0x0E3C	0xE10C00  	CP.B	W1, W0
0x0E3E	0x320009  	BRA Z	L__spi_1183
L__spi_1285:
L__spi_1179:
;Master.c,311 :: 		SPI1BUF = tramaSolicitudSPI[i];                                         //Se envia la subfuncion, y el LSB y MSB de la variable numBytesSPI
0x0E40	0x212001  	MOV	#lo_addr(_tramaSolicitudSPI), W1
0x0E42	0x2125C0  	MOV	#lo_addr(_i), W0
0x0E44	0x408010  	ADD	W1, [W0], W0
0x0E46	0x784010  	MOV.B	[W0], W0
0x0E48	0xFB8000  	ZE	W0, W0
0x0E4A	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,312 :: 		i++;
0x0E4C	0x200011  	MOV	#1, W1
0x0E4E	0x2125C0  	MOV	#lo_addr(_i), W0
0x0E50	0x408810  	ADD	W1, [W0], [W0]
;Master.c,310 :: 		if ((banSPI0==1)&&(bufferSPI!=0xA0)&&(bufferSPI!=0xF0)){
L__spi_1185:
L__spi_1184:
L__spi_1183:
;Master.c,314 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
0x0E52	0x2125E0  	MOV	#lo_addr(_banSPI0), W0
0x0E54	0x784010  	MOV.B	[W0], W0
0x0E56	0xE10461  	CP.B	W0, #1
0x0E58	0x3A0008  	BRA NZ	L__spi_1187
L__spi_1286:
0x0E5A	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E5C	0x784090  	MOV.B	[W0], W1
0x0E5E	0xB3CF00  	MOV.B	#240, W0
0x0E60	0xE10C00  	CP.B	W1, W0
0x0E62	0x3A0003  	BRA NZ	L__spi_1186
L__spi_1287:
L__spi_1178:
;Master.c,315 :: 		banSPI0 = 0;                                                            //Limpia la bandera
0x0E64	0x2125E1  	MOV	#lo_addr(_banSPI0), W1
0x0E66	0xEF2000  	CLR	W0
0x0E68	0x784880  	MOV.B	W0, [W1]
;Master.c,314 :: 		if ((banSPI0==1)&&(bufferSPI==0xF0)){
L__spi_1187:
L__spi_1186:
;Master.c,322 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
0x0E6A	0x212630  	MOV	#lo_addr(_banSPI1), W0
0x0E6C	0x784010  	MOV.B	[W0], W0
0x0E6E	0xE10460  	CP.B	W0, #0
0x0E70	0x3A000A  	BRA NZ	L__spi_1189
L__spi_1288:
0x0E72	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E74	0x784090  	MOV.B	[W0], W1
0x0E76	0xB3CA10  	MOV.B	#161, W0
0x0E78	0xE10C00  	CP.B	W1, W0
0x0E7A	0x3A0005  	BRA NZ	L__spi_1188
L__spi_1289:
L__spi_1177:
;Master.c,323 :: 		banSPI1 = 1;
0x0E7C	0x212631  	MOV	#lo_addr(_banSPI1), W1
0x0E7E	0xB3C010  	MOV.B	#1, W0
0x0E80	0x784880  	MOV.B	W0, [W1]
;Master.c,324 :: 		i = 0;
0x0E82	0xEF2000  	CLR	W0
0x0E84	0x8892E0  	MOV	W0, _i
;Master.c,322 :: 		if ((banSPI1==0)&&(bufferSPI==0xA1)){
L__spi_1189:
L__spi_1188:
;Master.c,326 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
0x0E86	0x212630  	MOV	#lo_addr(_banSPI1), W0
0x0E88	0x784010  	MOV.B	[W0], W0
0x0E8A	0xE10461  	CP.B	W0, #1
0x0E8C	0x3A0012  	BRA NZ	L__spi_1192
L__spi_1290:
0x0E8E	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E90	0x784090  	MOV.B	[W0], W1
0x0E92	0xB3CA10  	MOV.B	#161, W0
0x0E94	0xE10C00  	CP.B	W1, W0
0x0E96	0x32000D  	BRA Z	L__spi_1191
L__spi_1291:
0x0E98	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0E9A	0x784090  	MOV.B	[W0], W1
0x0E9C	0xB3CF10  	MOV.B	#241, W0
0x0E9E	0xE10C00  	CP.B	W1, W0
0x0EA0	0x320008  	BRA Z	L__spi_1190
L__spi_1292:
L__spi_1176:
;Master.c,327 :: 		tramaSolicitudNodo[i] = bufferSPI;                                      //Recupera la trama de solicitud enviada por la RPi
0x0EA2	0x212211  	MOV	#lo_addr(_tramaSolicitudNodo), W1
0x0EA4	0x2125C0  	MOV	#lo_addr(_i), W0
0x0EA6	0x408090  	ADD	W1, [W0], W1
0x0EA8	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0EAA	0x784890  	MOV.B	[W0], [W1]
;Master.c,328 :: 		i++;
0x0EAC	0x200011  	MOV	#1, W1
0x0EAE	0x2125C0  	MOV	#lo_addr(_i), W0
0x0EB0	0x408810  	ADD	W1, [W0], [W0]
;Master.c,326 :: 		if ((banSPI1==1)&&(bufferSPI!=0xA1)&&(bufferSPI!=0xF1)){
L__spi_1192:
L__spi_1191:
L__spi_1190:
;Master.c,330 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
0x0EB2	0x212630  	MOV	#lo_addr(_banSPI1), W0
0x0EB4	0x784010  	MOV.B	[W0], W0
0x0EB6	0xE10461  	CP.B	W0, #1
0x0EB8	0x3A002B  	BRA NZ	L__spi_1194
L__spi_1293:
0x0EBA	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0EBC	0x784090  	MOV.B	[W0], W1
0x0EBE	0xB3CF10  	MOV.B	#241, W0
0x0EC0	0xE10C00  	CP.B	W1, W0
0x0EC2	0x3A0026  	BRA NZ	L__spi_1193
L__spi_1294:
L__spi_1175:
;Master.c,331 :: 		banSPI1 = 0;
0x0EC4	0x212631  	MOV	#lo_addr(_banSPI1), W1
0x0EC6	0xEF2000  	CLR	W0
0x0EC8	0x784880  	MOV.B	W0, [W1]
;Master.c,332 :: 		direccionRS485 = tramaSolicitudNodo[0];
0x0ECA	0x212321  	MOV	#lo_addr(_direccionRS485), W1
0x0ECC	0x212210  	MOV	#lo_addr(_tramaSolicitudNodo), W0
0x0ECE	0x784890  	MOV.B	[W0], [W1]
;Master.c,333 :: 		funcionRS485 = tramaSolicitudNodo[1];
0x0ED0	0x212681  	MOV	#lo_addr(_funcionRS485), W1
0x0ED2	0x212220  	MOV	#lo_addr(_tramaSolicitudNodo+1), W0
0x0ED4	0x784890  	MOV.B	[W0], [W1]
;Master.c,334 :: 		subFuncionRS485 = tramaSolicitudNodo[2];
0x0ED6	0x212661  	MOV	#lo_addr(_subFuncionRS485), W1
0x0ED8	0x212230  	MOV	#lo_addr(_tramaSolicitudNodo+2), W0
0x0EDA	0x784890  	MOV.B	[W0], [W1]
;Master.c,335 :: 		numDatosRS485 = tramaSolicitudNodo[3];
0x0EDC	0x2126C1  	MOV	#lo_addr(_numDatosRS485), W1
0x0EDE	0x212240  	MOV	#lo_addr(_tramaSolicitudNodo+3), W0
0x0EE0	0x784890  	MOV.B	[W0], [W1]
;Master.c,336 :: 		outputPyloadRS485[0] = 0;
0x0EE2	0x2120A1  	MOV	#lo_addr(_outputPyloadRS485), W1
0x0EE4	0xEF2000  	CLR	W0
0x0EE6	0x784880  	MOV.B	W0, [W1]
;Master.c,343 :: 		EnviarTramaRS485(2, direccionRS485, funcionRS485, subFuncionRS485, numDatosRS485, outputPyloadRS485);
0x0EE8	0x212232  	MOV	#lo_addr(_tramaSolicitudNodo+2), W2
0x0EEA	0x212221  	MOV	#lo_addr(_tramaSolicitudNodo+1), W1
0x0EEC	0x212210  	MOV	#lo_addr(_tramaSolicitudNodo), W0
0x0EEE	0x784692  	MOV.B	[W2], W13
0x0EF0	0x784611  	MOV.B	[W1], W12
0x0EF2	0x784590  	MOV.B	[W0], W11
0x0EF4	0xB3C02A  	MOV.B	#2, W10
0x0EF6	0x2120A0  	MOV	#lo_addr(_outputPyloadRS485), W0
0x0EF8	0x781F80  	PUSH	W0
0x0EFA	0x212240  	MOV	#lo_addr(_tramaSolicitudNodo+3), W0
0x0EFC	0xFB8010  	ZE	[W0], W0
0x0EFE	0x781F80  	PUSH	W0
0x0F00	0x07FD75  	RCALL	_EnviarTramaRS485
0x0F02	0xB1004F  	SUB	#4, W15
;Master.c,346 :: 		if (funcionRS485==0xF1){
0x0F04	0x212680  	MOV	#lo_addr(_funcionRS485), W0
0x0F06	0x784090  	MOV.B	[W0], W1
0x0F08	0xB3CF10  	MOV.B	#241, W0
0x0F0A	0xE10C00  	CP.B	W1, W0
0x0F0C	0x3A0001  	BRA NZ	L_spi_174
L__spi_1295:
;Master.c,347 :: 		INT1IE_bit = 0;
0x0F0E	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Master.c,348 :: 		}
L_spi_174:
;Master.c,330 :: 		if ((banSPI1==1)&&(bufferSPI==0xF1)){
L__spi_1194:
L__spi_1193:
;Master.c,356 :: 		if ((banSPI2==0)&&(bufferSPI==0xA2)){
0x0F10	0x212640  	MOV	#lo_addr(_banSPI2), W0
0x0F12	0x784010  	MOV.B	[W0], W0
0x0F14	0xE10460  	CP.B	W0, #0
0x0F16	0x3A000D  	BRA NZ	L__spi_1196
L__spi_1296:
0x0F18	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F1A	0x784090  	MOV.B	[W0], W1
0x0F1C	0xB3CA20  	MOV.B	#162, W0
0x0F1E	0xE10C00  	CP.B	W1, W0
0x0F20	0x3A0008  	BRA NZ	L__spi_1195
L__spi_1297:
L__spi_1174:
;Master.c,357 :: 		banSPI2 = 1;
0x0F22	0x212641  	MOV	#lo_addr(_banSPI2), W1
0x0F24	0xB3C010  	MOV.B	#1, W0
0x0F26	0x784880  	MOV.B	W0, [W1]
;Master.c,358 :: 		SPI1BUF = inputPyloadRS485[0];
0x0F28	0x210000  	MOV	#lo_addr(_inputPyloadRS485), W0
0x0F2A	0xFB8010  	ZE	[W0], W0
0x0F2C	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,359 :: 		i = 1;
0x0F2E	0x200010  	MOV	#1, W0
0x0F30	0x8892E0  	MOV	W0, _i
;Master.c,356 :: 		if ((banSPI2==0)&&(bufferSPI==0xA2)){
L__spi_1196:
L__spi_1195:
;Master.c,361 :: 		if ((banSPI2==1)&&(bufferSPI!=0xA2)&&(bufferSPI!=0xF2)){
0x0F32	0x212640  	MOV	#lo_addr(_banSPI2), W0
0x0F34	0x784010  	MOV.B	[W0], W0
0x0F36	0xE10461  	CP.B	W0, #1
0x0F38	0x3A0013  	BRA NZ	L__spi_1199
L__spi_1298:
0x0F3A	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F3C	0x784090  	MOV.B	[W0], W1
0x0F3E	0xB3CA20  	MOV.B	#162, W0
0x0F40	0xE10C00  	CP.B	W1, W0
0x0F42	0x32000E  	BRA Z	L__spi_1198
L__spi_1299:
0x0F44	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F46	0x784090  	MOV.B	[W0], W1
0x0F48	0xB3CF20  	MOV.B	#242, W0
0x0F4A	0xE10C00  	CP.B	W1, W0
0x0F4C	0x320009  	BRA Z	L__spi_1197
L__spi_1300:
L__spi_1173:
;Master.c,362 :: 		SPI1BUF = inputPyloadRS485[i];
0x0F4E	0x210001  	MOV	#lo_addr(_inputPyloadRS485), W1
0x0F50	0x2125C0  	MOV	#lo_addr(_i), W0
0x0F52	0x408010  	ADD	W1, [W0], W0
0x0F54	0x784010  	MOV.B	[W0], W0
0x0F56	0xFB8000  	ZE	W0, W0
0x0F58	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,363 :: 		i++;
0x0F5A	0x200011  	MOV	#1, W1
0x0F5C	0x2125C0  	MOV	#lo_addr(_i), W0
0x0F5E	0x408810  	ADD	W1, [W0], [W0]
;Master.c,361 :: 		if ((banSPI2==1)&&(bufferSPI!=0xA2)&&(bufferSPI!=0xF2)){
L__spi_1199:
L__spi_1198:
L__spi_1197:
;Master.c,365 :: 		if ((banSPI2==1)&&(bufferSPI==0xF2)){
0x0F60	0x212640  	MOV	#lo_addr(_banSPI2), W0
0x0F62	0x784010  	MOV.B	[W0], W0
0x0F64	0xE10461  	CP.B	W0, #1
0x0F66	0x3A0008  	BRA NZ	L__spi_1201
L__spi_1301:
0x0F68	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F6A	0x784090  	MOV.B	[W0], W1
0x0F6C	0xB3CF20  	MOV.B	#242, W0
0x0F6E	0xE10C00  	CP.B	W1, W0
0x0F70	0x3A0003  	BRA NZ	L__spi_1200
L__spi_1302:
L__spi_1172:
;Master.c,366 :: 		banSPI2 = 0;
0x0F72	0x212641  	MOV	#lo_addr(_banSPI2), W1
0x0F74	0xEF2000  	CLR	W0
0x0F76	0x784880  	MOV.B	W0, [W1]
;Master.c,365 :: 		if ((banSPI2==1)&&(bufferSPI==0xF2)){
L__spi_1201:
L__spi_1200:
;Master.c,375 :: 		if ((banSetReloj==0)&&(bufferSPI==0xA4)){
0x0F78	0x2124C0  	MOV	#lo_addr(_banSetReloj), W0
0x0F7A	0x784010  	MOV.B	[W0], W0
0x0F7C	0xE10460  	CP.B	W0, #0
0x0F7E	0x3A000A  	BRA NZ	L__spi_1203
L__spi_1303:
0x0F80	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F82	0x784090  	MOV.B	[W0], W1
0x0F84	0xB3CA40  	MOV.B	#164, W0
0x0F86	0xE10C00  	CP.B	W1, W0
0x0F88	0x3A0005  	BRA NZ	L__spi_1202
L__spi_1304:
L__spi_1171:
;Master.c,376 :: 		banSPI4 = 1;
0x0F8A	0x212621  	MOV	#lo_addr(_banSPI4), W1
0x0F8C	0xB3C010  	MOV.B	#1, W0
0x0F8E	0x784880  	MOV.B	W0, [W1]
;Master.c,377 :: 		j = 0;
0x0F90	0xEF2000  	CLR	W0
0x0F92	0x8892B0  	MOV	W0, _j
;Master.c,375 :: 		if ((banSetReloj==0)&&(bufferSPI==0xA4)){
L__spi_1203:
L__spi_1202:
;Master.c,379 :: 		if ((banSPI4==1)&&(bufferSPI!=0xA4)&&(bufferSPI!=0xF4)){
0x0F94	0x212620  	MOV	#lo_addr(_banSPI4), W0
0x0F96	0x784010  	MOV.B	[W0], W0
0x0F98	0xE10461  	CP.B	W0, #1
0x0F9A	0x3A0012  	BRA NZ	L__spi_1206
L__spi_1305:
0x0F9C	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0F9E	0x784090  	MOV.B	[W0], W1
0x0FA0	0xB3CA40  	MOV.B	#164, W0
0x0FA2	0xE10C00  	CP.B	W1, W0
0x0FA4	0x32000D  	BRA Z	L__spi_1205
L__spi_1306:
0x0FA6	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0FA8	0x784090  	MOV.B	[W0], W1
0x0FAA	0xB3CF40  	MOV.B	#244, W0
0x0FAC	0xE10C00  	CP.B	W1, W0
0x0FAE	0x320008  	BRA Z	L__spi_1204
L__spi_1307:
L__spi_1170:
;Master.c,380 :: 		tiempoRPI[j] = bufferSPI;
0x0FB0	0x2122B1  	MOV	#lo_addr(_tiempoRPI), W1
0x0FB2	0x212560  	MOV	#lo_addr(_j), W0
0x0FB4	0x408090  	ADD	W1, [W0], W1
0x0FB6	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0FB8	0x784890  	MOV.B	[W0], [W1]
;Master.c,381 :: 		j++;
0x0FBA	0x200011  	MOV	#1, W1
0x0FBC	0x212560  	MOV	#lo_addr(_j), W0
0x0FBE	0x408810  	ADD	W1, [W0], [W0]
;Master.c,379 :: 		if ((banSPI4==1)&&(bufferSPI!=0xA4)&&(bufferSPI!=0xF4)){
L__spi_1206:
L__spi_1205:
L__spi_1204:
;Master.c,383 :: 		if ((banSPI4==1)&&(bufferSPI==0xF4)){
0x0FC0	0x212620  	MOV	#lo_addr(_banSPI4), W0
0x0FC2	0x784010  	MOV.B	[W0], W0
0x0FC4	0xE10461  	CP.B	W0, #1
0x0FC6	0x3A001E  	BRA NZ	L__spi_1208
L__spi_1308:
0x0FC8	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x0FCA	0x784090  	MOV.B	[W0], W1
0x0FCC	0xB3CF40  	MOV.B	#244, W0
0x0FCE	0xE10C00  	CP.B	W1, W0
0x0FD0	0x3A0019  	BRA NZ	L__spi_1207
L__spi_1309:
L__spi_1169:
;Master.c,384 :: 		horaSistema = RecuperarHoraRPI(tiempoRPI);                              //Recupera la hora de la RPi
0x0FD2	0x2122BA  	MOV	#lo_addr(_tiempoRPI), W10
0x0FD4	0x07FC18  	RCALL	_RecuperarHoraRPI
0x0FD6	0x889270  	MOV	W0, _horaSistema
0x0FD8	0x889281  	MOV	W1, _horaSistema+2
;Master.c,385 :: 		fechaSistema = RecuperarFechaRPI(tiempoRPI);                            //Recupera la fecha de la RPi
0x0FDA	0x2122BA  	MOV	#lo_addr(_tiempoRPI), W10
0x0FDC	0x07FBFB  	RCALL	_RecuperarFechaRPI
0x0FDE	0x889290  	MOV	W0, _fechaSistema
0x0FE0	0x8892A1  	MOV	W1, _fechaSistema+2
;Master.c,390 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);                //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x0FE2	0xBE0600  	MOV.D	W0, W12
0x0FE4	0x80927A  	MOV	_horaSistema, W10
0x0FE6	0x80928B  	MOV	_horaSistema+2, W11
0x0FE8	0x212140  	MOV	#lo_addr(_tiempo), W0
0x0FEA	0x781F80  	PUSH	W0
0x0FEC	0x07FBA0  	RCALL	_AjustarTiempoSistema
0x0FEE	0xB1002F  	SUB	#2, W15
;Master.c,391 :: 		banSPI4 = 0;
0x0FF0	0x212621  	MOV	#lo_addr(_banSPI4), W1
0x0FF2	0xEF2000  	CLR	W0
0x0FF4	0x784880  	MOV.B	W0, [W1]
;Master.c,392 :: 		banSetReloj = 1;                                                        //Activa la bandera para utilizar el tiempo
0x0FF6	0x2124C1  	MOV	#lo_addr(_banSetReloj), W1
0x0FF8	0xB3C010  	MOV.B	#1, W0
0x0FFA	0x784880  	MOV.B	W0, [W1]
;Master.c,393 :: 		InterrupcionP1(0xB1,0xD1,6);                                            //Envia la hora local a la RPi y a los nodos
0x0FFC	0x20006C  	MOV	#6, W12
0x0FFE	0xB3CD1B  	MOV.B	#209, W11
0x1000	0xB3CB1A  	MOV.B	#177, W10
0x1002	0x07FD47  	RCALL	_InterrupcionP1
;Master.c,383 :: 		if ((banSPI4==1)&&(bufferSPI==0xF4)){
L__spi_1208:
L__spi_1207:
;Master.c,398 :: 		if ((banSetReloj==0)&&(bufferSPI==0xA5)){
0x1004	0x2124C0  	MOV	#lo_addr(_banSetReloj), W0
0x1006	0x784010  	MOV.B	[W0], W0
0x1008	0xE10460  	CP.B	W0, #0
0x100A	0x3A0008  	BRA NZ	L__spi_1210
L__spi_1310:
0x100C	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x100E	0x784090  	MOV.B	[W0], W1
0x1010	0xB3CA50  	MOV.B	#165, W0
0x1012	0xE10C00  	CP.B	W1, W0
0x1014	0x3A0003  	BRA NZ	L__spi_1209
L__spi_1311:
L__spi_1168:
;Master.c,399 :: 		banSPI5 = 1;
0x1016	0x2125F1  	MOV	#lo_addr(_banSPI5), W1
0x1018	0xB3C010  	MOV.B	#1, W0
0x101A	0x784880  	MOV.B	W0, [W1]
;Master.c,398 :: 		if ((banSetReloj==0)&&(bufferSPI==0xA5)){
L__spi_1210:
L__spi_1209:
;Master.c,401 :: 		if ((banSPI5==1)&&(bufferSPI!=0xA5)&&(bufferSPI!=0xF5)){
0x101C	0x2125F0  	MOV	#lo_addr(_banSPI5), W0
0x101E	0x784010  	MOV.B	[W0], W0
0x1020	0xE10461  	CP.B	W0, #1
0x1022	0x3A000D  	BRA NZ	L__spi_1213
L__spi_1312:
0x1024	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x1026	0x784090  	MOV.B	[W0], W1
0x1028	0xB3CA50  	MOV.B	#165, W0
0x102A	0xE10C00  	CP.B	W1, W0
0x102C	0x320008  	BRA Z	L__spi_1212
L__spi_1313:
0x102E	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x1030	0x784090  	MOV.B	[W0], W1
0x1032	0xB3CF50  	MOV.B	#245, W0
0x1034	0xE10C00  	CP.B	W1, W0
0x1036	0x320003  	BRA Z	L__spi_1211
L__spi_1314:
L__spi_1167:
;Master.c,402 :: 		referenciaTiempo =  bufferSPI;                                          //Recupera la opcion de referencia de tiempo solicitada
0x1038	0x212481  	MOV	#lo_addr(_referenciaTiempo), W1
0x103A	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x103C	0x784890  	MOV.B	[W0], [W1]
;Master.c,401 :: 		if ((banSPI5==1)&&(bufferSPI!=0xA5)&&(bufferSPI!=0xF5)){
L__spi_1213:
L__spi_1212:
L__spi_1211:
;Master.c,404 :: 		if ((banSPI5==1)&&(bufferSPI==0xF5)){
0x103E	0x2125F0  	MOV	#lo_addr(_banSPI5), W0
0x1040	0x784010  	MOV.B	[W0], W0
0x1042	0xE10461  	CP.B	W0, #1
0x1044	0x3A002F  	BRA NZ	L__spi_1215
L__spi_1315:
0x1046	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x1048	0x784090  	MOV.B	[W0], W1
0x104A	0xB3CF50  	MOV.B	#245, W0
0x104C	0xE10C00  	CP.B	W1, W0
0x104E	0x3A002A  	BRA NZ	L__spi_1214
L__spi_1316:
L__spi_1166:
;Master.c,405 :: 		banSPI5 = 0;
0x1050	0x2125F1  	MOV	#lo_addr(_banSPI5), W1
0x1052	0xEF2000  	CLR	W0
0x1054	0x784880  	MOV.B	W0, [W1]
;Master.c,406 :: 		if (referenciaTiempo==1){
0x1056	0x212480  	MOV	#lo_addr(_referenciaTiempo), W0
0x1058	0x784010  	MOV.B	[W0], W0
0x105A	0xE10461  	CP.B	W0, #1
0x105C	0x3A000C  	BRA NZ	L_spi_1102
L__spi_1317:
;Master.c,408 :: 		banTIGPS = 0;                                                   //Limpia la bandera de inicio de trama  del GPS
0x105E	0x212331  	MOV	#lo_addr(_banTIGPS), W1
0x1060	0xEF2000  	CLR	W0
0x1062	0x784880  	MOV.B	W0, [W1]
;Master.c,409 :: 		banTCGPS = 0;                                                   //Limpia la bandera de trama completa
0x1064	0x212411  	MOV	#lo_addr(_banTCGPS), W1
0x1066	0xEF2000  	CLR	W0
0x1068	0x784880  	MOV.B	W0, [W1]
;Master.c,410 :: 		i_gps = 0;                                                      //Limpia el subindice de la trama GPS
0x106A	0xEF2000  	CLR	W0
0x106C	0x889230  	MOV	W0, _i_gps
;Master.c,412 :: 		if (U1RXIE_bit==0){
0x106E	0xAF6821  	BTSC	U1RXIE_bit, BitPos(U1RXIE_bit+0)
0x1070	0x370001  	BRA	L_spi_1103
;Master.c,413 :: 		U1RXIE_bit = 1;
0x1072	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Master.c,414 :: 		}
L_spi_1103:
;Master.c,415 :: 		} else {
0x1074	0x370017  	BRA	L_spi_1104
L_spi_1102:
;Master.c,417 :: 		horaSistema = RecuperarHoraRTC();                               //Recupera la hora del RTC
0x1076	0x07FB1D  	RCALL	_RecuperarHoraRTC
0x1078	0x889270  	MOV	W0, _horaSistema
0x107A	0x889281  	MOV	W1, _horaSistema+2
;Master.c,418 :: 		fechaSistema = RecuperarFechaRTC();                             //Recupera la fecha del RTC
0x107C	0x07FD6A  	RCALL	_RecuperarFechaRTC
0x107E	0x889290  	MOV	W0, _fechaSistema
0x1080	0x8892A1  	MOV	W1, _fechaSistema+2
;Master.c,419 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);        //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x1082	0xBE0600  	MOV.D	W0, W12
0x1084	0x80927A  	MOV	_horaSistema, W10
0x1086	0x80928B  	MOV	_horaSistema+2, W11
0x1088	0x212140  	MOV	#lo_addr(_tiempo), W0
0x108A	0x781F80  	PUSH	W0
0x108C	0x07FB50  	RCALL	_AjustarTiempoSistema
0x108E	0xB1002F  	SUB	#2, W15
;Master.c,420 :: 		fuenteReloj = 0;                                                //**Hay que corregir esto en todo
0x1090	0x2124B1  	MOV	#lo_addr(_fuenteReloj), W1
0x1092	0xEF2000  	CLR	W0
0x1094	0x784880  	MOV.B	W0, [W1]
;Master.c,421 :: 		banSetReloj = 1;
0x1096	0x2124C1  	MOV	#lo_addr(_banSetReloj), W1
0x1098	0xB3C010  	MOV.B	#1, W0
0x109A	0x784880  	MOV.B	W0, [W1]
;Master.c,422 :: 		InterrupcionP1(0xB1,0xD1,6);                                    //Envia la hora local a la RPi
0x109C	0x20006C  	MOV	#6, W12
0x109E	0xB3CD1B  	MOV.B	#209, W11
0x10A0	0xB3CB1A  	MOV.B	#177, W10
0x10A2	0x07FCF7  	RCALL	_InterrupcionP1
;Master.c,423 :: 		}
L_spi_1104:
;Master.c,404 :: 		if ((banSPI5==1)&&(bufferSPI==0xF5)){
L__spi_1215:
L__spi_1214:
;Master.c,428 :: 		if ((banSetReloj==1)&&(bufferSPI==0xA6)){
0x10A4	0x2124C0  	MOV	#lo_addr(_banSetReloj), W0
0x10A6	0x784010  	MOV.B	[W0], W0
0x10A8	0xE10461  	CP.B	W0, #1
0x10AA	0x3A000D  	BRA NZ	L__spi_1217
L__spi_1318:
0x10AC	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x10AE	0x784090  	MOV.B	[W0], W1
0x10B0	0xB3CA60  	MOV.B	#166, W0
0x10B2	0xE10C00  	CP.B	W1, W0
0x10B4	0x3A0008  	BRA NZ	L__spi_1216
L__spi_1319:
L__spi_1165:
;Master.c,429 :: 		banSPI6 = 1;
0x10B6	0x212601  	MOV	#lo_addr(_banSPI6), W1
0x10B8	0xB3C010  	MOV.B	#1, W0
0x10BA	0x784880  	MOV.B	W0, [W1]
;Master.c,430 :: 		j = 0;
0x10BC	0xEF2000  	CLR	W0
0x10BE	0x8892B0  	MOV	W0, _j
;Master.c,431 :: 		SPI1BUF = fuenteReloj;                                                  //Envia el indicador de fuente de reloj (0:RTC, 1:GPS)
0x10C0	0x2124B0  	MOV	#lo_addr(_fuenteReloj), W0
0x10C2	0xFB8010  	ZE	[W0], W0
0x10C4	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,428 :: 		if ((banSetReloj==1)&&(bufferSPI==0xA6)){
L__spi_1217:
L__spi_1216:
;Master.c,433 :: 		if ((banSPI6==1)&&(bufferSPI!=0xA6)&&(bufferSPI!=0xF6)){
0x10C6	0x212600  	MOV	#lo_addr(_banSPI6), W0
0x10C8	0x784010  	MOV.B	[W0], W0
0x10CA	0xE10461  	CP.B	W0, #1
0x10CC	0x3A0013  	BRA NZ	L__spi_1220
L__spi_1320:
0x10CE	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x10D0	0x784090  	MOV.B	[W0], W1
0x10D2	0xB3CA60  	MOV.B	#166, W0
0x10D4	0xE10C00  	CP.B	W1, W0
0x10D6	0x32000E  	BRA Z	L__spi_1219
L__spi_1321:
0x10D8	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x10DA	0x784090  	MOV.B	[W0], W1
0x10DC	0xB3CF60  	MOV.B	#246, W0
0x10DE	0xE10C00  	CP.B	W1, W0
0x10E0	0x320009  	BRA Z	L__spi_1218
L__spi_1322:
L__spi_1164:
;Master.c,434 :: 		SPI1BUF = tiempo[j];
0x10E2	0x212141  	MOV	#lo_addr(_tiempo), W1
0x10E4	0x212560  	MOV	#lo_addr(_j), W0
0x10E6	0x408010  	ADD	W1, [W0], W0
0x10E8	0x784010  	MOV.B	[W0], W0
0x10EA	0xFB8000  	ZE	W0, W0
0x10EC	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,435 :: 		j++;
0x10EE	0x200011  	MOV	#1, W1
0x10F0	0x212560  	MOV	#lo_addr(_j), W0
0x10F2	0x408810  	ADD	W1, [W0], [W0]
;Master.c,433 :: 		if ((banSPI6==1)&&(bufferSPI!=0xA6)&&(bufferSPI!=0xF6)){
L__spi_1220:
L__spi_1219:
L__spi_1218:
;Master.c,437 :: 		if ((banSPI6==1)&&(bufferSPI==0xF6)){
0x10F4	0x212600  	MOV	#lo_addr(_banSPI6), W0
0x10F6	0x784010  	MOV.B	[W0], W0
0x10F8	0xE10461  	CP.B	W0, #1
0x10FA	0x3A000B  	BRA NZ	L__spi_1222
L__spi_1323:
0x10FC	0x212200  	MOV	#lo_addr(_bufferSPI), W0
0x10FE	0x784090  	MOV.B	[W0], W1
0x1100	0xB3CF60  	MOV.B	#246, W0
0x1102	0xE10C00  	CP.B	W1, W0
0x1104	0x3A0006  	BRA NZ	L__spi_1221
L__spi_1324:
L__spi_1163:
;Master.c,438 :: 		banSPI6 = 0;
0x1106	0x212601  	MOV	#lo_addr(_banSPI6), W1
0x1108	0xEF2000  	CLR	W0
0x110A	0x784880  	MOV.B	W0, [W1]
;Master.c,439 :: 		banSetReloj = 0;                                                        //Limpia la bandera de lectura
0x110C	0x2124C1  	MOV	#lo_addr(_banSetReloj), W1
0x110E	0xEF2000  	CLR	W0
0x1110	0x784880  	MOV.B	W0, [W1]
;Master.c,437 :: 		if ((banSPI6==1)&&(bufferSPI==0xF6)){
L__spi_1222:
L__spi_1221:
;Master.c,443 :: 		}
L_end_spi_1:
0x1112	0x7806CF  	POP	W13
0x1114	0x78064F  	POP	W12
0x1116	0x7805CF  	POP	W11
0x1118	0x78054F  	POP	W10
0x111A	0x2001A0  	MOV	#26, W0
0x111C	0x09000C  	REPEAT	#12
0x111E	0x78104F  	POP	[W0--]
0x1120	0x78004F  	POP	W0
0x1122	0xF90036  	POP	RCOUNT
0x1124	0xF90032  	POP	DSRPAG
0x1126	0xF90034  	POP	DSWPAG
0x1128	0x064000  	RETFIE
; end of _spi_1
_RecuperarHoraRPI:
0x0806	0xFA0004  	LNK	#4
;tiempo_rpi.c,21 :: 		unsigned long RecuperarHoraRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,25 :: 		horaRPi = ((long)tramaTiempoRpi[3]*3600)+((long)tramaTiempoRpi[4]*60)+((long)tramaTiempoRpi[5]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0808	0x450063  	ADD	W10, #3, W0
0x080A	0xFB8010  	ZE	[W0], W0
0x080C	0xEB0080  	CLR	W1
0x080E	0x20E102  	MOV	#3600, W2
0x0810	0x200003  	MOV	#0, W3
0x0812	0x07FE37  	RCALL	__Multiply_32x32
0x0814	0x980700  	MOV	W0, [W14+0]
0x0816	0x980711  	MOV	W1, [W14+2]
0x0818	0x450064  	ADD	W10, #4, W0
0x081A	0xFB8010  	ZE	[W0], W0
0x081C	0xEB0080  	CLR	W1
0x081E	0x2003C2  	MOV	#60, W2
0x0820	0x200003  	MOV	#0, W3
0x0822	0x07FE2F  	RCALL	__Multiply_32x32
0x0824	0x90010E  	MOV	[W14+0], W2
0x0826	0x90019E  	MOV	[W14+2], W3
0x0828	0x410100  	ADD	W2, W0, W2
0x082A	0x498181  	ADDC	W3, W1, W3
0x082C	0x450065  	ADD	W10, #5, W0
0x082E	0xFB8010  	ZE	[W0], W0
0x0830	0xEB0080  	CLR	W1
0x0832	0x410000  	ADD	W2, W0, W0
0x0834	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,27 :: 		return horaRPi;
;tiempo_rpi.c,29 :: 		}
L_end_RecuperarHoraRPI:
0x0836	0xFA8000  	ULNK
0x0838	0x060000  	RETURN
; end of _RecuperarHoraRPI
_RecuperarFechaRPI:
0x07D4	0xFA0004  	LNK	#4
;tiempo_rpi.c,10 :: 		unsigned long RecuperarFechaRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,14 :: 		fechaRPi = ((long)tramaTiempoRpi[0]*10000)+((long)tramaTiempoRpi[1]*100)+((long)tramaTiempoRpi[2]);      //10000*aa + 100*mm + dd
0x07D6	0xFB801A  	ZE	[W10], W0
0x07D8	0xEB0080  	CLR	W1
0x07DA	0x227102  	MOV	#10000, W2
0x07DC	0x200003  	MOV	#0, W3
0x07DE	0x07FE51  	RCALL	__Multiply_32x32
0x07E0	0x980700  	MOV	W0, [W14+0]
0x07E2	0x980711  	MOV	W1, [W14+2]
0x07E4	0x450061  	ADD	W10, #1, W0
0x07E6	0xFB8010  	ZE	[W0], W0
0x07E8	0xEB0080  	CLR	W1
0x07EA	0x200642  	MOV	#100, W2
0x07EC	0x200003  	MOV	#0, W3
0x07EE	0x07FE49  	RCALL	__Multiply_32x32
0x07F0	0x90010E  	MOV	[W14+0], W2
0x07F2	0x90019E  	MOV	[W14+2], W3
0x07F4	0x410100  	ADD	W2, W0, W2
0x07F6	0x498181  	ADDC	W3, W1, W3
0x07F8	0x450062  	ADD	W10, #2, W0
0x07FA	0xFB8010  	ZE	[W0], W0
0x07FC	0xEB0080  	CLR	W1
0x07FE	0x410000  	ADD	W2, W0, W0
0x0800	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,16 :: 		return fechaRPi;
;tiempo_rpi.c,18 :: 		}
L_end_RecuperarFechaRPI:
0x0802	0xFA8000  	ULNK
0x0804	0x060000  	RETURN
; end of _RecuperarFechaRPI
_AjustarTiempoSistema:
0x072E	0xFA000E  	LNK	#14
;tiempo_rtc.c,253 :: 		void AjustarTiempoSistema(unsigned long longHora, unsigned long longFecha, unsigned short *tramaTiempoSistema){
0x0730	0x97B84E  	MOV	[W14-8], W0
0x0732	0x9FBF40  	MOV	W0, [W14-8]
;tiempo_rtc.c,262 :: 		hora = (short)(longHora / 3600);
0x0734	0xBE9F8C  	PUSH.D	W12
0x0736	0xBE9F8A  	PUSH.D	W10
0x0738	0x20E102  	MOV	#3600, W2
0x073A	0x200003  	MOV	#0, W3
0x073C	0xBE000A  	MOV.D	W10, W0
0x073E	0xEB0200  	CLR	W4
0x0740	0x07FDF6  	RCALL	__Divide_32x32
0x0742	0xBE054F  	POP.D	W10
0x0744	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,263 :: 		minuto = (short)((longHora%3600) / 60);
0x0746	0x20E102  	MOV	#3600, W2
0x0748	0x200003  	MOV	#0, W3
0x074A	0xBE000A  	MOV.D	W10, W0
0x074C	0xEB0200  	CLR	W4
0x074E	0x07FDC3  	RCALL	__Modulus_32x32
0x0750	0x980750  	MOV	W0, [W14+10]
0x0752	0x980761  	MOV	W1, [W14+12]
0x0754	0x2003C2  	MOV	#60, W2
0x0756	0x200003  	MOV	#0, W3
0x0758	0xEB0200  	CLR	W4
0x075A	0x07FDE9  	RCALL	__Divide_32x32
0x075C	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,264 :: 		segundo = (short)((longHora%3600) % 60);
0x075E	0x90005E  	MOV	[W14+10], W0
0x0760	0x9000EE  	MOV	[W14+12], W1
0x0762	0x2003C2  	MOV	#60, W2
0x0764	0x200003  	MOV	#0, W3
0x0766	0xEB0200  	CLR	W4
0x0768	0x07FDB6  	RCALL	__Modulus_32x32
0x076A	0xBE064F  	POP.D	W12
0x076C	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,266 :: 		anio = (short)(longFecha / 10000);
0x076E	0xBE9F8C  	PUSH.D	W12
0x0770	0x227102  	MOV	#10000, W2
0x0772	0x200003  	MOV	#0, W3
0x0774	0xBE000C  	MOV.D	W12, W0
0x0776	0xEB0200  	CLR	W4
0x0778	0x07FDDA  	RCALL	__Divide_32x32
0x077A	0xBE064F  	POP.D	W12
0x077C	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,267 :: 		mes = (short)((longFecha%10000) / 100);
0x077E	0x227102  	MOV	#10000, W2
0x0780	0x200003  	MOV	#0, W3
0x0782	0xBE000C  	MOV.D	W12, W0
0x0784	0xEB0200  	CLR	W4
0x0786	0x07FDA7  	RCALL	__Modulus_32x32
0x0788	0x980750  	MOV	W0, [W14+10]
0x078A	0x980761  	MOV	W1, [W14+12]
0x078C	0x200642  	MOV	#100, W2
0x078E	0x200003  	MOV	#0, W3
0x0790	0xEB0200  	CLR	W4
0x0792	0x07FDCD  	RCALL	__Divide_32x32
0x0794	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,268 :: 		dia = (short)((longFecha%10000) % 100);
0x0796	0x90005E  	MOV	[W14+10], W0
0x0798	0x9000EE  	MOV	[W14+12], W1
0x079A	0x200642  	MOV	#100, W2
0x079C	0x200003  	MOV	#0, W3
0x079E	0xEB0200  	CLR	W4
0x07A0	0x07FD9A  	RCALL	__Modulus_32x32
; dia start address is: 4 (W2)
0x07A2	0x784100  	MOV.B	W0, W2
;tiempo_rtc.c,270 :: 		tramaTiempoSistema[0] = anio;
0x07A4	0x97B8CE  	MOV	[W14-8], W1
0x07A6	0x90404E  	MOV.B	[W14+4], W0
0x07A8	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,271 :: 		tramaTiempoSistema[1] = mes;
0x07AA	0x97B84E  	MOV	[W14-8], W0
0x07AC	0x4000E1  	ADD	W0, #1, W1
0x07AE	0x90403E  	MOV.B	[W14+3], W0
0x07B0	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,272 :: 		tramaTiempoSistema[2] = dia;
0x07B2	0x97B84E  	MOV	[W14-8], W0
0x07B4	0xECA000  	INC2	W0
0x07B6	0x784802  	MOV.B	W2, [W0]
; dia end address is: 4 (W2)
;tiempo_rtc.c,273 :: 		tramaTiempoSistema[3] = hora;
0x07B8	0x97B84E  	MOV	[W14-8], W0
0x07BA	0x4000E3  	ADD	W0, #3, W1
0x07BC	0x90400E  	MOV.B	[W14+0], W0
0x07BE	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,274 :: 		tramaTiempoSistema[4] = minuto;
0x07C0	0x97B84E  	MOV	[W14-8], W0
0x07C2	0x4000E4  	ADD	W0, #4, W1
0x07C4	0x90401E  	MOV.B	[W14+1], W0
0x07C6	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,275 :: 		tramaTiempoSistema[5] = segundo;
0x07C8	0x97B84E  	MOV	[W14-8], W0
0x07CA	0x4000E5  	ADD	W0, #5, W1
0x07CC	0x90402E  	MOV.B	[W14+2], W0
0x07CE	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,277 :: 		}
L_end_AjustarTiempoSistema:
0x07D0	0xFA8000  	ULNK
0x07D2	0x060000  	RETURN
; end of _AjustarTiempoSistema
_RecuperarHoraRTC:
0x06B2	0xFA0004  	LNK	#4
;tiempo_rtc.c,128 :: 		unsigned long RecuperarHoraRTC(){
;tiempo_rtc.c,136 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x06B4	0x781F8A  	PUSH	W10
0x06B6	0x781F8B  	PUSH	W11
0x06B8	0x781F8C  	PUSH	W12
0x06BA	0x781F8D  	PUSH	W13
0x06BC	0xEF201A  	CLR	W13
0x06BE	0x2001CC  	MOV	#28, W12
0x06C0	0xEF2016  	CLR	W11
0x06C2	0x20020A  	MOV	#32, W10
0x06C4	0xEF2000  	CLR	W0
0x06C6	0x781F80  	PUSH	W0
0x06C8	0xEF2000  	CLR	W0
0x06CA	0x781F80  	PUSH	W0
0x06CC	0xEF2000  	CLR	W0
0x06CE	0x781F80  	PUSH	W0
0x06D0	0xEF2000  	CLR	W0
0x06D2	0x781F80  	PUSH	W0
0x06D4	0x07FDBD  	RCALL	_SPI2_Init_Advanced
0x06D6	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,138 :: 		valueRead = DS3234_read_byte(Segundos_Lec);
0x06D8	0xEF2014  	CLR	W10
0x06DA	0x07FDE7  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,139 :: 		valueRead = Bcd2Dec(valueRead);
0x06DC	0x784500  	MOV.B	W0, W10
0x06DE	0x07FDAC  	RCALL	_Bcd2Dec
;tiempo_rtc.c,140 :: 		segundo = (long)valueRead;
; segundo start address is: 12 (W6)
0x06E0	0xFB8300  	ZE	W0, W6
0x06E2	0xEB0380  	CLR	W7
;tiempo_rtc.c,141 :: 		valueRead = DS3234_read_byte(Minutos_Lec);
0x06E4	0xB3C01A  	MOV.B	#1, W10
0x06E6	0x07FDE1  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,142 :: 		valueRead = Bcd2Dec(valueRead);
0x06E8	0x784500  	MOV.B	W0, W10
0x06EA	0x07FDA6  	RCALL	_Bcd2Dec
;tiempo_rtc.c,143 :: 		minuto = (long)valueRead;
; minuto start address is: 16 (W8)
0x06EC	0xFB8400  	ZE	W0, W8
0x06EE	0xEB0480  	CLR	W9
;tiempo_rtc.c,144 :: 		valueRead = 0x1F & DS3234_read_byte(Horas_Lec);
0x06F0	0xB3C02A  	MOV.B	#2, W10
0x06F2	0x07FDDB  	RCALL	_DS3234_read_byte
0x06F4	0xFB8000  	ZE	W0, W0
0x06F6	0x60007F  	AND	W0, #31, W0
;tiempo_rtc.c,145 :: 		valueRead = Bcd2Dec(valueRead);
0x06F8	0x784500  	MOV.B	W0, W10
0x06FA	0x07FD9E  	RCALL	_Bcd2Dec
;tiempo_rtc.c,146 :: 		hora = (long)valueRead;
0x06FC	0xFB8000  	ZE	W0, W0
0x06FE	0xEB0080  	CLR	W1
;tiempo_rtc.c,148 :: 		horaRTC = (hora*3600)+(minuto*60)+(segundo);                               //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0700	0x20E102  	MOV	#3600, W2
0x0702	0x200003  	MOV	#0, W3
0x0704	0x07FEBE  	RCALL	__Multiply_32x32
0x0706	0x980700  	MOV	W0, [W14+0]
0x0708	0x980711  	MOV	W1, [W14+2]
0x070A	0xBE0008  	MOV.D	W8, W0
0x070C	0x2003C2  	MOV	#60, W2
0x070E	0x200003  	MOV	#0, W3
0x0710	0x07FEB8  	RCALL	__Multiply_32x32
; minuto end address is: 16 (W8)
0x0712	0x90010E  	MOV	[W14+0], W2
0x0714	0x90019E  	MOV	[W14+2], W3
0x0716	0x410000  	ADD	W2, W0, W0
0x0718	0x498081  	ADDC	W3, W1, W1
; horaRTC start address is: 4 (W2)
0x071A	0x400106  	ADD	W0, W6, W2
0x071C	0x488187  	ADDC	W1, W7, W3
; segundo end address is: 12 (W6)
;tiempo_rtc.c,150 :: 		SPI2_Init();
0x071E	0x07FFB5  	RCALL	_SPI2_Init
;tiempo_rtc.c,152 :: 		return horaRTC;
0x0720	0xBE0002  	MOV.D	W2, W0
; horaRTC end address is: 4 (W2)
;tiempo_rtc.c,154 :: 		}
;tiempo_rtc.c,152 :: 		return horaRTC;
;tiempo_rtc.c,154 :: 		}
L_end_RecuperarHoraRTC:
0x0722	0x7806CF  	POP	W13
0x0724	0x78064F  	POP	W12
0x0726	0x7805CF  	POP	W11
0x0728	0x78054F  	POP	W10
0x072A	0xFA8000  	ULNK
0x072C	0x060000  	RETURN
; end of _RecuperarHoraRTC
_DS3234_read_byte:
;tiempo_rtc.c,75 :: 		unsigned char DS3234_read_byte(unsigned char address){
;tiempo_rtc.c,77 :: 		unsigned char value = 0x00;
0x02AA	0x781F8A  	PUSH	W10
;tiempo_rtc.c,78 :: 		CS_DS3234 = 0;
0x02AC	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,79 :: 		SPI2_Write(address);
0x02AE	0xFB850A  	ZE	W10, W10
0x02B0	0x07FFBC  	RCALL	_SPI2_Write
;tiempo_rtc.c,80 :: 		value = SPI2_Read(0);
0x02B2	0xEF2014  	CLR	W10
0x02B4	0x07FFA5  	RCALL	_SPI2_Read
;tiempo_rtc.c,81 :: 		CS_DS3234 = 1;
0x02B6	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
L_end_DS3234_read_byte:
0x02B8	0x78054F  	POP	W10
0x02BA	0x060000  	RETURN
; end of _DS3234_read_byte
_Bcd2Dec:
0x0238	0xFA0000  	LNK	#0
;__Lib_Conversions.c,319 :: 		
;__Lib_Conversions.c,320 :: 		
;__Lib_Conversions.c,322 :: 		
0x023A	0xFB800A  	ZE	W10, W0
0x023C	0xDE0044  	LSR	W0, #4, W0
0x023E	0xFB8080  	ZE	W0, W1
0x0240	0x2000A0  	MOV	#10, W0
0x0242	0xB80A00  	MUL.UU	W1, W0, W4
;__Lib_Conversions.c,323 :: 		
0x0244	0xFB800A  	ZE	W10, W0
0x0246	0x60016F  	AND	W0, #15, W2
0x0248	0xFB8004  	ZE	W4, W0
0x024A	0x400002  	ADD	W0, W2, W0
;__Lib_Conversions.c,324 :: 		
;__Lib_Conversions.c,325 :: 		
L_end_Bcd2Dec:
0x024C	0xFA8000  	ULNK
0x024E	0x060000  	RETURN
; end of _Bcd2Dec
_RecuperarFechaRTC:
0x0B52	0xFA0004  	LNK	#4
;tiempo_rtc.c,157 :: 		unsigned long RecuperarFechaRTC(){
;tiempo_rtc.c,165 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0B54	0x781F8A  	PUSH	W10
0x0B56	0x781F8B  	PUSH	W11
0x0B58	0x781F8C  	PUSH	W12
0x0B5A	0x781F8D  	PUSH	W13
0x0B5C	0xEF201A  	CLR	W13
0x0B5E	0x2001CC  	MOV	#28, W12
0x0B60	0xEF2016  	CLR	W11
0x0B62	0x20020A  	MOV	#32, W10
0x0B64	0xEF2000  	CLR	W0
0x0B66	0x781F80  	PUSH	W0
0x0B68	0xEF2000  	CLR	W0
0x0B6A	0x781F80  	PUSH	W0
0x0B6C	0xEF2000  	CLR	W0
0x0B6E	0x781F80  	PUSH	W0
0x0B70	0xEF2000  	CLR	W0
0x0B72	0x781F80  	PUSH	W0
0x0B74	0x07FB6D  	RCALL	_SPI2_Init_Advanced
0x0B76	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,167 :: 		valueRead = DS3234_read_byte(DiaMes_Lec);
0x0B78	0xB3C04A  	MOV.B	#4, W10
0x0B7A	0x07FB97  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,168 :: 		valueRead = Bcd2Dec(valueRead);
0x0B7C	0x784500  	MOV.B	W0, W10
0x0B7E	0x07FB5C  	RCALL	_Bcd2Dec
;tiempo_rtc.c,169 :: 		dia = (long)valueRead;
; dia start address is: 12 (W6)
0x0B80	0xFB8300  	ZE	W0, W6
0x0B82	0xEB0380  	CLR	W7
;tiempo_rtc.c,170 :: 		valueRead = 0x1F & DS3234_read_byte(Mes_Lec);
0x0B84	0xB3C05A  	MOV.B	#5, W10
0x0B86	0x07FB91  	RCALL	_DS3234_read_byte
0x0B88	0xFB8000  	ZE	W0, W0
0x0B8A	0x60007F  	AND	W0, #31, W0
;tiempo_rtc.c,171 :: 		valueRead = Bcd2Dec(valueRead);
0x0B8C	0x784500  	MOV.B	W0, W10
0x0B8E	0x07FB54  	RCALL	_Bcd2Dec
;tiempo_rtc.c,172 :: 		mes = (long)valueRead;
; mes start address is: 16 (W8)
0x0B90	0xFB8400  	ZE	W0, W8
0x0B92	0xEB0480  	CLR	W9
;tiempo_rtc.c,173 :: 		valueRead = DS3234_read_byte(Anio_Lec);
0x0B94	0xB3C06A  	MOV.B	#6, W10
0x0B96	0x07FB89  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,174 :: 		valueRead = Bcd2Dec(valueRead);
0x0B98	0x784500  	MOV.B	W0, W10
0x0B9A	0x07FB4E  	RCALL	_Bcd2Dec
;tiempo_rtc.c,175 :: 		anio = (long)valueRead;
0x0B9C	0xFB8000  	ZE	W0, W0
0x0B9E	0xEB0080  	CLR	W1
;tiempo_rtc.c,177 :: 		fechaRTC = (anio*10000)+(mes*100)+(dia);                                   //10000*aa + 100*mm + dd
0x0BA0	0x227102  	MOV	#10000, W2
0x0BA2	0x200003  	MOV	#0, W3
0x0BA4	0x07FC6E  	RCALL	__Multiply_32x32
0x0BA6	0x980700  	MOV	W0, [W14+0]
0x0BA8	0x980711  	MOV	W1, [W14+2]
0x0BAA	0xBE0008  	MOV.D	W8, W0
0x0BAC	0x200642  	MOV	#100, W2
0x0BAE	0x200003  	MOV	#0, W3
0x0BB0	0x07FC68  	RCALL	__Multiply_32x32
; mes end address is: 16 (W8)
0x0BB2	0x90010E  	MOV	[W14+0], W2
0x0BB4	0x90019E  	MOV	[W14+2], W3
0x0BB6	0x410000  	ADD	W2, W0, W0
0x0BB8	0x498081  	ADDC	W3, W1, W1
; fechaRTC start address is: 4 (W2)
0x0BBA	0x400106  	ADD	W0, W6, W2
0x0BBC	0x488187  	ADDC	W1, W7, W3
; dia end address is: 12 (W6)
;tiempo_rtc.c,179 :: 		SPI2_Init();
0x0BBE	0x07FD65  	RCALL	_SPI2_Init
;tiempo_rtc.c,181 :: 		return fechaRTC;
0x0BC0	0xBE0002  	MOV.D	W2, W0
; fechaRTC end address is: 4 (W2)
;tiempo_rtc.c,183 :: 		}
;tiempo_rtc.c,181 :: 		return fechaRTC;
;tiempo_rtc.c,183 :: 		}
L_end_RecuperarFechaRTC:
0x0BC2	0x7806CF  	POP	W13
0x0BC4	0x78064F  	POP	W12
0x0BC6	0x7805CF  	POP	W11
0x0BC8	0x78054F  	POP	W10
0x0BCA	0xFA8000  	ULNK
0x0BCC	0x060000  	RETURN
; end of _RecuperarFechaRTC
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [24]    _SPI2_Read
0x0218       [4]    _Get_Fosc_Per_Cyc
0x021C      [14]    _Delay_100ms
0x022A       [8]    _SPI2_Write
0x0232       [6]    _Get_Fosc_kHz
0x0238      [24]    _Bcd2Dec
0x0250      [46]    _SPI2_Init_Advanced
0x027E      [18]    _DS3234_write_byte
0x0290      [14]    _UART1_Write
0x029E      [12]    _UART2_Tx_Idle
0x02AA      [18]    _DS3234_read_byte
0x02BC      [12]    _UART1_Tx_Idle
0x02C8      [14]    _UART2_Write
0x02D6      [88]    __Modulus_32x32
0x032E      [82]    __Divide_32x32
0x0380     [258]    _UART1_Init
0x0482      [18]    __Multiply_32x32
0x0494     [456]    _UART2_Init_Advanced
0x065C      [46]    _SPI1_Init_Advanced
0x068A      [40]    _SPI2_Init
0x06B2     [124]    _RecuperarHoraRTC
0x072E     [166]    _AjustarTiempoSistema
0x07D4      [50]    _RecuperarFechaRPI
0x0806      [52]    _RecuperarHoraRPI
0x083A     [434]    _ConfiguracionPrincipal
0x09EC     [166]    _EnviarTramaRS485
0x0A92     [132]    _InterrupcionP1
0x0B16      [60]    _DS3234_init
0x0B52     [124]    _RecuperarFechaRTC
0x0BCE     [300]    _urx_2
0x0CFA     [234]    _main
0x0DE4     [838]    _spi_1
0x112A     [100]    _int_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0232       [2]    U2STAbits
0x084E       [2]    IPC7bits
0x0240       [2]    SPI1STAT
0x0822       [0]    U2RXIE_bit
0x0222       [2]    U1STAbits
0x06C6       [1]    RPINR19bits
0x0682       [2]    RPOR1bits
0x0800       [0]    SPI1IF_bit
0x0802       [0]    INT1IF_bit
0x084A       [1]    IPC5bits
0x0820       [0]    SPI1IE_bit
0x06A0       [2]    RPINR0
0x06CC       [2]    RPINR22bits
0x0684       [2]    RPOR2bits
0x0260       [2]    SPI2STAT
0x0844       [2]    IPC2bits
0x0E00       [0]    RP1_Direction
0x0E00       [0]    TRISA4_bit
0x0E10       [0]    MSRS485_Direction
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    INT_SINC3_Direction
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    INT_SINC4_Direction
0x0E10       [0]    TRISB11_bit
0x0680       [2]    RPOR0bits
0x0820       [0]    U1RXIE_bit
0x0800       [0]    U1RXIF_bit
0x06C4       [1]    RPINR18bits
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB14_bit
0x08C2       [2]    INTCON2
0x0802       [0]    U2RXIF_bit
0x0236       [2]    U2RXREG
0x1000     [512]    _inputPyloadRS485
0x1200      [10]    _tramaSolicitudSPI
0x120A      [10]    _outputPyloadRS485
0x1214       [6]    _tiempo
0x121A       [2]    _ptrnumBytesSPI
0x121C       [4]    _tramaCabeceraRS485
0x1220       [1]    _bufferSPI
0x1221      [10]    _tramaSolicitudNodo
0x122B       [6]    _tiempoRPI
0x1231       [1]    _banInicio
0x1232       [1]    _direccionRS485
0x0234       [2]    U2TXREG
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x0268       [2]    SPI2BUF
0x0242       [2]    SPI1CON
0x1234       [2]    _UART_Wr_Ptr
0x1236       [2]    _SPI_Wr_Ptr
0x0822       [0]    INT1IE_bit
0x0262       [2]    SPI2CON
0x1238       [2]    _SPI_Rd_Ptr
0x123A       [2]    _UART_Rd_Ptr
0x0238       [2]    U2BRG
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0232       [2]    U2STA
0x123C       [2]    _UART_Rdy_Ptr
0x123E       [2]    _UART_Tx_Idle_Ptr
0x0230       [2]    U2MODE
0x1233       [1]    _banTIGPS
0x1240       [1]    _banTFGPS
0x1241       [1]    _banTCGPS
0x1242       [1]    _byteGPS
0x1243       [1]    _banSPI9
0x1244       [1]    _banSPIA
0x1246       [2]    _i_gps
0x1245       [1]    _banSetGPS
0x1248       [1]    _referenciaTiempo
0x1249       [1]    _banRSI
0x124A       [1]    _banRSC
0x124B       [1]    _fuenteReloj
0x124C       [1]    _banSetReloj
0x124E       [4]    _horaSistema
0x1252       [4]    _fechaSistema
0x124D       [1]    _banSPI8
0x1256       [2]    _j
0x1258       [2]    _x
0x125A       [2]    _y
0x125C       [2]    _i
0x0E14       [0]    LATB11_bit
0x0E04       [0]    CS_DS3234
0x0E04       [0]    LATA2_bit
0x125E       [1]    _banSPI0
0x125F       [1]    _banSPI5
0x1260       [1]    _banSPI6
0x1261       [1]    _banSPI7
0x1262       [1]    _banSPI4
0x1263       [1]    _banSPI1
0x1264       [1]    _banSPI2
0x1265       [1]    _banSPI3
0x0744       [2]    CLKDIVbits
0x0746       [2]    PLLFBDbits
0x0E0E       [2]    ANSELA
0x0248       [2]    SPI1BUF
0x0E14       [0]    INT_SINC4
0x0E14       [0]    LATB12_bit
0x0E14       [0]    MSRS485
0x0E1E       [2]    ANSELB
0x0E00       [0]    TRISA0_bit
0x0E00       [0]    INT_SINC2_Direction
0x0E00       [0]    TRISA3_bit
0x0E00       [0]    INT_SINC1_Direction
0x0E00       [0]    TRISA2_bit
0x0E00       [0]    INT_SINC_Direction
0x0E00       [0]    TRISA1_bit
0x0E14       [0]    LATB10_bit
0x1266       [1]    _subFuncionRS485
0x1267       [1]    _banInicioMuestreo
0x0E04       [0]    RP1
0x1268       [1]    _funcionRS485
0x1269       [1]    _byteRS485
0x126A       [2]    _i_rs485
0x126C       [1]    _numDatosRS485
0x0E04       [0]    LATA4_bit
0x0E04       [0]    INT_SINC2
0x0E04       [0]    LATA3_bit
0x0E14       [0]    INT_SINC3
0x0E04       [0]    LATA0_bit
0x0E04       [0]    INT_SINC
0x0E04       [0]    LATA1_bit
0x0E04       [0]    INT_SINC1
0x0014       [2]    FARG_SPI2_Read_buffer
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x0014       [2]    FARG_SPI2_Write_data_out
0x0230       [2]    U2MODE
0x0232       [2]    U2STA
0x0234       [2]    U2TXREG
0x0236       [2]    U2RXREG
0x0014       [1]    FARG_Bcd2Dec_bcdnum
0x0238       [2]    U2BRG
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_SPI2_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI2_Init_Advanced_mode16
0x0018       [2]    FARG_SPI2_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI2_Init_Advanced_pri_prescaler
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [1]    FARG_DS3234_write_byte_address
0x0016       [1]    FARG_DS3234_write_byte_value
0x0014       [2]    FARG_UART1_Write__data
0x0014       [1]    FARG_DS3234_read_byte_address
0x0014       [2]    FARG_UART2_Write__data
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [4]    FARG_UART2_Init_Advanced_baud_rate
0x0018       [2]    FARG_UART2_Init_Advanced_parity
0x001A       [2]    FARG_UART2_Init_Advanced_stop_bits
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x06A0       [2]    RPINR0
0x0014       [4]    FARG_AjustarTiempoSistema_longHora
0x0018       [4]    FARG_AjustarTiempoSistema_longFecha
0x0014       [2]    FARG_RecuperarFechaRPI_tramaTiempoRpi
0x0014       [2]    FARG_RecuperarHoraRPI_tramaTiempoRpi
0x08C2       [2]    INTCON2
0x0014       [1]    FARG_EnviarTramaRS485_puertoUART
0x0016       [1]    FARG_EnviarTramaRS485_direccion
0x0018       [1]    FARG_EnviarTramaRS485_funcion
0x001A       [1]    FARG_EnviarTramaRS485_subfuncion
0x0014       [1]    FARG_InterrupcionP1_funcionSPI
0x0016       [1]    FARG_InterrupcionP1_subFuncionSPI
0x0018       [2]    FARG_InterrupcionP1_numBytesSPI
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Label List: ** 
//----------------------------------------------
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_GPS_init27
  L_GPS_init29
  L_EnviarTramaRS48531
  L_EnviarTramaRS48532
  L_EnviarTramaRS48533
  L_EnviarTramaRS48534
  L_EnviarTramaRS48535
  L_EnviarTramaRS48536
  L_EnviarTramaRS48537
  L_EnviarTramaRS48538
  L_EnviarTramaRS48539
  L_EnviarTramaRS48540
  L_EnviarTramaRS48541
  L_EnviarTramaRS48542
  L_main43
  L_main44
  L_ConfiguracionPrincipal45
  L_InterrupcionP147
  L_InterrupcionP148
  L_InterrupcionP149
  L_InterrupcionP150
  L_InterrupcionP151
  L_InterrupcionP152
  L_InterrupcionP153
  L_InterrupcionP154
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_int_1114
  L_int_1116
  L_int_1117
  L_urx_2118
  L_urx_2119
  L_urx_2120
  L_urx_2121
  L_urx_2122
  L_urx_2123
  L_urx_2124
  L_urx_2125
  L_urx_2126
  L_urx_2127
  L_urx_2128
  L_urx_2129
  L_urx_2130
  L_urx_2131
  L_urx_2132
  L_urx_2133
  L_urx_2134
  L_urx_2135
  L_urx_2136
  L_urx_2137
  L_urx_2138
  L__IncrementarFecha139
  L__IncrementarFecha140
  L__IncrementarFecha141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__EnviarTramaRS485159
  L__InterrupcionP1160
  L__InterrupcionP1161
  L__InterrupcionP1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__urx_2223
  L__urx_2224
  L__urx_2225
  L__urx_2226
  L__urx_2227
  L__urx_2228
  L__urx_2229
  L__urx_2230
  L__urx_2231
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L__IncrementarFecha250
  L__IncrementarFecha251
  L__IncrementarFecha252
  L__IncrementarFecha253
  L__IncrementarFecha254
  L__IncrementarFecha255
  L__IncrementarFecha256
  L__IncrementarFecha257
  L__IncrementarFecha258
  L__IncrementarFecha259
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485267
  L__EnviarTramaRS485268
  L__EnviarTramaRS485269
  L__EnviarTramaRS485270
  L__EnviarTramaRS485271
  L__EnviarTramaRS485272
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L__InterrupcionP1277
  L__InterrupcionP1278
  L__InterrupcionP1279
  L_end_spi_1
  _spi_1
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L_end_int_1
  _int_1
  L__int_1326
  L__int_1327
  L_end_urx_2
  _urx_2
  L__urx_2329
  L__urx_2330
  L__urx_2331
  L__urx_2332
  L__urx_2333
  L__urx_2334
  L__urx_2335
  L__urx_2336
  L__urx_2337
  L__urx_2338
  L__urx_2339
  L__urx_2340
  L__urx_2341
  L__urx_2342
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_GPS_init27
  L_GPS_init29
  L_EnviarTramaRS48531
  L_EnviarTramaRS48532
  L_EnviarTramaRS48533
  L_EnviarTramaRS48534
  L_EnviarTramaRS48535
  L_EnviarTramaRS48536
  L_EnviarTramaRS48537
  L_EnviarTramaRS48538
  L_EnviarTramaRS48539
  L_EnviarTramaRS48540
  L_EnviarTramaRS48541
  L_EnviarTramaRS48542
  L_main43
  L_main44
  L_ConfiguracionPrincipal45
  L_InterrupcionP147
  L_InterrupcionP148
  L_InterrupcionP149
  L_InterrupcionP150
  L_InterrupcionP151
  L_InterrupcionP152
  L_InterrupcionP153
  L_InterrupcionP154
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_int_1114
  L_int_1116
  L_int_1117
  L_urx_2118
  L_urx_2119
  L_urx_2120
  L_urx_2121
  L_urx_2122
  L_urx_2123
  L_urx_2124
  L_urx_2125
  L_urx_2126
  L_urx_2127
  L_urx_2128
  L_urx_2129
  L_urx_2130
  L_urx_2131
  L_urx_2132
  L_urx_2133
  L_urx_2134
  L_urx_2135
  L_urx_2136
  L_urx_2137
  L_urx_2138
  L__IncrementarFecha139
  L__IncrementarFecha140
  L__IncrementarFecha141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__EnviarTramaRS485159
  L__InterrupcionP1160
  L__InterrupcionP1161
  L__InterrupcionP1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__urx_2223
  L__urx_2224
  L__urx_2225
  L__urx_2226
  L__urx_2227
  L__urx_2228
  L__urx_2229
  L__urx_2230
  L__urx_2231
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L__IncrementarFecha250
  L__IncrementarFecha251
  L__IncrementarFecha252
  L__IncrementarFecha253
  L__IncrementarFecha254
  L__IncrementarFecha255
  L__IncrementarFecha256
  L__IncrementarFecha257
  L__IncrementarFecha258
  L__IncrementarFecha259
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485267
  L__EnviarTramaRS485268
  L__EnviarTramaRS485269
  L__EnviarTramaRS485270
  L__EnviarTramaRS485271
  L__EnviarTramaRS485272
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L__InterrupcionP1277
  L__InterrupcionP1278
  L__InterrupcionP1279
  L_end_spi_1
  _spi_1
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L_end_int_1
  _int_1
  L__int_1326
  L__int_1327
  L_end_urx_2
  _urx_2
  L__urx_2329
  L__urx_2330
  L__urx_2331
  L__urx_2332
  L__urx_2333
  L__urx_2334
  L__urx_2335
  L__urx_2336
  L__urx_2337
  L__urx_2338
  L__urx_2339
  L__urx_2340
  L__urx_2341
  L__urx_2342
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_GPS_init27
  L_GPS_init29
  L_EnviarTramaRS48531
  L_EnviarTramaRS48532
  L_EnviarTramaRS48533
  L_EnviarTramaRS48534
  L_EnviarTramaRS48535
  L_EnviarTramaRS48536
  L_EnviarTramaRS48537
  L_EnviarTramaRS48538
  L_EnviarTramaRS48539
  L_EnviarTramaRS48540
  L_EnviarTramaRS48541
  L_EnviarTramaRS48542
  L_main43
  L_main44
  L_ConfiguracionPrincipal45
  L_InterrupcionP147
  L_InterrupcionP148
  L_InterrupcionP149
  L_InterrupcionP150
  L_InterrupcionP151
  L_InterrupcionP152
  L_InterrupcionP153
  L_InterrupcionP154
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_int_1114
  L_int_1116
  L_int_1117
  L_urx_2118
  L_urx_2119
  L_urx_2120
  L_urx_2121
  L_urx_2122
  L_urx_2123
  L_urx_2124
  L_urx_2125
  L_urx_2126
  L_urx_2127
  L_urx_2128
  L_urx_2129
  L_urx_2130
  L_urx_2131
  L_urx_2132
  L_urx_2133
  L_urx_2134
  L_urx_2135
  L_urx_2136
  L_urx_2137
  L_urx_2138
  L__IncrementarFecha139
  L__IncrementarFecha140
  L__IncrementarFecha141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__EnviarTramaRS485159
  L__InterrupcionP1160
  L__InterrupcionP1161
  L__InterrupcionP1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__urx_2223
  L__urx_2224
  L__urx_2225
  L__urx_2226
  L__urx_2227
  L__urx_2228
  L__urx_2229
  L__urx_2230
  L__urx_2231
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L__IncrementarFecha250
  L__IncrementarFecha251
  L__IncrementarFecha252
  L__IncrementarFecha253
  L__IncrementarFecha254
  L__IncrementarFecha255
  L__IncrementarFecha256
  L__IncrementarFecha257
  L__IncrementarFecha258
  L__IncrementarFecha259
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485267
  L__EnviarTramaRS485268
  L__EnviarTramaRS485269
  L__EnviarTramaRS485270
  L__EnviarTramaRS485271
  L__EnviarTramaRS485272
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L__InterrupcionP1277
  L__InterrupcionP1278
  L__InterrupcionP1279
  L_end_spi_1
  _spi_1
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L_end_int_1
  _int_1
  L__int_1326
  L__int_1327
  L_end_urx_2
  _urx_2
  L__urx_2329
  L__urx_2330
  L__urx_2331
  L__urx_2332
  L__urx_2333
  L__urx_2334
  L__urx_2335
  L__urx_2336
  L__urx_2337
  L__urx_2338
  L__urx_2339
  L__urx_2340
  L__urx_2341
  L__urx_2342
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_GPS_init27
  L_GPS_init29
  L_EnviarTramaRS48531
  L_EnviarTramaRS48532
  L_EnviarTramaRS48533
  L_EnviarTramaRS48534
  L_EnviarTramaRS48535
  L_EnviarTramaRS48536
  L_EnviarTramaRS48537
  L_EnviarTramaRS48538
  L_EnviarTramaRS48539
  L_EnviarTramaRS48540
  L_EnviarTramaRS48541
  L_EnviarTramaRS48542
  L_main43
  L_main44
  L_ConfiguracionPrincipal45
  L_InterrupcionP147
  L_InterrupcionP148
  L_InterrupcionP149
  L_InterrupcionP150
  L_InterrupcionP151
  L_InterrupcionP152
  L_InterrupcionP153
  L_InterrupcionP154
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_int_1114
  L_int_1116
  L_int_1117
  L_urx_2118
  L_urx_2119
  L_urx_2120
  L_urx_2121
  L_urx_2122
  L_urx_2123
  L_urx_2124
  L_urx_2125
  L_urx_2126
  L_urx_2127
  L_urx_2128
  L_urx_2129
  L_urx_2130
  L_urx_2131
  L_urx_2132
  L_urx_2133
  L_urx_2134
  L_urx_2135
  L_urx_2136
  L_urx_2137
  L_urx_2138
  L__IncrementarFecha139
  L__IncrementarFecha140
  L__IncrementarFecha141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__EnviarTramaRS485159
  L__InterrupcionP1160
  L__InterrupcionP1161
  L__InterrupcionP1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__urx_2223
  L__urx_2224
  L__urx_2225
  L__urx_2226
  L__urx_2227
  L__urx_2228
  L__urx_2229
  L__urx_2230
  L__urx_2231
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L__IncrementarFecha250
  L__IncrementarFecha251
  L__IncrementarFecha252
  L__IncrementarFecha253
  L__IncrementarFecha254
  L__IncrementarFecha255
  L__IncrementarFecha256
  L__IncrementarFecha257
  L__IncrementarFecha258
  L__IncrementarFecha259
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_EnviarTramaRS485
  _EnviarTramaRS485
  L__EnviarTramaRS485267
  L__EnviarTramaRS485268
  L__EnviarTramaRS485269
  L__EnviarTramaRS485270
  L__EnviarTramaRS485271
  L__EnviarTramaRS485272
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L__InterrupcionP1277
  L__InterrupcionP1278
  L__InterrupcionP1279
  L_end_spi_1
  _spi_1
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L_end_int_1
  _int_1
  L__int_1326
  L__int_1327
  L_end_urx_2
  _urx_2
  L__urx_2329
  L__urx_2330
  L__urx_2331
  L__urx_2332
  L__urx_2333
  L__urx_2334
  L__urx_2335
  L__urx_2336
  L__urx_2337
  L__urx_2338
  L__urx_2339
  L__urx_2340
  L__urx_2341
  L__urx_2342
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__ShortToStr98
  L__IntToStr99
  L__LongToStr100
  L__Rtrim101
  L__Rtrim102
  L__Rtrim103
  L__Ltrim104
  L__Ltrim105
  L__Ltrim106
  L__Ltrim107
  L__FloatToStr108
  L__FloatToStr109
  L__FloatToStr110
  L__FloatToStr111
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr119
  L__ByteToStr120
  L_end_WordToStr
  _WordToStr
  L__WordToStr122
  L__WordToStr123
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros125
  L__WordToStrWithZeros126
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr128
  L__ShortToStr129
  L__ShortToStr130
  L__ShortToStr131
  L_end_IntToStr
  _IntToStr
  L__IntToStr133
  L__IntToStr134
  L__IntToStr135
  L__IntToStr136
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros138
  L__IntToStrWithZeros139
  L__IntToStrWithZeros140
  L__IntToStrWithZeros141
  L__IntToStrWithZeros142
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr144
  L__LongWordToStr145
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros147
  L__LongWordToStrWithZeros148
  L_end_LongToStr
  _LongToStr
  L__LongToStr150
  L__LongToStr151
  L__LongToStr152
  L__LongToStr153
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros155
  L__LongIntToStrWithZeros156
  L__LongIntToStrWithZeros157
  L__LongIntToStrWithZeros158
  L__LongIntToStrWithZeros159
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd161
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim166
  L__Rtrim167
  L_end_Ltrim
  _Ltrim
  L__Ltrim169
  L__Ltrim170
  L__Ltrim171
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__FloatToStr189
  L__FloatToStr190
  L__FloatToStr191
