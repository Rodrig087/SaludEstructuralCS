;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 3/2/2020 16:20:17
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0000000408D6  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000A8C  	2700
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000A44  	2628
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x00098C  	2444
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x08D6	0x21A1AF  	MOV	#6682, W15
0x08D8	0x27FFF0  	MOV	#32767, W0
0x08DA	0xB7A020  	MOV	WREG, SPLIM
0x08DC	0x202010  	MOV	#513, W0
0x08DE	0xB7A032  	MOV	WREG, DSRPAG
0x08E0	0x200040  	MOV	#4, W0
0x08E2	0xB72044  	IOR	CORCON
0x08E4	0x000000020C3C  	CALL	3132
;Master.c,72 :: 		void main() {
;Master.c,74 :: 		ConfiguracionPrincipal();
0x08E8	0x07FF05  	RCALL	_ConfiguracionPrincipal
;Master.c,78 :: 		banUTI = 0;
0x08EA	0x21A181  	MOV	#lo_addr(_banUTI), W1
0x08EC	0xEF2000  	CLR	W0
0x08EE	0x784880  	MOV.B	W0, [W1]
;Master.c,79 :: 		banUTC = 0;
0x08F0	0x21A191  	MOV	#lo_addr(_banUTC), W1
0x08F2	0xEF2000  	CLR	W0
0x08F4	0x784880  	MOV.B	W0, [W1]
;Master.c,81 :: 		banLec = 0;
0x08F6	0x21A171  	MOV	#lo_addr(_banLec), W1
0x08F8	0xEF2000  	CLR	W0
0x08FA	0x784880  	MOV.B	W0, [W1]
;Master.c,82 :: 		banEsc = 0;
0x08FC	0x21A101  	MOV	#lo_addr(_banEsc), W1
0x08FE	0xEF2000  	CLR	W0
0x0900	0x784880  	MOV.B	W0, [W1]
;Master.c,83 :: 		banCiclo = 0;
0x0902	0x21A111  	MOV	#lo_addr(_banCiclo), W1
0x0904	0xEF2000  	CLR	W0
0x0906	0x784880  	MOV.B	W0, [W1]
;Master.c,84 :: 		banSetReloj = 0;
0x0908	0x21A0F1  	MOV	#lo_addr(_banSetReloj), W1
0x090A	0xEF2000  	CLR	W0
0x090C	0x784880  	MOV.B	W0, [W1]
;Master.c,85 :: 		banSetGPS = 0;
0x090E	0x21A051  	MOV	#lo_addr(_banSetGPS), W1
0x0910	0xEF2000  	CLR	W0
0x0912	0x784880  	MOV.B	W0, [W1]
;Master.c,86 :: 		banTIGPS = 0;
0x0914	0x21A0E1  	MOV	#lo_addr(_banTIGPS), W1
0x0916	0xEF2000  	CLR	W0
0x0918	0x784880  	MOV.B	W0, [W1]
;Master.c,87 :: 		banTFGPS = 0;
0x091A	0x21A151  	MOV	#lo_addr(_banTFGPS), W1
0x091C	0xEF2000  	CLR	W0
0x091E	0x784880  	MOV.B	W0, [W1]
;Master.c,88 :: 		banTCGPS = 0;
0x0920	0x21A161  	MOV	#lo_addr(_banTCGPS), W1
0x0922	0xEF2000  	CLR	W0
0x0924	0x784880  	MOV.B	W0, [W1]
;Master.c,90 :: 		banMuestrear = 0;                                                          //Inicia el programa con esta bandera en bajo para permitir que la RPi envie la peticion de inicio de muestreo
0x0926	0x21A141  	MOV	#lo_addr(_banMuestrear), W1
0x0928	0xEF2000  	CLR	W0
0x092A	0x784880  	MOV.B	W0, [W1]
;Master.c,91 :: 		banInicio = 0;                                                             //Bandera de inicio de muestreo
0x092C	0x21A121  	MOV	#lo_addr(_banInicio), W1
0x092E	0xEF2000  	CLR	W0
0x0930	0x784880  	MOV.B	W0, [W1]
;Master.c,92 :: 		banLeer = 0;
0x0932	0x21A131  	MOV	#lo_addr(_banLeer), W1
0x0934	0xEF2000  	CLR	W0
0x0936	0x784880  	MOV.B	W0, [W1]
;Master.c,93 :: 		banConf = 0;
0x0938	0x210181  	MOV	#lo_addr(_banConf), W1
0x093A	0xEF2000  	CLR	W0
0x093C	0x784880  	MOV.B	W0, [W1]
;Master.c,95 :: 		i = 0;
0x093E	0xEF2000  	CLR	W0
0x0940	0x8880D0  	MOV	W0, _i
;Master.c,96 :: 		x = 0;
0x0942	0xEF2000  	CLR	W0
0x0944	0x8880B0  	MOV	W0, _x
;Master.c,97 :: 		y = 0;
0x0946	0xEF2000  	CLR	W0
0x0948	0x888090  	MOV	W0, _y
;Master.c,98 :: 		i_gps = 0;
0x094A	0xEF2000  	CLR	W0
0x094C	0x8880A0  	MOV	W0, _i_gps
;Master.c,99 :: 		horaSistema = 0;
0x094E	0xEF2000  	CLR	W0
0x0950	0xEF2002  	CLR	W1
0x0952	0x888100  	MOV	W0, _horaSistema
0x0954	0x888111  	MOV	W1, _horaSistema+2
;Master.c,100 :: 		i_uart = 0;
0x0956	0xEF2000  	CLR	W0
0x0958	0x888120  	MOV	W0, _i_uart
;Master.c,102 :: 		contMuestras = 0;
0x095A	0x2101E1  	MOV	#lo_addr(_contMuestras), W1
0x095C	0xEF2000  	CLR	W0
0x095E	0x784880  	MOV.B	W0, [W1]
;Master.c,103 :: 		contCiclos = 0;
0x0960	0x210191  	MOV	#lo_addr(_contCiclos), W1
0x0962	0xEF2000  	CLR	W0
0x0964	0x784880  	MOV.B	W0, [W1]
;Master.c,104 :: 		contFIFO = 0;
0x0966	0xEF2000  	CLR	W0
0x0968	0x8880E0  	MOV	W0, _contFIFO
;Master.c,105 :: 		numFIFO = 0;
0x096A	0x2100F1  	MOV	#lo_addr(_numFIFO), W1
0x096C	0xEF2000  	CLR	W0
0x096E	0x784880  	MOV.B	W0, [W1]
;Master.c,106 :: 		numSetsFIFO = 0;
0x0970	0x2100D1  	MOV	#lo_addr(_numSetsFIFO), W1
0x0972	0xEF2000  	CLR	W0
0x0974	0x784880  	MOV.B	W0, [W1]
;Master.c,107 :: 		contTimer1 = 0;
0x0976	0x2100E1  	MOV	#lo_addr(_contTimer1), W1
0x0978	0xEF2000  	CLR	W0
0x097A	0x784880  	MOV.B	W0, [W1]
;Master.c,109 :: 		byteGPS = 0;
0x097C	0x2100C1  	MOV	#lo_addr(_byteGPS), W1
0x097E	0xEF2000  	CLR	W0
0x0980	0x784880  	MOV.B	W0, [W1]
;Master.c,111 :: 		RP1 = 0;
0x0982	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,112 :: 		TEST = 1;
0x0984	0xA88E15  	BSET	LATB12_bit, BitPos(LATB12_bit+0)
;Master.c,114 :: 		SPI1BUF = 0x00;
0x0986	0xEF2248  	CLR	SPI1BUF
;Master.c,116 :: 		while(1){
L_main4:
;Master.c,118 :: 		}
0x0988	0x37FFFF  	BRA	L_main4
;Master.c,120 :: 		}
L_end_main:
L__main_end_loop:
0x098A	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Master.c,129 :: 		void ConfiguracionPrincipal(){
;Master.c,132 :: 		CLKDIVbits.FRCDIV = 0;                                                     //FIN=FRC/1
0x06F4	0x781F8A  	PUSH	W10
0x06F6	0x781F8B  	PUSH	W11
0x06F8	0x781F8C  	PUSH	W12
0x06FA	0x781F8D  	PUSH	W13
0x06FC	0x803A21  	MOV	CLKDIVbits, W1
0x06FE	0x2F8FF0  	MOV	#63743, W0
0x0700	0x608000  	AND	W1, W0, W0
0x0702	0xB7A744  	MOV	WREG, CLKDIVbits
;Master.c,133 :: 		CLKDIVbits.PLLPOST = 0;                                                    //N2=2
0x0704	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0706	0x784090  	MOV.B	[W0], W1
0x0708	0xB3C3F0  	MOV.B	#63, W0
0x070A	0x60C080  	AND.B	W1, W0, W1
0x070C	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x070E	0x784801  	MOV.B	W1, [W0]
;Master.c,134 :: 		CLKDIVbits.PLLPRE = 5;                                                     //N1=7
0x0710	0xB3C050  	MOV.B	#5, W0
0x0712	0x784080  	MOV.B	W0, W1
0x0714	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0716	0x68C090  	XOR.B	W1, [W0], W1
0x0718	0x60C0FF  	AND.B	W1, #31, W1
0x071A	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x071C	0x68C090  	XOR.B	W1, [W0], W1
0x071E	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0720	0x784801  	MOV.B	W1, [W0]
;Master.c,135 :: 		PLLFBDbits.PLLDIV = 150;                                                   //M=152
0x0722	0x200960  	MOV	#150, W0
0x0724	0x780080  	MOV	W0, W1
0x0726	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0728	0x688090  	XOR	W1, [W0], W1
0x072A	0x201FF0  	MOV	#511, W0
0x072C	0x608080  	AND	W1, W0, W1
0x072E	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0730	0x688090  	XOR	W1, [W0], W1
0x0732	0x883A31  	MOV	W1, PLLFBDbits
;Master.c,138 :: 		ANSELA = 0;                                                                //Configura PORTA como digital     *
0x0734	0xEF2E0E  	CLR	ANSELA
;Master.c,139 :: 		ANSELB = 0;                                                                //Configura PORTB como digital     *
0x0736	0xEF2E1E  	CLR	ANSELB
;Master.c,140 :: 		TRISA3_bit = 0;                                                            //Configura el pin A3 como salida  *
0x0738	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Master.c,141 :: 		TRISA4_bit = 0;                                                            //Configura el pin A4 como salida  *
0x073A	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Master.c,142 :: 		TRISB12_bit = 0;                                                           //Configura el pin B12 como salida *
0x073C	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
;Master.c,143 :: 		TRISB10_bit = 1;                                                           //Configura el pin B10 como entrada *
0x073E	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Master.c,144 :: 		TRISB11_bit = 1;                                                           //Configura el pin B11 como entrada *
0x0740	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Master.c,145 :: 		TRISB13_bit = 1;                                                           //Configura el pin B13 como entrada *
0x0742	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Master.c,146 :: 		INTCON2.GIE = 1;                                                           //Habilita las interrupciones globales *
0x0744	0xA8E8C3  	BSET	INTCON2, #15
;Master.c,149 :: 		RPINR18bits.U1RXR = 0x22;                                                  //Configura el pin RB2/RPI34 como Rx1
0x0746	0xB3C220  	MOV.B	#34, W0
0x0748	0x784080  	MOV.B	W0, W1
0x074A	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x074C	0x68C090  	XOR.B	W1, [W0], W1
0x074E	0xB3C7F0  	MOV.B	#127, W0
0x0750	0x60C080  	AND.B	W1, W0, W1
0x0752	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0754	0x68C090  	XOR.B	W1, [W0], W1
0x0756	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0758	0x784801  	MOV.B	W1, [W0]
;Master.c,150 :: 		RPOR0bits.RP35R = 0x01;                                                    //Configura el Tx1 en el pin RB3/RP35
0x075A	0x201000  	MOV	#256, W0
0x075C	0x780080  	MOV	W0, W1
0x075E	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0760	0x688090  	XOR	W1, [W0], W1
0x0762	0x23F000  	MOV	#16128, W0
0x0764	0x608080  	AND	W1, W0, W1
0x0766	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0768	0x688090  	XOR	W1, [W0], W1
0x076A	0x883401  	MOV	W1, RPOR0bits
;Master.c,151 :: 		UART1_Init(9600);                                                          //Inicializa el UART1 con una velocidad de 9600 baudios
0x076C	0x22580A  	MOV	#9600, W10
0x076E	0x20000B  	MOV	#0, W11
0x0770	0x07FE85  	RCALL	_UART1_Init
;Master.c,152 :: 		U1RXIE_bit = 0;                                                            //Desabilita la interrupcion por UART1 RX
0x0772	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Master.c,153 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART1 RX
0x0774	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Master.c,154 :: 		IPC2bits.U1RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x0776	0x240000  	MOV	#16384, W0
0x0778	0x780080  	MOV	W0, W1
0x077A	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x077C	0x688090  	XOR	W1, [W0], W1
0x077E	0x270000  	MOV	#28672, W0
0x0780	0x608080  	AND	W1, W0, W1
0x0782	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0784	0x688090  	XOR	W1, [W0], W1
0x0786	0x884221  	MOV	W1, IPC2bits
;Master.c,155 :: 		U1STAbits.URXISEL = 0x00;
0x0788	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x078A	0x784090  	MOV.B	[W0], W1
0x078C	0xB3C3F0  	MOV.B	#63, W0
0x078E	0x60C080  	AND.B	W1, W0, W1
0x0790	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0792	0x784801  	MOV.B	W1, [W0]
;Master.c,158 :: 		RPINR19bits.U2RXR = 0x2F;                                                  //Configura el pin RB15/RPI47 como Rx2
0x0794	0xB3C2F0  	MOV.B	#47, W0
0x0796	0x784080  	MOV.B	W0, W1
0x0798	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x079A	0x68C090  	XOR.B	W1, [W0], W1
0x079C	0xB3C7F0  	MOV.B	#127, W0
0x079E	0x60C080  	AND.B	W1, W0, W1
0x07A0	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x07A2	0x68C090  	XOR.B	W1, [W0], W1
0x07A4	0x206C60  	MOV	#lo_addr(RPINR19bits), W0
0x07A6	0x784801  	MOV.B	W1, [W0]
;Master.c,159 :: 		RPOR1bits.RP36R = 0x03;                                                    //Configura el Tx2 en el pin RB4/RP36
0x07A8	0xB3C030  	MOV.B	#3, W0
0x07AA	0x784080  	MOV.B	W0, W1
0x07AC	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x07AE	0x68C090  	XOR.B	W1, [W0], W1
0x07B0	0xB3C3F0  	MOV.B	#63, W0
0x07B2	0x60C080  	AND.B	W1, W0, W1
0x07B4	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x07B6	0x68C090  	XOR.B	W1, [W0], W1
0x07B8	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x07BA	0x784801  	MOV.B	W1, [W0]
;Master.c,160 :: 		UART2_Init_Advanced(2000000, 2, 1, 1);                                     //Inicializa el UART2 con una velocidad de 2Mbps
0x07BC	0x20001D  	MOV	#1, W13
0x07BE	0x20002C  	MOV	#2, W12
0x07C0	0x28480A  	MOV	#33920, W10
0x07C2	0x2001EB  	MOV	#30, W11
0x07C4	0x200010  	MOV	#1, W0
0x07C6	0x781F80  	PUSH	W0
0x07C8	0x07FD27  	RCALL	_UART2_Init_Advanced
0x07CA	0xB1002F  	SUB	#2, W15
;Master.c,161 :: 		U2RXIE_bit = 0;                                                            //Desabilita la interrupcion por UART2 RX
0x07CC	0xA9C823  	BCLR	U2RXIE_bit, BitPos(U2RXIE_bit+0)
;Master.c,162 :: 		U2RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART1 RX
0x07CE	0xA9C803  	BCLR	U2RXIF_bit, BitPos(U2RXIF_bit+0)
;Master.c,163 :: 		IPC7bits.U2RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x07D0	0x204000  	MOV	#1024, W0
0x07D2	0x780080  	MOV	W0, W1
0x07D4	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x07D6	0x688090  	XOR	W1, [W0], W1
0x07D8	0x207000  	MOV	#1792, W0
0x07DA	0x608080  	AND	W1, W0, W1
0x07DC	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x07DE	0x688090  	XOR	W1, [W0], W1
0x07E0	0x884271  	MOV	W1, IPC7bits
;Master.c,164 :: 		U2STAbits.URXISEL = 0x00;
0x07E2	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x07E4	0x784090  	MOV.B	[W0], W1
0x07E6	0xB3C3F0  	MOV.B	#63, W0
0x07E8	0x60C080  	AND.B	W1, W0, W1
0x07EA	0x202320  	MOV	#lo_addr(U2STAbits), W0
0x07EC	0x784801  	MOV.B	W1, [W0]
;Master.c,176 :: 		SPI1STAT.SPIEN = 1;                                                        //Habilita el SPI1 *
0x07EE	0xA8E241  	BSET	SPI1STAT, #15
;Master.c,177 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);        //*
0x07F0	0x20003D  	MOV	#3, W13
0x07F2	0x2001CC  	MOV	#28, W12
0x07F4	0xEF2016  	CLR	W11
0x07F6	0xEF2014  	CLR	W10
0x07F8	0xEF2000  	CLR	W0
0x07FA	0x781F80  	PUSH	W0
0x07FC	0x200400  	MOV	#64, W0
0x07FE	0x781F80  	PUSH	W0
0x0800	0x202000  	MOV	#512, W0
0x0802	0x781F80  	PUSH	W0
0x0804	0x200800  	MOV	#128, W0
0x0806	0x781F80  	PUSH	W0
0x0808	0x07FE1B  	RCALL	_SPI1_Init_Advanced
0x080A	0xB1008F  	SUB	#8, W15
;Master.c,178 :: 		SPI1IE_bit = 1;                                                            //Habilita la interrupcion por SPI1  *
0x080C	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Master.c,179 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x080E	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Master.c,180 :: 		IPC2bits.SPI1IP = 0x03;                                                    //Prioridad de la interrupcion SPI1
0x0810	0x203000  	MOV	#768, W0
0x0812	0x780080  	MOV	W0, W1
0x0814	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0816	0x688090  	XOR	W1, [W0], W1
0x0818	0x207000  	MOV	#1792, W0
0x081A	0x608080  	AND	W1, W0, W1
0x081C	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x081E	0x688090  	XOR	W1, [W0], W1
0x0820	0x884221  	MOV	W1, IPC2bits
;Master.c,183 :: 		RPINR0 = 0x2E00;                                                           //Asigna INT1 al RB14/RPI46
0x0822	0x22E000  	MOV	#11776, W0
0x0824	0xB7A6A0  	MOV	WREG, RPINR0
;Master.c,184 :: 		INT1IE_bit = 0;                                                            //Habilita la interrupcion externa INT1
0x0826	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Master.c,185 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x0828	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Master.c,186 :: 		IPC5bits.INT1IP = 0x01;                                                    //Prioridad en la interrupocion externa 1
0x082A	0xB3C010  	MOV.B	#1, W0
0x082C	0x784080  	MOV.B	W0, W1
0x082E	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0830	0x68C090  	XOR.B	W1, [W0], W1
0x0832	0x60C0E7  	AND.B	W1, #7, W1
0x0834	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0836	0x68C090  	XOR.B	W1, [W0], W1
0x0838	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x083A	0x784801  	MOV.B	W1, [W0]
;Master.c,188 :: 		Delay_ms(200);                                                             //Espera hasta que se estabilicen los cambios
0x083C	0x200198  	MOV	#25, W8
0x083E	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal6:
0x0840	0xED200E  	DEC	W7
0x0842	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal6
0x0844	0xED2010  	DEC	W8
0x0846	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal6
0x0848	0x000000  	NOP
;Master.c,190 :: 		}
L_end_ConfiguracionPrincipal:
0x084A	0x7806CF  	POP	W13
0x084C	0x78064F  	POP	W12
0x084E	0x7805CF  	POP	W11
0x0850	0x78054F  	POP	W10
0x0852	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x047C	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x047E	0x2046E0  	MOV	#lo_addr(_UART1_Write), W0
0x0480	0x88D050  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x0482	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0484	0x88D060  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x0486	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x0488	0x88D040  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x048A	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x048C	0x88D030  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x048E	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x0490	0x280000  	MOV	#32768, W0
0x0492	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x0494	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x0496	0x07FEB4  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0498	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x049A	0x203E80  	MOV	#1000, W0
0x049C	0x200001  	MOV	#0, W1
0x049E	0x07006F  	RCALL	__Multiply_32x32
0x04A0	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x04A2	0x07FEB1  	RCALL	_Get_Fosc_Per_Cyc
0x04A4	0xDE0041  	LSR	W0, #1, W0
0x04A6	0x400064  	ADD	W0, #4, W0
0x04A8	0x780080  	MOV	W0, W1
0x04AA	0x470060  	ADD	W14, #0, W0
0x04AC	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x04AE	0xE90081  	DEC	W1, W1
0x04B0	0x350003  	BRA LT	L__UART1_Init84
0x04B2	0xD01810  	SL	[W0], [W0++]
0x04B4	0xD29010  	RLC	[W0], [W0--]
0x04B6	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x04B8	0xBE9F82  	PUSH.D	W2
0x04BA	0xBE9F8A  	PUSH.D	W10
0x04BC	0xBE0002  	MOV.D	W2, W0
0x04BE	0x90010E  	MOV	[W14+0], W2
0x04C0	0x90019E  	MOV	[W14+2], W3
0x04C2	0xEB0200  	CLR	W4
0x04C4	0x070065  	RCALL	__Modulus_32x32
0x04C6	0xBE054F  	POP.D	W10
0x04C8	0xBE014F  	POP.D	W2
0x04CA	0x980720  	MOV	W0, [W14+4]
0x04CC	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x04CE	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x04D0	0xBE0002  	MOV.D	W2, W0
0x04D2	0x90010E  	MOV	[W14+0], W2
0x04D4	0x90019E  	MOV	[W14+2], W3
0x04D6	0xEB0200  	CLR	W4
0x04D8	0x07FF83  	RCALL	__Divide_32x32
0x04DA	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x04DC	0x780180  	MOV	W0, W3
0x04DE	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x04E0	0x470060  	ADD	W14, #0, W0
0x04E2	0xD10150  	LSR	[++W0], W2
0x04E4	0xD380C0  	RRC	[--W0], W1
0x04E6	0x470064  	ADD	W14, #4, W0
0x04E8	0xE10830  	CP	W1, [W0++]
0x04EA	0xE19020  	CPB	W2, [W0--]
0x04EC	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x04EE	0x418061  	ADD	W3, #1, W0
0x04F0	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x04F2	0x780280  	MOV	W0, W5
0x04F4	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x04F6	0x780105  	MOV	W5, W2
0x04F8	0x780186  	MOV	W6, W3
0x04FA	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x04FC	0x780103  	MOV	W3, W2
0x04FE	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x0500	0x718002  	IOR	W3, W2, W0
0x0502	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x0504	0x07FE7D  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0506	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x0508	0x203E80  	MOV	#1000, W0
0x050A	0x200001  	MOV	#0, W1
0x050C	0x070038  	RCALL	__Multiply_32x32
0x050E	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x0510	0x07FE7A  	RCALL	_Get_Fosc_Per_Cyc
0x0512	0xDE0041  	LSR	W0, #1, W0
0x0514	0xECA000  	INC2	W0
0x0516	0x780080  	MOV	W0, W1
0x0518	0x470060  	ADD	W14, #0, W0
0x051A	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x051C	0xE90081  	DEC	W1, W1
0x051E	0x350003  	BRA LT	L__UART1_Init88
0x0520	0xD01810  	SL	[W0], [W0++]
0x0522	0xD29010  	RLC	[W0], [W0--]
0x0524	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x0526	0xBE9F82  	PUSH.D	W2
0x0528	0xBE0002  	MOV.D	W2, W0
0x052A	0x90010E  	MOV	[W14+0], W2
0x052C	0x90019E  	MOV	[W14+2], W3
0x052E	0xEB0200  	CLR	W4
0x0530	0x07002F  	RCALL	__Modulus_32x32
0x0532	0xBE014F  	POP.D	W2
0x0534	0x980720  	MOV	W0, [W14+4]
0x0536	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x0538	0xBE0002  	MOV.D	W2, W0
0x053A	0x90010E  	MOV	[W14+0], W2
0x053C	0x90019E  	MOV	[W14+2], W3
0x053E	0xEB0200  	CLR	W4
0x0540	0x07FF4F  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0542	0x780180  	MOV	W0, W3
0x0544	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0546	0x470060  	ADD	W14, #0, W0
0x0548	0xD10150  	LSR	[++W0], W2
0x054A	0xD380C0  	RRC	[--W0], W1
0x054C	0x470064  	ADD	W14, #4, W0
0x054E	0xE10830  	CP	W1, [W0++]
0x0550	0xE19020  	CPB	W2, [W0--]
0x0552	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x0554	0x418061  	ADD	W3, #1, W0
0x0556	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0558	0x780280  	MOV	W0, W5
0x055A	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x055C	0x780105  	MOV	W5, W2
0x055E	0x780186  	MOV	W6, W3
0x0560	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0562	0x780103  	MOV	W3, W2
0x0564	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x0566	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x0568	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x056A	0x510061  	SUB	W2, #1, W0
0x056C	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x056E	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x0570	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x0572	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x0574	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x0576	0x07FE49  	RCALL	_Delay_100ms
0x0578	0x07FE48  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x057A	0xFA8000  	ULNK
0x057C	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0200	0x238800  	MOV	#14464, W0
0x0202	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0204	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x0206	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0208	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x020A	0x2000D8  	MOV	#13, W8
0x020C	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x020E	0xED200E  	DEC	W7
0x0210	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0212	0xED2010  	DEC	W8
0x0214	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0216	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x057E	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0580	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0582	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0584	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x0586	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x0588	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x058A	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x058C	0xFA8000  	ULNK
0x058E	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0590	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0592	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0594	0x0000000405E4  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0598	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x059A	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x059C	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x059E	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x05A0	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x05A2	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x05A4	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x05A6	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x05A8	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x05AA	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x05AC	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x05AE	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x05B0	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x05B2	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x05B4	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x05B6	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x05B8	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x05BA	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x05BC	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x05BE	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x05C0	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x05C2	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x05C4	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x05C6	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x05C8	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x05CA	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x05CC	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x05CE	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x05D0	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x05D2	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x05D4	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x05D6	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x05D8	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x05DA	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x05DC	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x05DE	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x05E0	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x05E2	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x05E4	0xFA8000  	ULNK
0x05E6	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x03E0	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x03E2	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x03E4	0x00000004042E  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x03E8	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x03EA	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x03EC	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x03EE	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x03F0	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x03F2	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x03F4	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x03F6	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x03F8	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x03FA	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x03FC	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x03FE	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0400	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0402	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0404	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x0406	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x0408	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x040A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x040C	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x040E	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0410	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0412	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0414	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x0416	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x0418	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x041A	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x041C	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x041E	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0420	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0422	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0424	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x0426	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x0428	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x042A	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x042C	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x042E	0xFA8000  	ULNK
0x0430	0x060000  	RETURN
; end of __Divide_32x32
_UART2_Init_Advanced:
0x0218	0xFA000C  	LNK	#12
;__Lib_UART_12_p24_p33.c,439 :: 		
; high_low_speed start address is: 2 (W1)
0x021A	0x97B8CE  	MOV	[W14-8], W1
;__Lib_UART_12_p24_p33.c,442 :: 		
0x021C	0x204320  	MOV	#lo_addr(_UART2_Write), W0
0x021E	0x88D050  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,443 :: 		
0x0220	0x2FFFF0  	MOV	#lo_addr(_UART2_Read), W0
0x0222	0x88D060  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,444 :: 		
0x0224	0x2FFFF0  	MOV	#lo_addr(_UART2_Data_Ready), W0
0x0226	0x88D040  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,445 :: 		
0x0228	0x2FFFF0  	MOV	#lo_addr(_UART2_Tx_Idle), W0
0x022A	0x88D030  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,447 :: 		
0x022C	0xEF2230  	CLR	U2MODE
;__Lib_UART_12_p24_p33.c,448 :: 		
0x022E	0x280000  	MOV	#32768, W0
0x0230	0xB7A232  	MOV	WREG, U2STA
;__Lib_UART_12_p24_p33.c,450 :: 		
0x0232	0xE10860  	CP	W1, #0
0x0234	0x3A0030  	BRA NZ	L_UART2_Init_Advanced41
L__UART2_Init_Advanced128:
; high_low_speed end address is: 2 (W1)
;__Lib_UART_12_p24_p33.c,451 :: 		
0x0236	0xA96230  	BCLR	U2MODE, #3
;__Lib_UART_12_p24_p33.c,452 :: 		
0x0238	0x07FFE3  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,454 :: 		
0x023A	0x203E82  	MOV	#1000, W2
0x023C	0x200003  	MOV	#0, W3
0x023E	0x07019F  	RCALL	__Multiply_32x32
0x0240	0x980700  	MOV	W0, [W14+0]
0x0242	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,458 :: 		
0x0244	0x07FFE0  	RCALL	_Get_Fosc_Per_Cyc
0x0246	0xDE0041  	LSR	W0, #1, W0
0x0248	0x400064  	ADD	W0, #4, W0
0x024A	0x780080  	MOV	W0, W1
0x024C	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced129:
0x024E	0xE90081  	DEC	W1, W1
0x0250	0x350003  	BRA LT	L__UART2_Init_Advanced130
0x0252	0xD00102  	SL	W2, W2
0x0254	0xD28183  	RLC	W3, W3
0x0256	0x37FFFB  	BRA	L__UART2_Init_Advanced129
L__UART2_Init_Advanced130:
0x0258	0x980722  	MOV	W2, [W14+4]
0x025A	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,460 :: 		
0x025C	0xBE9F8C  	PUSH.D	W12
0x025E	0x90000E  	MOV	[W14+0], W0
0x0260	0x90009E  	MOV	[W14+2], W1
0x0262	0xEB0200  	CLR	W4
0x0264	0x070195  	RCALL	__Modulus_32x32
0x0266	0x980740  	MOV	W0, [W14+8]
0x0268	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,461 :: 		
0x026A	0x90012E  	MOV	[W14+4], W2
0x026C	0x9001BE  	MOV	[W14+6], W3
0x026E	0x90000E  	MOV	[W14+0], W0
0x0270	0x90009E  	MOV	[W14+2], W1
0x0272	0xEB0200  	CLR	W4
0x0274	0x0700B5  	RCALL	__Divide_32x32
0x0276	0xBE064F  	POP.D	W12
0x0278	0x980700  	MOV	W0, [W14+0]
0x027A	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,463 :: 		
0x027C	0x470064  	ADD	W14, #4, W0
0x027E	0xD10150  	LSR	[++W0], W2
0x0280	0xD380C0  	RRC	[--W0], W1
0x0282	0x470068  	ADD	W14, #8, W0
0x0284	0xE10830  	CP	W1, [W0++]
0x0286	0xE19020  	CPB	W2, [W0--]
0x0288	0x310005  	BRA GEU	L_UART2_Init_Advanced42
L__UART2_Init_Advanced131:
;__Lib_UART_12_p24_p33.c,464 :: 		
0x028A	0x90008E  	MOV	[W14+0], W1
0x028C	0x90011E  	MOV	[W14+2], W2
0x028E	0x470060  	ADD	W14, #0, W0
0x0290	0x409861  	ADD	W1, #1, [W0++]
0x0292	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced42:
;__Lib_UART_12_p24_p33.c,466 :: 		
0x0294	0x370096  	BRA	L_UART2_Init_Advanced43
L_UART2_Init_Advanced41:
;__Lib_UART_12_p24_p33.c,468 :: 		
; high_low_speed start address is: 2 (W1)
0x0296	0xE10861  	CP	W1, #1
0x0298	0x3A0030  	BRA NZ	L_UART2_Init_Advanced44
L__UART2_Init_Advanced132:
; high_low_speed end address is: 2 (W1)
;__Lib_UART_12_p24_p33.c,469 :: 		
0x029A	0x07FFB2  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,471 :: 		
0x029C	0x203E82  	MOV	#1000, W2
0x029E	0x200003  	MOV	#0, W3
0x02A0	0x07016E  	RCALL	__Multiply_32x32
0x02A2	0x980700  	MOV	W0, [W14+0]
0x02A4	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,475 :: 		
0x02A6	0x07FFAF  	RCALL	_Get_Fosc_Per_Cyc
0x02A8	0xDE0041  	LSR	W0, #1, W0
0x02AA	0xECA000  	INC2	W0
0x02AC	0x780080  	MOV	W0, W1
0x02AE	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced133:
0x02B0	0xE90081  	DEC	W1, W1
0x02B2	0x350003  	BRA LT	L__UART2_Init_Advanced134
0x02B4	0xD00102  	SL	W2, W2
0x02B6	0xD28183  	RLC	W3, W3
0x02B8	0x37FFFB  	BRA	L__UART2_Init_Advanced133
L__UART2_Init_Advanced134:
0x02BA	0x980722  	MOV	W2, [W14+4]
0x02BC	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,477 :: 		
0x02BE	0xBE9F8C  	PUSH.D	W12
0x02C0	0x90000E  	MOV	[W14+0], W0
0x02C2	0x90009E  	MOV	[W14+2], W1
0x02C4	0xEB0200  	CLR	W4
0x02C6	0x070164  	RCALL	__Modulus_32x32
0x02C8	0x980740  	MOV	W0, [W14+8]
0x02CA	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,478 :: 		
0x02CC	0x90012E  	MOV	[W14+4], W2
0x02CE	0x9001BE  	MOV	[W14+6], W3
0x02D0	0x90000E  	MOV	[W14+0], W0
0x02D2	0x90009E  	MOV	[W14+2], W1
0x02D4	0xEB0200  	CLR	W4
0x02D6	0x070084  	RCALL	__Divide_32x32
0x02D8	0xBE064F  	POP.D	W12
0x02DA	0x980700  	MOV	W0, [W14+0]
0x02DC	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,480 :: 		
0x02DE	0x470064  	ADD	W14, #4, W0
0x02E0	0xD10150  	LSR	[++W0], W2
0x02E2	0xD380C0  	RRC	[--W0], W1
0x02E4	0x470068  	ADD	W14, #8, W0
0x02E6	0xE10830  	CP	W1, [W0++]
0x02E8	0xE19020  	CPB	W2, [W0--]
0x02EA	0x310005  	BRA GEU	L_UART2_Init_Advanced45
L__UART2_Init_Advanced135:
;__Lib_UART_12_p24_p33.c,481 :: 		
0x02EC	0x90008E  	MOV	[W14+0], W1
0x02EE	0x90011E  	MOV	[W14+2], W2
0x02F0	0x470060  	ADD	W14, #0, W0
0x02F2	0x409861  	ADD	W1, #1, [W0++]
0x02F4	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced45:
;__Lib_UART_12_p24_p33.c,483 :: 		
0x02F6	0xA86230  	BSET	U2MODE, #3
;__Lib_UART_12_p24_p33.c,484 :: 		
0x02F8	0x370064  	BRA	L_UART2_Init_Advanced46
L_UART2_Init_Advanced44:
;__Lib_UART_12_p24_p33.c,487 :: 		
0x02FA	0xA96230  	BCLR	U2MODE, #3
;__Lib_UART_12_p24_p33.c,488 :: 		
0x02FC	0x07FF81  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,490 :: 		
0x02FE	0x203E82  	MOV	#1000, W2
0x0300	0x200003  	MOV	#0, W3
0x0302	0x07013D  	RCALL	__Multiply_32x32
0x0304	0x980700  	MOV	W0, [W14+0]
0x0306	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,494 :: 		
0x0308	0x07FF7E  	RCALL	_Get_Fosc_Per_Cyc
0x030A	0xDE0041  	LSR	W0, #1, W0
0x030C	0x400064  	ADD	W0, #4, W0
0x030E	0x780080  	MOV	W0, W1
0x0310	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced136:
0x0312	0xE90081  	DEC	W1, W1
0x0314	0x350003  	BRA LT	L__UART2_Init_Advanced137
0x0316	0xD00102  	SL	W2, W2
0x0318	0xD28183  	RLC	W3, W3
0x031A	0x37FFFB  	BRA	L__UART2_Init_Advanced136
L__UART2_Init_Advanced137:
0x031C	0x980722  	MOV	W2, [W14+4]
0x031E	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,496 :: 		
0x0320	0xBE9F8C  	PUSH.D	W12
0x0322	0xBE9F8A  	PUSH.D	W10
0x0324	0x90000E  	MOV	[W14+0], W0
0x0326	0x90009E  	MOV	[W14+2], W1
0x0328	0xEB0200  	CLR	W4
0x032A	0x070132  	RCALL	__Modulus_32x32
0x032C	0x980740  	MOV	W0, [W14+8]
0x032E	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,497 :: 		
0x0330	0x90012E  	MOV	[W14+4], W2
0x0332	0x9001BE  	MOV	[W14+6], W3
0x0334	0x90000E  	MOV	[W14+0], W0
0x0336	0x90009E  	MOV	[W14+2], W1
0x0338	0xEB0200  	CLR	W4
0x033A	0x070052  	RCALL	__Divide_32x32
0x033C	0xBE054F  	POP.D	W10
0x033E	0xBE064F  	POP.D	W12
0x0340	0x980700  	MOV	W0, [W14+0]
0x0342	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,499 :: 		
0x0344	0x470064  	ADD	W14, #4, W0
0x0346	0xD10150  	LSR	[++W0], W2
0x0348	0xD380C0  	RRC	[--W0], W1
0x034A	0x470068  	ADD	W14, #8, W0
0x034C	0xE10830  	CP	W1, [W0++]
0x034E	0xE19020  	CPB	W2, [W0--]
0x0350	0x310005  	BRA GEU	L_UART2_Init_Advanced47
L__UART2_Init_Advanced138:
;__Lib_UART_12_p24_p33.c,500 :: 		
0x0352	0x90008E  	MOV	[W14+0], W1
0x0354	0x90011E  	MOV	[W14+2], W2
0x0356	0x470060  	ADD	W14, #0, W0
0x0358	0x409861  	ADD	W1, #1, [W0++]
0x035A	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced47:
;__Lib_UART_12_p24_p33.c,503 :: 		
0x035C	0x4700E0  	ADD	W14, #0, W1
0x035E	0x780031  	MOV	[W1++], W0
0x0360	0x700021  	IOR	W0, [W1--], W0
0x0362	0x3A002F  	BRA NZ	L_UART2_Init_Advanced48
L__UART2_Init_Advanced139:
;__Lib_UART_12_p24_p33.c,505 :: 		
0x0364	0x07FF4D  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.c,507 :: 		
0x0366	0x203E82  	MOV	#1000, W2
0x0368	0x200003  	MOV	#0, W3
0x036A	0x070109  	RCALL	__Multiply_32x32
0x036C	0x980700  	MOV	W0, [W14+0]
0x036E	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,509 :: 		
0x0370	0x07FF4A  	RCALL	_Get_Fosc_Per_Cyc
0x0372	0xDE0041  	LSR	W0, #1, W0
0x0374	0xECA000  	INC2	W0
0x0376	0x780080  	MOV	W0, W1
0x0378	0xBE010A  	MOV.D	W10, W2
L__UART2_Init_Advanced140:
0x037A	0xE90081  	DEC	W1, W1
0x037C	0x350003  	BRA LT	L__UART2_Init_Advanced141
0x037E	0xD00102  	SL	W2, W2
0x0380	0xD28183  	RLC	W3, W3
0x0382	0x37FFFB  	BRA	L__UART2_Init_Advanced140
L__UART2_Init_Advanced141:
0x0384	0x980722  	MOV	W2, [W14+4]
0x0386	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.c,511 :: 		
0x0388	0xBE9F8C  	PUSH.D	W12
0x038A	0x90000E  	MOV	[W14+0], W0
0x038C	0x90009E  	MOV	[W14+2], W1
0x038E	0xEB0200  	CLR	W4
0x0390	0x0700FF  	RCALL	__Modulus_32x32
0x0392	0x980740  	MOV	W0, [W14+8]
0x0394	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.c,512 :: 		
0x0396	0x90012E  	MOV	[W14+4], W2
0x0398	0x9001BE  	MOV	[W14+6], W3
0x039A	0x90000E  	MOV	[W14+0], W0
0x039C	0x90009E  	MOV	[W14+2], W1
0x039E	0xEB0200  	CLR	W4
0x03A0	0x07001F  	RCALL	__Divide_32x32
0x03A2	0xBE064F  	POP.D	W12
0x03A4	0x980700  	MOV	W0, [W14+0]
0x03A6	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.c,514 :: 		
0x03A8	0x470064  	ADD	W14, #4, W0
0x03AA	0xD10150  	LSR	[++W0], W2
0x03AC	0xD380C0  	RRC	[--W0], W1
0x03AE	0x470068  	ADD	W14, #8, W0
0x03B0	0xE10830  	CP	W1, [W0++]
0x03B2	0xE19020  	CPB	W2, [W0--]
0x03B4	0x310005  	BRA GEU	L_UART2_Init_Advanced49
L__UART2_Init_Advanced142:
;__Lib_UART_12_p24_p33.c,515 :: 		
0x03B6	0x90008E  	MOV	[W14+0], W1
0x03B8	0x90011E  	MOV	[W14+2], W2
0x03BA	0x470060  	ADD	W14, #0, W0
0x03BC	0x409861  	ADD	W1, #1, [W0++]
0x03BE	0x491060  	ADDC	W2, #0, [W0--]
L_UART2_Init_Advanced49:
;__Lib_UART_12_p24_p33.c,517 :: 		
0x03C0	0xA86230  	BSET	U2MODE, #3
;__Lib_UART_12_p24_p33.c,518 :: 		
L_UART2_Init_Advanced48:
;__Lib_UART_12_p24_p33.c,519 :: 		
L_UART2_Init_Advanced46:
L_UART2_Init_Advanced43:
;__Lib_UART_12_p24_p33.c,522 :: 		
0x03C2	0x90000E  	MOV	[W14+0], W0
0x03C4	0x90009E  	MOV	[W14+2], W1
0x03C6	0x500061  	SUB	W0, #1, W0
0x03C8	0x5880E0  	SUBB	W1, #0, W1
0x03CA	0x8811C0  	MOV	W0, U2BRG
;__Lib_UART_12_p24_p33.c,524 :: 		
0x03CC	0xA92232  	BCLR	U2STA, #1
;__Lib_UART_12_p24_p33.c,526 :: 		
0x03CE	0x76008D  	IOR	W12, W13, W1
0x03D0	0x202300  	MOV	#lo_addr(U2MODE), W0
0x03D2	0x708810  	IOR	W1, [W0], [W0]
;__Lib_UART_12_p24_p33.c,529 :: 		
0x03D4	0xA8E231  	BSET	U2MODE, #15
;__Lib_UART_12_p24_p33.c,530 :: 		
0x03D6	0xA84233  	BSET	U2STA, #10
;__Lib_UART_12_p24_p33.c,532 :: 		
0x03D8	0x07FF18  	RCALL	_Delay_100ms
0x03DA	0x07FF17  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,535 :: 		
L_end_UART2_Init_Advanced:
0x03DC	0xFA8000  	ULNK
0x03DE	0x060000  	RETURN
; end of _UART2_Init_Advanced
_SPI1_Init_Advanced:
0x0440	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x0442	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x0444	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0446	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0448	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x044A	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x044C	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x044E	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x0450	0x888080  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x0452	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x0454	0x888130  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0456	0x75000B  	IOR	W10, W11, W0
0x0458	0x70000C  	IOR	W0, W12, W0
0x045A	0x70000D  	IOR	W0, W13, W0
0x045C	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x045E	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x0460	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x0462	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0464	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x0466	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x0468	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x046A	0xFA8000  	ULNK
0x046C	0x060000  	RETURN
; end of _SPI1_Init_Advanced
0x0C3C	0x210001  	MOV	#lo_addr(_tramaUART2), W1
0x0C3E	0x280000  	MOV	#32768, W0
0x0C40	0x090005  	REPEAT	#5
0x0C42	0x7818B0  	MOV	[W0++], [W1++]
0x0C44	0x060000  	RETURN
_urx_2:
0x098C	0xF80034  	PUSH	DSWPAG
0x098E	0xF80032  	PUSH	DSRPAG
0x0990	0xF80036  	PUSH	RCOUNT
0x0992	0x781F80  	PUSH	W0
0x0994	0x200020  	MOV	#2, W0
0x0996	0x09000C  	REPEAT	#12
0x0998	0x781FB0  	PUSH	[W0++]
;Master.c,431 :: 		void urx_2() org  IVT_ADDR_U2RXINTERRUPT {
;Master.c,433 :: 		U2RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART2
0x099A	0xA9C803  	BCLR	U2RXIF_bit, BitPos(U2RXIF_bit+0)
;Master.c,435 :: 		byteUART2 = U2RXREG;                                                       //Lee el byte de la trama enviada por el GPS
0x099C	0x21A041  	MOV	#lo_addr(_byteUART2), W1
0x099E	0xBFC236  	MOV.B	U2RXREG, WREG
0x09A0	0x784880  	MOV.B	W0, [W1]
;Master.c,436 :: 		U2STA.OERR = 0;                                                            //Limpia este bit para limpiar el FIFO UART2
0x09A2	0xA92232  	BCLR	U2STA, #1
;Master.c,438 :: 		if ((banUTI==0)&&(byteUART2==0x3A)){                                       //Verifica si el primer byte recibido sea la cabecera de trama
0x09A4	0x21A180  	MOV	#lo_addr(_banUTI), W0
0x09A6	0x784010  	MOV.B	[W0], W0
0x09A8	0xE10460  	CP.B	W0, #0
0x09AA	0x3A000A  	BRA NZ	L__urx_290
L__urx_2131:
0x09AC	0x21A040  	MOV	#lo_addr(_byteUART2), W0
0x09AE	0x784090  	MOV.B	[W0], W1
0x09B0	0xB3C3A0  	MOV.B	#58, W0
0x09B2	0xE10C00  	CP.B	W1, W0
0x09B4	0x3A0005  	BRA NZ	L__urx_289
L__urx_2132:
L__urx_288:
;Master.c,439 :: 		banUTI = 1;
0x09B6	0x21A181  	MOV	#lo_addr(_banUTI), W1
0x09B8	0xB3C010  	MOV.B	#1, W0
0x09BA	0x784880  	MOV.B	W0, [W1]
;Master.c,440 :: 		i_uart = 0;
0x09BC	0xEF2000  	CLR	W0
0x09BE	0x888120  	MOV	W0, _i_uart
;Master.c,438 :: 		if ((banUTI==0)&&(byteUART2==0x3A)){                                       //Verifica si el primer byte recibido sea la cabecera de trama
L__urx_290:
L__urx_289:
;Master.c,442 :: 		if (banUTI==1){
0x09C0	0x21A180  	MOV	#lo_addr(_banUTI), W0
0x09C2	0x784010  	MOV.B	[W0], W0
0x09C4	0xE10461  	CP.B	W0, #1
0x09C6	0x3A0013  	BRA NZ	L_urx_253
L__urx_2133:
;Master.c,443 :: 		if (byteUART2!=0x0A){
0x09C8	0x21A040  	MOV	#lo_addr(_byteUART2), W0
0x09CA	0x784010  	MOV.B	[W0], W0
0x09CC	0xE1046A  	CP.B	W0, #10
0x09CE	0x320009  	BRA Z	L_urx_254
L__urx_2134:
;Master.c,444 :: 		tramaUART2[i_uart] = byteUART2;                                      //Almacena el byte recibido en la trama, mientras este sea diferente del segundo byte del delimitador de final de trama
0x09D0	0x210001  	MOV	#lo_addr(_tramaUART2), W1
0x09D2	0x210240  	MOV	#lo_addr(_i_uart), W0
0x09D4	0x408090  	ADD	W1, [W0], W1
0x09D6	0x21A040  	MOV	#lo_addr(_byteUART2), W0
0x09D8	0x784890  	MOV.B	[W0], [W1]
;Master.c,445 :: 		i_uart++;
0x09DA	0x200011  	MOV	#1, W1
0x09DC	0x210240  	MOV	#lo_addr(_i_uart), W0
0x09DE	0x408810  	ADD	W1, [W0], [W0]
;Master.c,446 :: 		} else {
0x09E0	0x370006  	BRA	L_urx_255
L_urx_254:
;Master.c,447 :: 		banUTI = 0;                                                          //Limpia la bandera de inicio de trama
0x09E2	0x21A181  	MOV	#lo_addr(_banUTI), W1
0x09E4	0xEF2000  	CLR	W0
0x09E6	0x784880  	MOV.B	W0, [W1]
;Master.c,448 :: 		banUTC = 1;                                                          //Activa la bandera de trama completa
0x09E8	0x21A191  	MOV	#lo_addr(_banUTC), W1
0x09EA	0xB3C010  	MOV.B	#1, W0
0x09EC	0x784880  	MOV.B	W0, [W1]
;Master.c,449 :: 		}
L_urx_255:
;Master.c,450 :: 		}
L_urx_253:
;Master.c,452 :: 		if (banUTC==1){
0x09EE	0x21A190  	MOV	#lo_addr(_banUTC), W0
0x09F0	0x784010  	MOV.B	[W0], W0
0x09F2	0xE10461  	CP.B	W0, #1
0x09F4	0x3A001F  	BRA NZ	L_urx_256
L__urx_2135:
;Master.c,454 :: 		TEST = ~TEST;                                                          //Indica si se completo la trama
0x09F6	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Master.c,455 :: 		for (x=0;x<6;x++) {
0x09F8	0xEF2000  	CLR	W0
0x09FA	0x8880B0  	MOV	W0, _x
L_urx_257:
0x09FC	0x8080B0  	MOV	_x, W0
0x09FE	0xE10066  	CP	W0, #6
0x0A00	0x31000C  	BRA GEU	L_urx_258
L__urx_2136:
;Master.c,456 :: 		tiempo[x] = tramaUART2[x+4];                                       //LLeno la trama tiempo con el payload de la trama recuperada
0x0A02	0x2102A1  	MOV	#lo_addr(_tiempo), W1
0x0A04	0x210160  	MOV	#lo_addr(_x), W0
0x0A06	0x408110  	ADD	W1, [W0], W2
0x0A08	0x8080B0  	MOV	_x, W0
0x0A0A	0x4000E4  	ADD	W0, #4, W1
0x0A0C	0x210000  	MOV	#lo_addr(_tramaUART2), W0
0x0A0E	0x400001  	ADD	W0, W1, W0
0x0A10	0x784910  	MOV.B	[W0], [W2]
;Master.c,455 :: 		for (x=0;x<6;x++) {
0x0A12	0x200011  	MOV	#1, W1
0x0A14	0x210160  	MOV	#lo_addr(_x), W0
0x0A16	0x408810  	ADD	W1, [W0], [W0]
;Master.c,457 :: 		}
0x0A18	0x37FFF1  	BRA	L_urx_257
L_urx_258:
;Master.c,458 :: 		banSetReloj=1;                                                         //Activa la bandera para enviar la hora a la RPI por SPI
0x0A1A	0x21A0F1  	MOV	#lo_addr(_banSetReloj), W1
0x0A1C	0xB3C010  	MOV.B	#1, W0
0x0A1E	0x784880  	MOV.B	W0, [W1]
;Master.c,460 :: 		RP1 = 1;
0x0A20	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,461 :: 		Delay_us(20);
0x0A22	0x200A07  	MOV	#160, W7
L_urx_260:
0x0A24	0xED200E  	DEC	W7
0x0A26	0x3AFFFE  	BRA NZ	L_urx_260
0x0A28	0x000000  	NOP
0x0A2A	0x000000  	NOP
;Master.c,462 :: 		RP1 = 0;
0x0A2C	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Master.c,464 :: 		banUTC = 0;
0x0A2E	0x21A191  	MOV	#lo_addr(_banUTC), W1
0x0A30	0xEF2000  	CLR	W0
0x0A32	0x784880  	MOV.B	W0, [W1]
;Master.c,465 :: 		}
L_urx_256:
;Master.c,467 :: 		}
L_end_urx_2:
0x0A34	0x2001A0  	MOV	#26, W0
0x0A36	0x09000C  	REPEAT	#12
0x0A38	0x78104F  	POP	[W0--]
0x0A3A	0x78004F  	POP	W0
0x0A3C	0xF90036  	POP	RCOUNT
0x0A3E	0xF90032  	POP	DSRPAG
0x0A40	0xF90034  	POP	DSWPAG
0x0A42	0x064000  	RETFIE
; end of _urx_2
_int_1:
0x0A44	0xF80034  	PUSH	DSWPAG
0x0A46	0xF80032  	PUSH	DSRPAG
0x0A48	0xF80036  	PUSH	RCOUNT
0x0A4A	0x781F80  	PUSH	W0
0x0A4C	0x200020  	MOV	#2, W0
0x0A4E	0x09000C  	REPEAT	#12
0x0A50	0x781FB0  	PUSH	[W0++]
;Master.c,326 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT {
;Master.c,328 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x0A52	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Master.c,331 :: 		horaSistema++;                                                             //Incrementa el reloj del sistema
0x0A54	0x200011  	MOV	#1, W1
0x0A56	0x200002  	MOV	#0, W2
0x0A58	0x210200  	MOV	#lo_addr(_horaSistema), W0
0x0A5A	0x409810  	ADD	W1, [W0], [W0++]
0x0A5C	0x491010  	ADDC	W2, [W0], [W0--]
;Master.c,333 :: 		if (horaSistema==86400){                                                   //(24*3600)+(0*60)+(0) = 86400
0x0A5E	0x808102  	MOV	_horaSistema, W2
0x0A60	0x808113  	MOV	_horaSistema+2, W3
0x0A62	0x251800  	MOV	#20864, W0
0x0A64	0x200011  	MOV	#1, W1
0x0A66	0xE11000  	CP	W2, W0
0x0A68	0xE19801  	CPB	W3, W1
0x0A6A	0x3A0004  	BRA NZ	L_int_148
L__int_1128:
;Master.c,334 :: 		horaSistema = 0;                                                        //Reinicia el reloj al llegar a las 24:00:00 horas
0x0A6C	0xEF2000  	CLR	W0
0x0A6E	0xEF2002  	CLR	W1
0x0A70	0x888100  	MOV	W0, _horaSistema
0x0A72	0x888111  	MOV	W1, _horaSistema+2
;Master.c,335 :: 		}
L_int_148:
;Master.c,337 :: 		if (banInicio==1){
0x0A74	0x21A120  	MOV	#lo_addr(_banInicio), W0
0x0A76	0x784010  	MOV.B	[W0], W0
0x0A78	0xE10461  	CP.B	W0, #1
0x0A7A	0x3A0000  	BRA NZ	L_int_149
L__int_1129:
;Master.c,339 :: 		}
L_int_149:
;Master.c,341 :: 		}
L_end_int_1:
0x0A7C	0x2001A0  	MOV	#26, W0
0x0A7E	0x09000C  	REPEAT	#12
0x0A80	0x78104F  	POP	[W0--]
0x0A82	0x78004F  	POP	W0
0x0A84	0xF90036  	POP	RCOUNT
0x0A86	0xF90032  	POP	DSRPAG
0x0A88	0xF90034  	POP	DSWPAG
0x0A8A	0x064000  	RETFIE
; end of _int_1
_spi_1:
0x0A8C	0xF80034  	PUSH	DSWPAG
0x0A8E	0xF80032  	PUSH	DSRPAG
0x0A90	0xF80036  	PUSH	RCOUNT
0x0A92	0x781F80  	PUSH	W0
0x0A94	0x200020  	MOV	#2, W0
0x0A96	0x09000C  	REPEAT	#12
0x0A98	0x781FB0  	PUSH	[W0++]
;Master.c,252 :: 		void spi_1() org  IVT_ADDR_SPI1INTERRUPT {
;Master.c,254 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI
0x0A9A	0x781F8A  	PUSH	W10
0x0A9C	0x781F8B  	PUSH	W11
0x0A9E	0x781F8C  	PUSH	W12
0x0AA0	0x781F8D  	PUSH	W13
0x0AA2	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Master.c,255 :: 		buffer = SPI1BUF;                                                          //Guarda el contenido del bufeer (lectura)
0x0AA4	0x2101F1  	MOV	#lo_addr(_buffer), W1
0x0AA6	0xBFC248  	MOV.B	SPI1BUF, WREG
0x0AA8	0x784880  	MOV.B	W0, [W1]
;Master.c,258 :: 		if ((banSetReloj==0)){
0x0AAA	0x21A0F0  	MOV	#lo_addr(_banSetReloj), W0
0x0AAC	0x784010  	MOV.B	[W0], W0
0x0AAE	0xE10460  	CP.B	W0, #0
0x0AB0	0x3A0010  	BRA NZ	L_spi_120
L__spi_1107:
;Master.c,259 :: 		if (buffer==0xC0){
0x0AB2	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0AB4	0x784090  	MOV.B	[W0], W1
0x0AB6	0xB3CC00  	MOV.B	#192, W0
0x0AB8	0xE10C00  	CP.B	W1, W0
0x0ABA	0x3A000B  	BRA NZ	L_spi_121
L__spi_1108:
;Master.c,260 :: 		banTIGPS = 0;                                                        //Limpia la bandera de inicio de trama  del GPS
0x0ABC	0x21A0E1  	MOV	#lo_addr(_banTIGPS), W1
0x0ABE	0xEF2000  	CLR	W0
0x0AC0	0x784880  	MOV.B	W0, [W1]
;Master.c,261 :: 		banTCGPS = 0;                                                        //Limpia la bandera de trama completa
0x0AC2	0x21A161  	MOV	#lo_addr(_banTCGPS), W1
0x0AC4	0xEF2000  	CLR	W0
0x0AC6	0x784880  	MOV.B	W0, [W1]
;Master.c,262 :: 		i_gps = 0;                                                           //Limpia el subindice de la trama GPS
0x0AC8	0xEF2000  	CLR	W0
0x0ACA	0x8880A0  	MOV	W0, _i_gps
;Master.c,264 :: 		if (U1RXIE_bit==0){
0x0ACC	0xAF6821  	BTSC	U1RXIE_bit, BitPos(U1RXIE_bit+0)
0x0ACE	0x370001  	BRA	L_spi_122
;Master.c,265 :: 		U1RXIE_bit = 1;
0x0AD0	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Master.c,266 :: 		}
L_spi_122:
;Master.c,267 :: 		}
L_spi_121:
;Master.c,268 :: 		}
L_spi_120:
;Master.c,271 :: 		if ((banSetReloj==0)&&(buffer==0xC3)){
0x0AD2	0x21A0F0  	MOV	#lo_addr(_banSetReloj), W0
0x0AD4	0x784010  	MOV.B	[W0], W0
0x0AD6	0xE10460  	CP.B	W0, #0
0x0AD8	0x3A000A  	BRA NZ	L__spi_172
L__spi_1109:
0x0ADA	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0ADC	0x784090  	MOV.B	[W0], W1
0x0ADE	0xB3CC30  	MOV.B	#195, W0
0x0AE0	0xE10C00  	CP.B	W1, W0
0x0AE2	0x3A0005  	BRA NZ	L__spi_171
L__spi_1110:
L__spi_170:
;Master.c,272 :: 		banEsc = 1;
0x0AE4	0x21A101  	MOV	#lo_addr(_banEsc), W1
0x0AE6	0xB3C010  	MOV.B	#1, W0
0x0AE8	0x784880  	MOV.B	W0, [W1]
;Master.c,273 :: 		j = 0;
0x0AEA	0xEF2000  	CLR	W0
0x0AEC	0x888140  	MOV	W0, _j
;Master.c,271 :: 		if ((banSetReloj==0)&&(buffer==0xC3)){
L__spi_172:
L__spi_171:
;Master.c,275 :: 		if ((banEsc==1)&&(buffer!=0xC3)&&(buffer!=0xC4)){
0x0AEE	0x21A100  	MOV	#lo_addr(_banEsc), W0
0x0AF0	0x784010  	MOV.B	[W0], W0
0x0AF2	0xE10461  	CP.B	W0, #1
0x0AF4	0x3A0012  	BRA NZ	L__spi_175
L__spi_1111:
0x0AF6	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0AF8	0x784090  	MOV.B	[W0], W1
0x0AFA	0xB3CC30  	MOV.B	#195, W0
0x0AFC	0xE10C00  	CP.B	W1, W0
0x0AFE	0x32000D  	BRA Z	L__spi_174
L__spi_1112:
0x0B00	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0B02	0x784090  	MOV.B	[W0], W1
0x0B04	0xB3CC40  	MOV.B	#196, W0
0x0B06	0xE10C00  	CP.B	W1, W0
0x0B08	0x320008  	BRA Z	L__spi_173
L__spi_1113:
L__spi_169:
;Master.c,276 :: 		tiempoRPI[j] = buffer;
0x0B0A	0x219FA1  	MOV	#lo_addr(_tiempoRPI), W1
0x0B0C	0x210280  	MOV	#lo_addr(_j), W0
0x0B0E	0x408090  	ADD	W1, [W0], W1
0x0B10	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0B12	0x784890  	MOV.B	[W0], [W1]
;Master.c,277 :: 		j++;
0x0B14	0x200011  	MOV	#1, W1
0x0B16	0x210280  	MOV	#lo_addr(_j), W0
0x0B18	0x408810  	ADD	W1, [W0], [W0]
;Master.c,275 :: 		if ((banEsc==1)&&(buffer!=0xC3)&&(buffer!=0xC4)){
L__spi_175:
L__spi_174:
L__spi_173:
;Master.c,279 :: 		if ((banEsc==1)&&(buffer==0xC4)){
0x0B1A	0x21A100  	MOV	#lo_addr(_banEsc), W0
0x0B1C	0x784010  	MOV.B	[W0], W0
0x0B1E	0xE10461  	CP.B	W0, #1
0x0B20	0x3A0020  	BRA NZ	L__spi_177
L__spi_1114:
0x0B22	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0B24	0x784090  	MOV.B	[W0], W1
0x0B26	0xB3CC40  	MOV.B	#196, W0
0x0B28	0xE10C00  	CP.B	W1, W0
0x0B2A	0x3A001B  	BRA NZ	L__spi_176
L__spi_1115:
L__spi_168:
;Master.c,280 :: 		horaSistema = RecuperarHoraRPI(tiempoRPI);                              //Recupera la hora de la RPi
0x0B2C	0x219FAA  	MOV	#lo_addr(_tiempoRPI), W10
0x0B2E	0x07FD5C  	RCALL	_RecuperarHoraRPI
0x0B30	0x888100  	MOV	W0, _horaSistema
0x0B32	0x888111  	MOV	W1, _horaSistema+2
;Master.c,281 :: 		fechaSistema = RecuperarFechaRPI(tiempoRPI);                            //Recupera la fecha de la RPi
0x0B34	0x219FAA  	MOV	#lo_addr(_tiempoRPI), W10
0x0B36	0x07FD72  	RCALL	_RecuperarFechaRPI
0x0B38	0x88D000  	MOV	W0, _fechaSistema
0x0B3A	0x88D011  	MOV	W1, _fechaSistema+2
;Master.c,282 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);                //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x0B3C	0xBE0600  	MOV.D	W0, W12
0x0B3E	0x80810A  	MOV	_horaSistema, W10
0x0B40	0x80811B  	MOV	_horaSistema+2, W11
0x0B42	0x2102A0  	MOV	#lo_addr(_tiempo), W0
0x0B44	0x781F80  	PUSH	W0
0x0B46	0x07FD83  	RCALL	_AjustarTiempoSistema
0x0B48	0xB1002F  	SUB	#2, W15
;Master.c,283 :: 		banEsc = 0;
0x0B4A	0x21A101  	MOV	#lo_addr(_banEsc), W1
0x0B4C	0xEF2000  	CLR	W0
0x0B4E	0x784880  	MOV.B	W0, [W1]
;Master.c,286 :: 		EnviarTramaUART(2, 255, 6, 2, tiempo);                                  //puerto = UART1, direccion = broadcast, numBytes = 6 bytes, funcion = setTiempo, trama = tiempo
0x0B50	0xB3C02D  	MOV.B	#2, W13
0x0B52	0xB3C06C  	MOV.B	#6, W12
0x0B54	0xB3CFFB  	MOV.B	#255, W11
0x0B56	0xB3C02A  	MOV.B	#2, W10
0x0B58	0x2102A0  	MOV	#lo_addr(_tiempo), W0
0x0B5A	0x781F80  	PUSH	W0
0x0B5C	0x07FE7B  	RCALL	_EnviarTramaUART
0x0B5E	0xB1002F  	SUB	#2, W15
;Master.c,287 :: 		U2RXIE_bit = 1;                                                         //Activa la interrupcion por UART1
0x0B60	0xA8C823  	BSET	U2RXIE_bit, BitPos(U2RXIE_bit+0)
;Master.c,279 :: 		if ((banEsc==1)&&(buffer==0xC4)){
L__spi_177:
L__spi_176:
;Master.c,292 :: 		if (banSetReloj==1){
0x0B62	0x21A0F0  	MOV	#lo_addr(_banSetReloj), W0
0x0B64	0x784010  	MOV.B	[W0], W0
0x0B66	0xE10461  	CP.B	W0, #1
0x0B68	0x3A000B  	BRA NZ	L_spi_132
L__spi_1116:
;Master.c,293 :: 		banSetReloj = 2;
0x0B6A	0x21A0F1  	MOV	#lo_addr(_banSetReloj), W1
0x0B6C	0xB3C020  	MOV.B	#2, W0
0x0B6E	0x784880  	MOV.B	W0, [W1]
;Master.c,294 :: 		j = 0;
0x0B70	0xEF2000  	CLR	W0
0x0B72	0x888140  	MOV	W0, _j
;Master.c,295 :: 		SPI1BUF = tiempo[j];
0x0B74	0x2102A1  	MOV	#lo_addr(_tiempo), W1
0x0B76	0x210280  	MOV	#lo_addr(_j), W0
0x0B78	0x408010  	ADD	W1, [W0], W0
0x0B7A	0x784010  	MOV.B	[W0], W0
0x0B7C	0xFB8000  	ZE	W0, W0
0x0B7E	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,296 :: 		}
L_spi_132:
;Master.c,297 :: 		if ((banSetReloj==2)&&(buffer!=0xC1)){
0x0B80	0x21A0F0  	MOV	#lo_addr(_banSetReloj), W0
0x0B82	0x784010  	MOV.B	[W0], W0
0x0B84	0xE10462  	CP.B	W0, #2
0x0B86	0x3A000E  	BRA NZ	L__spi_179
L__spi_1117:
0x0B88	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0B8A	0x784090  	MOV.B	[W0], W1
0x0B8C	0xB3CC10  	MOV.B	#193, W0
0x0B8E	0xE10C00  	CP.B	W1, W0
0x0B90	0x320009  	BRA Z	L__spi_178
L__spi_1118:
L__spi_167:
;Master.c,298 :: 		SPI1BUF = tiempo[j];
0x0B92	0x2102A1  	MOV	#lo_addr(_tiempo), W1
0x0B94	0x210280  	MOV	#lo_addr(_j), W0
0x0B96	0x408010  	ADD	W1, [W0], W0
0x0B98	0x784010  	MOV.B	[W0], W0
0x0B9A	0xFB8000  	ZE	W0, W0
0x0B9C	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,299 :: 		j++;
0x0B9E	0x200011  	MOV	#1, W1
0x0BA0	0x210280  	MOV	#lo_addr(_j), W0
0x0BA2	0x408810  	ADD	W1, [W0], [W0]
;Master.c,297 :: 		if ((banSetReloj==2)&&(buffer!=0xC1)){
L__spi_179:
L__spi_178:
;Master.c,301 :: 		if ((banSetReloj==2)&&(buffer==0xC1)){                                     //Si detecta el delimitador de final de trama:
0x0BA4	0x21A0F0  	MOV	#lo_addr(_banSetReloj), W0
0x0BA6	0x784010  	MOV.B	[W0], W0
0x0BA8	0xE10462  	CP.B	W0, #2
0x0BAA	0x3A0008  	BRA NZ	L__spi_181
L__spi_1119:
0x0BAC	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0BAE	0x784090  	MOV.B	[W0], W1
0x0BB0	0xB3CC10  	MOV.B	#193, W0
0x0BB2	0xE10C00  	CP.B	W1, W0
0x0BB4	0x3A0003  	BRA NZ	L__spi_180
L__spi_1120:
L__spi_166:
;Master.c,302 :: 		banSetReloj = 0;                                                        //Limpia la bandera de lectura
0x0BB6	0x21A0F1  	MOV	#lo_addr(_banSetReloj), W1
0x0BB8	0xEF2000  	CLR	W0
0x0BBA	0x784880  	MOV.B	W0, [W1]
;Master.c,301 :: 		if ((banSetReloj==2)&&(buffer==0xC1)){                                     //Si detecta el delimitador de final de trama:
L__spi_181:
L__spi_180:
;Master.c,307 :: 		if ((banLec==1)&&(buffer==0xB0)){                                          //Verifica si la bandera de inicio de trama esta activa
0x0BBC	0x21A170  	MOV	#lo_addr(_banLec), W0
0x0BBE	0x784010  	MOV.B	[W0], W0
0x0BC0	0xE10461  	CP.B	W0, #1
0x0BC2	0x3A0010  	BRA NZ	L__spi_183
L__spi_1121:
0x0BC4	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0BC6	0x784090  	MOV.B	[W0], W1
0x0BC8	0xB3CB00  	MOV.B	#176, W0
0x0BCA	0xE10C00  	CP.B	W1, W0
0x0BCC	0x3A000B  	BRA NZ	L__spi_182
L__spi_1122:
L__spi_165:
;Master.c,308 :: 		banLec = 2;                                                             //Activa la bandera de lectura
0x0BCE	0x21A171  	MOV	#lo_addr(_banLec), W1
0x0BD0	0xB3C020  	MOV.B	#2, W0
0x0BD2	0x784880  	MOV.B	W0, [W1]
;Master.c,309 :: 		i = 0;
0x0BD4	0xEF2000  	CLR	W0
0x0BD6	0x8880D0  	MOV	W0, _i
;Master.c,310 :: 		SPI1BUF = tramaCompleta[i];
0x0BD8	0x210301  	MOV	#lo_addr(_tramaCompleta), W1
0x0BDA	0x2101A0  	MOV	#lo_addr(_i), W0
0x0BDC	0x408010  	ADD	W1, [W0], W0
0x0BDE	0x784010  	MOV.B	[W0], W0
0x0BE0	0xFB8000  	ZE	W0, W0
0x0BE2	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,307 :: 		if ((banLec==1)&&(buffer==0xB0)){                                          //Verifica si la bandera de inicio de trama esta activa
L__spi_183:
L__spi_182:
;Master.c,312 :: 		if ((banLec==2)&&(buffer!=0xB1)){
0x0BE4	0x21A170  	MOV	#lo_addr(_banLec), W0
0x0BE6	0x784010  	MOV.B	[W0], W0
0x0BE8	0xE10462  	CP.B	W0, #2
0x0BEA	0x3A000E  	BRA NZ	L__spi_185
L__spi_1123:
0x0BEC	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0BEE	0x784090  	MOV.B	[W0], W1
0x0BF0	0xB3CB10  	MOV.B	#177, W0
0x0BF2	0xE10C00  	CP.B	W1, W0
0x0BF4	0x320009  	BRA Z	L__spi_184
L__spi_1124:
L__spi_164:
;Master.c,313 :: 		SPI1BUF = tramaCompleta[i];
0x0BF6	0x210301  	MOV	#lo_addr(_tramaCompleta), W1
0x0BF8	0x2101A0  	MOV	#lo_addr(_i), W0
0x0BFA	0x408010  	ADD	W1, [W0], W0
0x0BFC	0x784010  	MOV.B	[W0], W0
0x0BFE	0xFB8000  	ZE	W0, W0
0x0C00	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,314 :: 		i++;
0x0C02	0x200011  	MOV	#1, W1
0x0C04	0x2101A0  	MOV	#lo_addr(_i), W0
0x0C06	0x408810  	ADD	W1, [W0], [W0]
;Master.c,312 :: 		if ((banLec==2)&&(buffer!=0xB1)){
L__spi_185:
L__spi_184:
;Master.c,316 :: 		if ((banLec==2)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
0x0C08	0x21A170  	MOV	#lo_addr(_banLec), W0
0x0C0A	0x784010  	MOV.B	[W0], W0
0x0C0C	0xE10462  	CP.B	W0, #2
0x0C0E	0x3A000A  	BRA NZ	L__spi_187
L__spi_1125:
0x0C10	0x2101F0  	MOV	#lo_addr(_buffer), W0
0x0C12	0x784090  	MOV.B	[W0], W1
0x0C14	0xB3CB10  	MOV.B	#177, W0
0x0C16	0xE10C00  	CP.B	W1, W0
0x0C18	0x3A0005  	BRA NZ	L__spi_186
L__spi_1126:
L__spi_163:
;Master.c,317 :: 		banLec = 0;                                                             //Limpia la bandera de lectura
0x0C1A	0x21A171  	MOV	#lo_addr(_banLec), W1
0x0C1C	0xEF2000  	CLR	W0
0x0C1E	0x784880  	MOV.B	W0, [W1]
;Master.c,318 :: 		SPI1BUF = 0xFF;
0x0C20	0x200FF0  	MOV	#255, W0
0x0C22	0xB7A248  	MOV	WREG, SPI1BUF
;Master.c,316 :: 		if ((banLec==2)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
L__spi_187:
L__spi_186:
;Master.c,321 :: 		}
L_end_spi_1:
0x0C24	0x7806CF  	POP	W13
0x0C26	0x78064F  	POP	W12
0x0C28	0x7805CF  	POP	W11
0x0C2A	0x78054F  	POP	W10
0x0C2C	0x2001A0  	MOV	#26, W0
0x0C2E	0x09000C  	REPEAT	#12
0x0C30	0x78104F  	POP	[W0--]
0x0C32	0x78004F  	POP	W0
0x0C34	0xF90036  	POP	RCOUNT
0x0C36	0xF90032  	POP	DSRPAG
0x0C38	0xF90034  	POP	DSWPAG
0x0C3A	0x064000  	RETFIE
; end of _spi_1
_RecuperarHoraRPI:
0x05E8	0xFA0004  	LNK	#4
;tiempo_gps.c,101 :: 		unsigned long RecuperarHoraRPI(unsigned short *tramaTiempoRpi){
;tiempo_gps.c,105 :: 		horaRPi = ((long)tramaTiempoRpi[3]*3600)+((long)tramaTiempoRpi[4]*60)+((long)tramaTiempoRpi[5]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss      //10000*dd + 100*mm + aa
0x05EA	0x450063  	ADD	W10, #3, W0
0x05EC	0xFB8010  	ZE	[W0], W0
0x05EE	0xEB0080  	CLR	W1
0x05F0	0x20E102  	MOV	#3600, W2
0x05F2	0x200003  	MOV	#0, W3
0x05F4	0x07FFC4  	RCALL	__Multiply_32x32
0x05F6	0x980700  	MOV	W0, [W14+0]
0x05F8	0x980711  	MOV	W1, [W14+2]
0x05FA	0x450064  	ADD	W10, #4, W0
0x05FC	0xFB8010  	ZE	[W0], W0
0x05FE	0xEB0080  	CLR	W1
0x0600	0x2003C2  	MOV	#60, W2
0x0602	0x200003  	MOV	#0, W3
0x0604	0x07FFBC  	RCALL	__Multiply_32x32
0x0606	0x90010E  	MOV	[W14+0], W2
0x0608	0x90019E  	MOV	[W14+2], W3
0x060A	0x410100  	ADD	W2, W0, W2
0x060C	0x498181  	ADDC	W3, W1, W3
0x060E	0x450065  	ADD	W10, #5, W0
0x0610	0xFB8010  	ZE	[W0], W0
0x0612	0xEB0080  	CLR	W1
0x0614	0x410000  	ADD	W2, W0, W0
0x0616	0x498081  	ADDC	W3, W1, W1
;tiempo_gps.c,108 :: 		return horaRPi;
;tiempo_gps.c,110 :: 		}
L_end_RecuperarHoraRPI:
0x0618	0xFA8000  	ULNK
0x061A	0x060000  	RETURN
; end of _RecuperarHoraRPI
_RecuperarFechaRPI:
0x061C	0xFA0004  	LNK	#4
;tiempo_gps.c,87 :: 		unsigned long RecuperarFechaRPI(unsigned short *tramaTiempoRpi){
;tiempo_gps.c,91 :: 		fechaRPi = ((long)tramaTiempoRpi[0]*10000)+((long)tramaTiempoRpi[1]*100)+((long)tramaTiempoRpi[2]);      //10000*dd + 100*mm + aa
0x061E	0xFB801A  	ZE	[W10], W0
0x0620	0xEB0080  	CLR	W1
0x0622	0x227102  	MOV	#10000, W2
0x0624	0x200003  	MOV	#0, W3
0x0626	0x07FFAB  	RCALL	__Multiply_32x32
0x0628	0x980700  	MOV	W0, [W14+0]
0x062A	0x980711  	MOV	W1, [W14+2]
0x062C	0x450061  	ADD	W10, #1, W0
0x062E	0xFB8010  	ZE	[W0], W0
0x0630	0xEB0080  	CLR	W1
0x0632	0x200642  	MOV	#100, W2
0x0634	0x200003  	MOV	#0, W3
0x0636	0x07FFA3  	RCALL	__Multiply_32x32
0x0638	0x90010E  	MOV	[W14+0], W2
0x063A	0x90019E  	MOV	[W14+2], W3
0x063C	0x410100  	ADD	W2, W0, W2
0x063E	0x498181  	ADDC	W3, W1, W3
0x0640	0x450062  	ADD	W10, #2, W0
0x0642	0xFB8010  	ZE	[W0], W0
0x0644	0xEB0080  	CLR	W1
0x0646	0x410000  	ADD	W2, W0, W0
0x0648	0x498081  	ADDC	W3, W1, W1
;tiempo_gps.c,94 :: 		return fechaRPi;
;tiempo_gps.c,96 :: 		}
L_end_RecuperarFechaRPI:
0x064A	0xFA8000  	ULNK
0x064C	0x060000  	RETURN
; end of _RecuperarFechaRPI
_AjustarTiempoSistema:
0x064E	0xFA000E  	LNK	#14
;tiempo_gps.c,115 :: 		void AjustarTiempoSistema(unsigned long longHora, unsigned long longFecha, unsigned char *tramaTiempoSistema){
0x0650	0x97B84E  	MOV	[W14-8], W0
0x0652	0x9FBF40  	MOV	W0, [W14-8]
;tiempo_gps.c,124 :: 		hora = longHora / 3600;
0x0654	0xBE9F8C  	PUSH.D	W12
0x0656	0xBE9F8A  	PUSH.D	W10
0x0658	0x20E102  	MOV	#3600, W2
0x065A	0x200003  	MOV	#0, W3
0x065C	0xBE000A  	MOV.D	W10, W0
0x065E	0xEB0200  	CLR	W4
0x0660	0x07FEBF  	RCALL	__Divide_32x32
0x0662	0xBE054F  	POP.D	W10
0x0664	0x984700  	MOV.B	W0, [W14+0]
;tiempo_gps.c,125 :: 		minuto = (longHora%3600) / 60;
0x0666	0x20E102  	MOV	#3600, W2
0x0668	0x200003  	MOV	#0, W3
0x066A	0xBE000A  	MOV.D	W10, W0
0x066C	0xEB0200  	CLR	W4
0x066E	0x07FF90  	RCALL	__Modulus_32x32
0x0670	0x980750  	MOV	W0, [W14+10]
0x0672	0x980761  	MOV	W1, [W14+12]
0x0674	0x2003C2  	MOV	#60, W2
0x0676	0x200003  	MOV	#0, W3
0x0678	0xEB0200  	CLR	W4
0x067A	0x07FEB2  	RCALL	__Divide_32x32
0x067C	0x984710  	MOV.B	W0, [W14+1]
;tiempo_gps.c,126 :: 		segundo = (longHora%3600) % 60;
0x067E	0x90005E  	MOV	[W14+10], W0
0x0680	0x9000EE  	MOV	[W14+12], W1
0x0682	0x2003C2  	MOV	#60, W2
0x0684	0x200003  	MOV	#0, W3
0x0686	0xEB0200  	CLR	W4
0x0688	0x07FF83  	RCALL	__Modulus_32x32
0x068A	0xBE064F  	POP.D	W12
0x068C	0x984720  	MOV.B	W0, [W14+2]
;tiempo_gps.c,128 :: 		dia = longFecha / 10000;
0x068E	0xBE9F8C  	PUSH.D	W12
0x0690	0x227102  	MOV	#10000, W2
0x0692	0x200003  	MOV	#0, W3
0x0694	0xBE000C  	MOV.D	W12, W0
0x0696	0xEB0200  	CLR	W4
0x0698	0x07FEA3  	RCALL	__Divide_32x32
0x069A	0xBE064F  	POP.D	W12
0x069C	0x984730  	MOV.B	W0, [W14+3]
;tiempo_gps.c,129 :: 		mes = (longFecha%10000) / 100;
0x069E	0x227102  	MOV	#10000, W2
0x06A0	0x200003  	MOV	#0, W3
0x06A2	0xBE000C  	MOV.D	W12, W0
0x06A4	0xEB0200  	CLR	W4
0x06A6	0x07FF74  	RCALL	__Modulus_32x32
0x06A8	0x980750  	MOV	W0, [W14+10]
0x06AA	0x980761  	MOV	W1, [W14+12]
0x06AC	0x200642  	MOV	#100, W2
0x06AE	0x200003  	MOV	#0, W3
0x06B0	0xEB0200  	CLR	W4
0x06B2	0x07FE96  	RCALL	__Divide_32x32
0x06B4	0x984740  	MOV.B	W0, [W14+4]
;tiempo_gps.c,130 :: 		anio = (longFecha%10000) % 100;
0x06B6	0x90005E  	MOV	[W14+10], W0
0x06B8	0x9000EE  	MOV	[W14+12], W1
0x06BA	0x200642  	MOV	#100, W2
0x06BC	0x200003  	MOV	#0, W3
0x06BE	0xEB0200  	CLR	W4
0x06C0	0x07FF67  	RCALL	__Modulus_32x32
; anio start address is: 4 (W2)
0x06C2	0x784100  	MOV.B	W0, W2
;tiempo_gps.c,132 :: 		tramaTiempoSistema[0] = dia;
0x06C4	0x97B8CE  	MOV	[W14-8], W1
0x06C6	0x90403E  	MOV.B	[W14+3], W0
0x06C8	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,133 :: 		tramaTiempoSistema[1] = mes;
0x06CA	0x97B84E  	MOV	[W14-8], W0
0x06CC	0x4000E1  	ADD	W0, #1, W1
0x06CE	0x90404E  	MOV.B	[W14+4], W0
0x06D0	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,134 :: 		tramaTiempoSistema[2] = anio;
0x06D2	0x97B84E  	MOV	[W14-8], W0
0x06D4	0xECA000  	INC2	W0
0x06D6	0x784802  	MOV.B	W2, [W0]
; anio end address is: 4 (W2)
;tiempo_gps.c,135 :: 		tramaTiempoSistema[3] = hora;
0x06D8	0x97B84E  	MOV	[W14-8], W0
0x06DA	0x4000E3  	ADD	W0, #3, W1
0x06DC	0x90400E  	MOV.B	[W14+0], W0
0x06DE	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,136 :: 		tramaTiempoSistema[4] = minuto;
0x06E0	0x97B84E  	MOV	[W14-8], W0
0x06E2	0x4000E4  	ADD	W0, #4, W1
0x06E4	0x90401E  	MOV.B	[W14+1], W0
0x06E6	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,137 :: 		tramaTiempoSistema[5] = segundo;
0x06E8	0x97B84E  	MOV	[W14-8], W0
0x06EA	0x4000E5  	ADD	W0, #5, W1
0x06EC	0x90402E  	MOV.B	[W14+2], W0
0x06EE	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,140 :: 		}
L_end_AjustarTiempoSistema:
0x06F0	0xFA8000  	ULNK
0x06F2	0x060000  	RETURN
; end of _AjustarTiempoSistema
_EnviarTramaUART:
0x0854	0xFA0000  	LNK	#0
;Master.c,213 :: 		void EnviarTramaUART(unsigned short puertoUART, unsigned short direccion, unsigned short numDatos, unsigned short funcion, unsigned char *payload){
; payload start address is: 4 (W2)
0x0856	0x97B94E  	MOV	[W14-8], W2
;Master.c,217 :: 		if (puertoUART == 1){
0x0858	0xE15461  	CP.B	W10, #1
0x085A	0x3A001D  	BRA NZ	L__EnviarTramaUART62
L__EnviarTramaUART102:
;Master.c,218 :: 		UART1_Write(0x3A);                                                      //Envia la cabecera de la trama
0x085C	0x781F8A  	PUSH	W10
0x085E	0x2003AA  	MOV	#58, W10
0x0860	0x07FE06  	RCALL	_UART1_Write
;Master.c,219 :: 		UART1_Write(direccion);                                                 //Envia la direccion del destinatario
0x0862	0xFB850B  	ZE	W11, W10
0x0864	0x07FE04  	RCALL	_UART1_Write
;Master.c,220 :: 		UART1_Write(numDatos);                                                  //Envia el numero de datos
0x0866	0xFB850C  	ZE	W12, W10
0x0868	0x07FE02  	RCALL	_UART1_Write
;Master.c,221 :: 		UART1_Write(funcion);                                                   //Envia el codigo de la funcion
0x086A	0xFB850D  	ZE	W13, W10
0x086C	0x07FE00  	RCALL	_UART1_Write
0x086E	0x78054F  	POP	W10
;Master.c,222 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 2 (W1)
0x0870	0xEF2002  	CLR	W1
; payload end address is: 4 (W2)
; iDatos end address is: 2 (W1)
L_EnviarTramaUART13:
; iDatos start address is: 2 (W1)
; payload start address is: 4 (W2)
0x0872	0xFB800C  	ZE	W12, W0
0x0874	0xE10800  	CP	W1, W0
0x0876	0x310007  	BRA GEU	L_EnviarTramaUART14
L__EnviarTramaUART103:
;Master.c,223 :: 		UART1_Write(payload[iDatos]);
0x0878	0x410001  	ADD	W2, W1, W0
0x087A	0x781F8A  	PUSH	W10
0x087C	0xFB8510  	ZE	[W0], W10
0x087E	0x07FDF7  	RCALL	_UART1_Write
0x0880	0x78054F  	POP	W10
;Master.c,222 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x0882	0xEC2002  	INC	W1
;Master.c,224 :: 		}
; iDatos end address is: 2 (W1)
0x0884	0x37FFF6  	BRA	L_EnviarTramaUART13
L_EnviarTramaUART14:
;Master.c,225 :: 		UART1_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x0886	0x781F8A  	PUSH	W10
0x0888	0x2000DA  	MOV	#13, W10
0x088A	0x07FDF1  	RCALL	_UART1_Write
;Master.c,226 :: 		UART1_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x088C	0x2000AA  	MOV	#10, W10
0x088E	0x07FDEF  	RCALL	_UART1_Write
; payload end address is: 4 (W2)
0x0890	0x78054F  	POP	W10
0x0892	0x780082  	MOV	W2, W1
;Master.c,227 :: 		}
0x0894	0x370001  	BRA	L_EnviarTramaUART12
L__EnviarTramaUART62:
;Master.c,217 :: 		if (puertoUART == 1){
0x0896	0x780082  	MOV	W2, W1
;Master.c,227 :: 		}
L_EnviarTramaUART12:
;Master.c,229 :: 		if (puertoUART == 2){
; payload start address is: 2 (W1)
0x0898	0xE15462  	CP.B	W10, #2
0x089A	0x3A001B  	BRA NZ	L_EnviarTramaUART16
L__EnviarTramaUART104:
;Master.c,230 :: 		UART2_Write(0x3A);                                                      //Envia la cabecera de la trama
0x089C	0x781F8A  	PUSH	W10
0x089E	0x2003AA  	MOV	#58, W10
0x08A0	0x07FDC8  	RCALL	_UART2_Write
;Master.c,231 :: 		UART2_Write(direccion);                                                 //Envia la direccion del destinatario
0x08A2	0xFB850B  	ZE	W11, W10
0x08A4	0x07FDC6  	RCALL	_UART2_Write
;Master.c,232 :: 		UART2_Write(numDatos);                                                  //Envia el numero de datos
0x08A6	0xFB850C  	ZE	W12, W10
0x08A8	0x07FDC4  	RCALL	_UART2_Write
;Master.c,233 :: 		UART2_Write(funcion);                                                   //Envia el codigo de la funcion
0x08AA	0xFB850D  	ZE	W13, W10
0x08AC	0x07FDC2  	RCALL	_UART2_Write
0x08AE	0x78054F  	POP	W10
;Master.c,234 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
; iDatos start address is: 4 (W2)
0x08B0	0xEF2004  	CLR	W2
; iDatos end address is: 4 (W2)
L_EnviarTramaUART17:
; iDatos start address is: 4 (W2)
; payload start address is: 2 (W1)
; payload end address is: 2 (W1)
0x08B2	0xFB800C  	ZE	W12, W0
0x08B4	0xE11000  	CP	W2, W0
0x08B6	0x310007  	BRA GEU	L_EnviarTramaUART18
L__EnviarTramaUART105:
; payload end address is: 2 (W1)
;Master.c,235 :: 		UART2_Write(payload[iDatos]);
; payload start address is: 2 (W1)
0x08B8	0x408002  	ADD	W1, W2, W0
0x08BA	0x781F8A  	PUSH	W10
0x08BC	0xFB8510  	ZE	[W0], W10
0x08BE	0x07FDB9  	RCALL	_UART2_Write
0x08C0	0x78054F  	POP	W10
;Master.c,234 :: 		for (iDatos=0;iDatos<numDatos;iDatos++){                                //Envia la carga util de datos
0x08C2	0xEC2004  	INC	W2
;Master.c,236 :: 		}
; payload end address is: 2 (W1)
; iDatos end address is: 4 (W2)
0x08C4	0x37FFF6  	BRA	L_EnviarTramaUART17
L_EnviarTramaUART18:
;Master.c,237 :: 		UART2_Write(0x0D);                                                      //Envia el primer delimitador de final de la trama
0x08C6	0x781F8A  	PUSH	W10
0x08C8	0x2000DA  	MOV	#13, W10
0x08CA	0x07FDB3  	RCALL	_UART2_Write
;Master.c,238 :: 		UART2_Write(0x0A);                                                      //Envia el segundo delimitador de final de la trama
0x08CC	0x2000AA  	MOV	#10, W10
0x08CE	0x07FDB1  	RCALL	_UART2_Write
0x08D0	0x78054F  	POP	W10
;Master.c,239 :: 		}
L_EnviarTramaUART16:
;Master.c,241 :: 		}
L_end_EnviarTramaUART:
0x08D2	0xFA8000  	ULNK
0x08D4	0x060000  	RETURN
; end of _EnviarTramaUART
_UART1_Write:
0x046E	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x0470	0xAF0223  	BTSC	U1STA, #8
0x0472	0x370001  	BRA	L_UART1_Write1
0x0474	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x0476	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x0478	0xFA8000  	ULNK
0x047A	0x060000  	RETURN
; end of _UART1_Write
_UART2_Write:
0x0432	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,305 :: 		
;__Lib_UART_12_p24_p33.c,306 :: 		
L_UART2_Write25:
0x0434	0xAF0233  	BTSC	U2STA, #8
0x0436	0x370001  	BRA	L_UART2_Write26
0x0438	0x37FFFD  	BRA	L_UART2_Write25
L_UART2_Write26:
;__Lib_UART_12_p24_p33.c,307 :: 		
0x043A	0x8811AA  	MOV	W10, U2TXREG
;__Lib_UART_12_p24_p33.c,308 :: 		
L_end_UART2_Write:
0x043C	0xFA8000  	ULNK
0x043E	0x060000  	RETURN
; end of _UART2_Write
;Master.c,0 :: ?ICS_tramaUART2 [12]
0x8000	0x0000 ;?ICS_tramaUART2+0
0x8002	0x0000 ;?ICS_tramaUART2+2
0x8004	0x0000 ;?ICS_tramaUART2+4
0x8006	0x0000 ;?ICS_tramaUART2+6
0x8008	0x0000 ;?ICS_tramaUART2+8
0x800A	0x0000 ;?ICS_tramaUART2+10
; end of ?ICS_tramaUART2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200       [6]    _Get_Fosc_kHz
0x0206       [4]    _Get_Fosc_Per_Cyc
0x020A      [14]    _Delay_100ms
0x0218     [456]    _UART2_Init_Advanced
0x03E0      [82]    __Divide_32x32
0x0432      [14]    _UART2_Write
0x0440      [46]    _SPI1_Init_Advanced
0x046E      [14]    _UART1_Write
0x047C     [258]    _UART1_Init
0x057E      [18]    __Multiply_32x32
0x0590      [88]    __Modulus_32x32
0x05E8      [52]    _RecuperarHoraRPI
0x061C      [50]    _RecuperarFechaRPI
0x064E     [166]    _AjustarTiempoSistema
0x06F4     [352]    _ConfiguracionPrincipal
0x0854     [130]    _EnviarTramaUART
0x08D6     [182]    _main
0x098C     [184]    _urx_2
0x0A44      [72]    _int_1
0x0A8C     [432]    _spi_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0E04       [0]    RP1
0x0E04       [0]    LATA4_bit
0x100C       [1]    _byteGPS
0x100D       [1]    _numSetsFIFO
0x100E       [1]    _contTimer1
0x0242       [2]    SPI1CON
0x1010       [2]    _SPI_Rd_Ptr
0x0248       [2]    SPI1BUF
0x0E14       [0]    TEST
0x0E14       [0]    LATB12_bit
0x100F       [1]    _numFIFO
0x1012       [2]    _y
0x1014       [2]    _i_gps
0x1016       [2]    _x
0x1018       [1]    _banConf
0x101A       [2]    _i
0x1019       [1]    _contCiclos
0x101C       [2]    _contFIFO
0x101E       [1]    _contMuestras
0x1020       [4]    _horaSistema
0x1024       [2]    _i_uart
0x1026       [2]    _SPI_Wr_Ptr
0x101F       [1]    _buffer
0x1028       [2]    _j
0x102A       [6]    _tiempo
0x0236       [2]    U2RXREG
0x0234       [2]    U2TXREG
0x0224       [2]    U1TXREG
0x1030    [2506]    _tramaCompleta
0x19FA       [6]    _tiempoRPI
0x1A00       [4]    _fechaSistema
0x1A04       [1]    _byteUART2
0x1A06       [2]    _UART_Tx_Idle_Ptr
0x0230       [2]    U2MODE
0x1A08       [2]    _UART_Rdy_Ptr
0x1A0A       [2]    _UART_Wr_Ptr
0x1A0C       [2]    _UART_Rd_Ptr
0x0222       [2]    U1STA
0x0228       [2]    U1BRG
0x0220       [2]    U1MODE
0x0232       [2]    U2STA
0x0238       [2]    U2BRG
0x0800       [0]    U1RXIF_bit
0x0844       [2]    IPC2bits
0x0820       [0]    U1RXIE_bit
0x06C4       [1]    RPINR18bits
0x0680       [2]    RPOR0bits
0x0822       [0]    U2RXIE_bit
0x0802       [0]    U2RXIF_bit
0x0682       [2]    RPOR1bits
0x0222       [2]    U1STAbits
0x06C6       [1]    RPINR19bits
0x08C2       [2]    INTCON2
0x0E1E       [2]    ANSELB
0x0E00       [0]    TRISA3_bit
0x0E0E       [2]    ANSELA
0x0744       [2]    CLKDIVbits
0x0746       [2]    PLLFBDbits
0x0E10       [0]    TRISB11_bit
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB10_bit
0x0E00       [0]    TRISA4_bit
0x0E10       [0]    TRISB12_bit
0x084E       [2]    IPC7bits
0x1A05       [1]    _banSetGPS
0x1A0E       [1]    _banTIGPS
0x1A0F       [1]    _banSetReloj
0x1A10       [1]    _banEsc
0x1A11       [1]    _banCiclo
0x1A12       [1]    _banInicio
0x1A13       [1]    _banLeer
0x1A14       [1]    _banMuestrear
0x1A15       [1]    _banTFGPS
0x1A16       [1]    _banTCGPS
0x1A17       [1]    _banLec
0x0800       [0]    SPI1IF_bit
0x06A0       [2]    RPINR0
0x0820       [0]    SPI1IE_bit
0x0232       [2]    U2STAbits
0x0240       [2]    SPI1STAT
0x1A18       [1]    _banUTI
0x1A19       [1]    _banUTC
0x084A       [1]    IPC5bits
0x0822       [0]    INT1IE_bit
0x0802       [0]    INT1IF_bit
0x1000      [12]    _tramaUART2
0x0014       [4]    FARG_UART2_Init_Advanced_baud_rate
0x0018       [2]    FARG_UART2_Init_Advanced_parity
0x001A       [2]    FARG_UART2_Init_Advanced_stop_bits
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x0230       [2]    U2MODE
0x0232       [2]    U2STA
0x0234       [2]    U2TXREG
0x0236       [2]    U2RXREG
0x0238       [2]    U2BRG
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_UART2_Write__data
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [2]    FARG_UART1_Write__data
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_RecuperarHoraRPI_tramaTiempoRpi
0x0014       [2]    FARG_RecuperarFechaRPI_tramaTiempoRpi
0x0014       [4]    FARG_AjustarTiempoSistema_longHora
0x0018       [4]    FARG_AjustarTiempoSistema_longFecha
0x06A0       [2]    RPINR0
0x0014       [1]    FARG_EnviarTramaUART_puertoUART
0x0016       [1]    FARG_EnviarTramaUART_direccion
0x0018       [1]    FARG_EnviarTramaUART_numDatos
0x001A       [1]    FARG_EnviarTramaUART_funcion
0x08C2       [2]    INTCON2
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [12]    ?ICS_tramaUART2
//** Label List: ** 
//----------------------------------------------
  L_ConfigurarGPS0
  L_ConfigurarGPS2
  L_main4
  L_main5
  L_ConfiguracionPrincipal6
  L_InterrupcionP28
  L_InterrupcionP29
  L_InterrupcionP210
  L_EnviarTramaUART12
  L_EnviarTramaUART13
  L_EnviarTramaUART14
  L_EnviarTramaUART15
  L_EnviarTramaUART16
  L_EnviarTramaUART17
  L_EnviarTramaUART18
  L_EnviarTramaUART19
  L_spi_120
  L_spi_121
  L_spi_122
  L_spi_123
  L_spi_124
  L_spi_125
  L_spi_126
  L_spi_127
  L_spi_128
  L_spi_129
  L_spi_130
  L_spi_131
  L_spi_132
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_int_148
  L_int_149
  L_urx_250
  L_urx_251
  L_urx_252
  L_urx_253
  L_urx_254
  L_urx_255
  L_urx_256
  L_urx_257
  L_urx_258
  L_urx_259
  L_urx_260
  L__EnviarTramaUART62
  L__spi_163
  L__spi_164
  L__spi_165
  L__spi_166
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L__spi_173
  L__spi_174
  L__spi_175
  L__spi_176
  L__spi_177
  L__spi_178
  L__spi_179
  L__spi_180
  L__spi_181
  L__spi_182
  L__spi_183
  L__spi_184
  L__spi_185
  L__spi_186
  L__spi_187
  L__urx_288
  L__urx_289
  L__urx_290
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP2
  _InterrupcionP2
  L_end_EnviarTramaUART
  _EnviarTramaUART
  L__EnviarTramaUART102
  L__EnviarTramaUART103
  L__EnviarTramaUART104
  L__EnviarTramaUART105
  L_end_spi_1
  _spi_1
  L__spi_1107
  L__spi_1108
  L__spi_1109
  L__spi_1110
  L__spi_1111
  L__spi_1112
  L__spi_1113
  L__spi_1114
  L__spi_1115
  L__spi_1116
  L__spi_1117
  L__spi_1118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L_end_int_1
  _int_1
  L__int_1128
  L__int_1129
  L_end_urx_2
  _urx_2
  L__urx_2131
  L__urx_2132
  L__urx_2133
  L__urx_2134
  L__urx_2135
  L__urx_2136
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_ConfigurarGPS0
  L_ConfigurarGPS2
  L_main4
  L_main5
  L_ConfiguracionPrincipal6
  L_InterrupcionP28
  L_InterrupcionP29
  L_InterrupcionP210
  L_EnviarTramaUART12
  L_EnviarTramaUART13
  L_EnviarTramaUART14
  L_EnviarTramaUART15
  L_EnviarTramaUART16
  L_EnviarTramaUART17
  L_EnviarTramaUART18
  L_EnviarTramaUART19
  L_spi_120
  L_spi_121
  L_spi_122
  L_spi_123
  L_spi_124
  L_spi_125
  L_spi_126
  L_spi_127
  L_spi_128
  L_spi_129
  L_spi_130
  L_spi_131
  L_spi_132
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_int_148
  L_int_149
  L_urx_250
  L_urx_251
  L_urx_252
  L_urx_253
  L_urx_254
  L_urx_255
  L_urx_256
  L_urx_257
  L_urx_258
  L_urx_259
  L_urx_260
  L__EnviarTramaUART62
  L__spi_163
  L__spi_164
  L__spi_165
  L__spi_166
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L__spi_173
  L__spi_174
  L__spi_175
  L__spi_176
  L__spi_177
  L__spi_178
  L__spi_179
  L__spi_180
  L__spi_181
  L__spi_182
  L__spi_183
  L__spi_184
  L__spi_185
  L__spi_186
  L__spi_187
  L__urx_288
  L__urx_289
  L__urx_290
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP2
  _InterrupcionP2
  L_end_EnviarTramaUART
  _EnviarTramaUART
  L__EnviarTramaUART102
  L__EnviarTramaUART103
  L__EnviarTramaUART104
  L__EnviarTramaUART105
  L_end_spi_1
  _spi_1
  L__spi_1107
  L__spi_1108
  L__spi_1109
  L__spi_1110
  L__spi_1111
  L__spi_1112
  L__spi_1113
  L__spi_1114
  L__spi_1115
  L__spi_1116
  L__spi_1117
  L__spi_1118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L_end_int_1
  _int_1
  L__int_1128
  L__int_1129
  L_end_urx_2
  _urx_2
  L__urx_2131
  L__urx_2132
  L__urx_2133
  L__urx_2134
  L__urx_2135
  L__urx_2136
  L_ConfigurarGPS0
  L_ConfigurarGPS2
  L_main4
  L_main5
  L_ConfiguracionPrincipal6
  L_InterrupcionP28
  L_InterrupcionP29
  L_InterrupcionP210
  L_EnviarTramaUART12
  L_EnviarTramaUART13
  L_EnviarTramaUART14
  L_EnviarTramaUART15
  L_EnviarTramaUART16
  L_EnviarTramaUART17
  L_EnviarTramaUART18
  L_EnviarTramaUART19
  L_spi_120
  L_spi_121
  L_spi_122
  L_spi_123
  L_spi_124
  L_spi_125
  L_spi_126
  L_spi_127
  L_spi_128
  L_spi_129
  L_spi_130
  L_spi_131
  L_spi_132
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_int_148
  L_int_149
  L_urx_250
  L_urx_251
  L_urx_252
  L_urx_253
  L_urx_254
  L_urx_255
  L_urx_256
  L_urx_257
  L_urx_258
  L_urx_259
  L_urx_260
  L__EnviarTramaUART62
  L__spi_163
  L__spi_164
  L__spi_165
  L__spi_166
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L__spi_173
  L__spi_174
  L__spi_175
  L__spi_176
  L__spi_177
  L__spi_178
  L__spi_179
  L__spi_180
  L__spi_181
  L__spi_182
  L__spi_183
  L__spi_184
  L__spi_185
  L__spi_186
  L__spi_187
  L__urx_288
  L__urx_289
  L__urx_290
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP2
  _InterrupcionP2
  L_end_EnviarTramaUART
  _EnviarTramaUART
  L__EnviarTramaUART102
  L__EnviarTramaUART103
  L__EnviarTramaUART104
  L__EnviarTramaUART105
  L_end_spi_1
  _spi_1
  L__spi_1107
  L__spi_1108
  L__spi_1109
  L__spi_1110
  L__spi_1111
  L__spi_1112
  L__spi_1113
  L__spi_1114
  L__spi_1115
  L__spi_1116
  L__spi_1117
  L__spi_1118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L_end_int_1
  _int_1
  L__int_1128
  L__int_1129
  L_end_urx_2
  _urx_2
  L__urx_2131
  L__urx_2132
  L__urx_2133
  L__urx_2134
  L__urx_2135
  L__urx_2136
  L_ConfigurarGPS0
  L_ConfigurarGPS2
  L_main4
  L_main5
  L_ConfiguracionPrincipal6
  L_InterrupcionP28
  L_InterrupcionP29
  L_InterrupcionP210
  L_EnviarTramaUART12
  L_EnviarTramaUART13
  L_EnviarTramaUART14
  L_EnviarTramaUART15
  L_EnviarTramaUART16
  L_EnviarTramaUART17
  L_EnviarTramaUART18
  L_EnviarTramaUART19
  L_spi_120
  L_spi_121
  L_spi_122
  L_spi_123
  L_spi_124
  L_spi_125
  L_spi_126
  L_spi_127
  L_spi_128
  L_spi_129
  L_spi_130
  L_spi_131
  L_spi_132
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_int_148
  L_int_149
  L_urx_250
  L_urx_251
  L_urx_252
  L_urx_253
  L_urx_254
  L_urx_255
  L_urx_256
  L_urx_257
  L_urx_258
  L_urx_259
  L_urx_260
  L__EnviarTramaUART62
  L__spi_163
  L__spi_164
  L__spi_165
  L__spi_166
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L__spi_173
  L__spi_174
  L__spi_175
  L__spi_176
  L__spi_177
  L__spi_178
  L__spi_179
  L__spi_180
  L__spi_181
  L__spi_182
  L__spi_183
  L__spi_184
  L__spi_185
  L__spi_186
  L__spi_187
  L__urx_288
  L__urx_289
  L__urx_290
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP2
  _InterrupcionP2
  L_end_EnviarTramaUART
  _EnviarTramaUART
  L__EnviarTramaUART102
  L__EnviarTramaUART103
  L__EnviarTramaUART104
  L__EnviarTramaUART105
  L_end_spi_1
  _spi_1
  L__spi_1107
  L__spi_1108
  L__spi_1109
  L__spi_1110
  L__spi_1111
  L__spi_1112
  L__spi_1113
  L__spi_1114
  L__spi_1115
  L__spi_1116
  L__spi_1117
  L__spi_1118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L_end_int_1
  _int_1
  L__int_1128
  L__int_1129
  L_end_urx_2
  _urx_2
  L__urx_2131
  L__urx_2132
  L__urx_2133
  L__urx_2134
  L__urx_2135
  L__urx_2136
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
